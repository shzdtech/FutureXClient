// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgHeader.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBWrapMsgHeader {

  /// <summary>Holder for reflection information generated from PBMsgHeader.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PBMsgHeaderReflection {

    #region Descriptor
    /// <summary>File descriptor for PBMsgHeader.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBMsgHeaderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQQk1zZ0hlYWRlci5wcm90bxIPUEJXcmFwTXNnSGVhZGVyIjgKC1BCTXNn",
            "SGVhZGVyEhEKCW1lc3NhZ2VJZBgBIAEoBRIWCg5tZXNzYWdlU2VydmljZRgC",
            "IAEoCUIiCg9Qcm90b0J1Zk1lc3NhZ2VCD1BCV3JhcE1zZ0hlYWRlcmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgHeader.PBMsgHeader), global::PBWrapMsgHeader.PBMsgHeader.Parser, new[]{ "MessageId", "MessageService" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgHeader : pb::IMessage<PBMsgHeader> {
    private static readonly pb::MessageParser<PBMsgHeader> _parser = new pb::MessageParser<PBMsgHeader>(() => new PBMsgHeader());
    public static pb::MessageParser<PBMsgHeader> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgHeader.PBMsgHeaderReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgHeader(PBMsgHeader other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
    }

    public PBMsgHeader Clone() {
      return new PBMsgHeader(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgHeader);
    }

    public bool Equals(PBMsgHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      return size;
    }

    public void MergeFrom(PBMsgHeader other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
