// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgMDA.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBWrapMsgMDA {

  /// <summary>Holder for reflection information generated from PBMsgMDA.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PBMsgMDAReflection {

    #region Descriptor
    /// <summary>File descriptor for PBMsgMDA.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBMsgMDAReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5QQk1zZ01EQS5wcm90bxIMUEJXcmFwTXNnTURBIoIFCgpQQk1zZ0VxdE1E",
            "EgsKA0VPRhgBIAEoBRIOCgZzb3VyY2UYAyABKAkSKAoIZGF0YVR5cGUYBCAB",
            "KA4yFi5QQldyYXBNc2dNREEuRGF0YVR5cGUSDgoGc3ltYm9sGAUgASgJEhEK",
            "CXRpbWVTdGFtcBgGIAEoCRIVCg1wcmVDbG9zZVZhbHVlGAcgASgDEhEKCW9w",
            "ZW5WYWx1ZRgIIAEoAxIRCgloaWdoVmFsdWUYCyABKAMSEAoIbG93VmFsdWUY",
            "DCABKAMSEwoLbGF0ZXN0SW5kZXgYDSABKAMSEgoKbWF0Y2hQcmljZRgOIAEo",
            "AxIRCglhc2tQcmljZTUYDyABKAMSEQoJYXNrUHJpY2U0GBEgASgDEhEKCWFz",
            "a1ByaWNlMxgTIAEoAxIRCglhc2tQcmljZTIYFSABKAMSEQoJYXNrUHJpY2Ux",
            "GBcgASgDEhEKCWJpZFByaWNlMRgZIAEoAxIRCgliaWRQcmljZTIYGyABKAMS",
            "EQoJYmlkUHJpY2UzGB0gASgDEhEKCWJpZFByaWNlNBgfIAEoAxIRCgliaWRQ",
            "cmljZTUYISABKAMSEAoIdHVybm92ZXIYCSABKAMSDgoGdm9sdW1lGAogASgD",
            "EhAKCGFza1NpemU1GBAgASgDEhAKCGFza1NpemU0GBIgASgDEhAKCGFza1Np",
            "emUzGBQgASgDEhAKCGFza1NpemUyGBYgASgDEhAKCGFza1NpemUxGBggASgD",
            "EhAKCGJpZFNpemUxGBogASgDEhAKCGJpZFNpemUyGBwgASgDEhAKCGJpZFNp",
            "emUzGB4gASgDEhAKCGJpZFNpemU0GCAgASgDEhAKCGJpZFNpemU1GCIgASgD",
            "IvICCgpQQk1zZ0Z1dE1EEgsKA0VPRhgBIAEoBRIOCgZzeW1ib2wYBSABKAkS",
            "EQoJdGltZVN0YW1wGAYgASgJEhEKCWFza1ByaWNlMRgHIAEoAxIRCgliaWRQ",
            "cmljZTEYCSABKAMSFQoNcHJlQ2xvc2VQcmljZRgLIAEoAxIWCg5wcmVTZXR0",
            "bGVQcmljZRgMIAEoAxIRCglvcGVuUHJpY2UYDSABKAMSEQoJaGlnaFByaWNl",
            "GA4gASgDEhAKCGxvd1ByaWNlGA8gASgDEhIKCm1hdGNoUHJpY2UYECABKAMS",
            "EwoLcHJpY2VDaGFuZ2UYESABKAMSEwoLc2V0dGxlUHJpY2UYFCABKAMSEQoJ",
            "aGlnaExpbWl0GBUgASgDEhAKCGxvd0xpbWl0GBYgASgDEhAKCGFza1NpemUx",
            "GAggASgDEhAKCGJpZFNpemUxGAogASgDEg4KBnZvbHVtZRgSIAEoAxIQCgh0",
            "dXJub3ZlchgTIAEoAyL0BQoKUEJNc2dNREFNRBILCgNFT0YYASABKAUSGQoR",
            "cmVxdWVzdFN5bWJvbExpc3QYBSADKAkSKAoIZGF0YVR5cGUYBiABKA4yFi5Q",
            "QldyYXBNc2dNREEuRGF0YVR5cGUSDgoGc3ltYm9sGAcgASgJEhEKCXRpbWVT",
            "dGFtcBgIIAEoCRIVCg1wcmVDbG9zZVZhbHVlGAkgASgDEhEKCW9wZW5WYWx1",
            "ZRgKIAEoAxIQCgh0dXJub3ZlchgLIAEoAxIOCgZ2b2x1bWUYDCABKAMSEQoJ",
            "aGlnaFZhbHVlGA0gASgDEhAKCGxvd1ZhbHVlGA4gASgDEhMKC2xhdGVzdElu",
            "ZGV4GA8gASgDEhIKCm1hdGNoUHJpY2UYECABKAMSEQoJYXNrUHJpY2U1GBEg",
            "ASgDEhAKCGFza1NpemU1GBIgASgDEhEKCWFza1ByaWNlNBgTIAEoAxIQCghh",
            "c2tTaXplNBgUIAEoAxIRCglhc2tQcmljZTMYFSABKAMSEAoIYXNrU2l6ZTMY",
            "FiABKAMSEQoJYXNrUHJpY2UyGBcgASgDEhAKCGFza1NpemUyGBggASgDEhEK",
            "CWFza1ByaWNlMRgZIAEoAxIQCghhc2tTaXplMRgaIAEoAxIRCgliaWRQcmlj",
            "ZTEYGyABKAMSEAoIYmlkU2l6ZTEYHCABKAMSEQoJYmlkUHJpY2UyGB0gASgD",
            "EhAKCGJpZFNpemUyGB4gASgDEhEKCWJpZFByaWNlMxgfIAEoAxIQCghiaWRT",
            "aXplMxggIAEoAxIRCgliaWRQcmljZTQYISABKAMSEAoIYmlkU2l6ZTQYIiAB",
            "KAMSEQoJYmlkUHJpY2U1GCMgASgDEhAKCGJpZFNpemU1GCQgASgDEhYKDnBy",
            "ZVNldHRsZVByaWNlGCUgASgDEhMKC3ByaWNlQ2hhbmdlGCYgASgDEhMKC3Nl",
            "dHRsZVByaWNlGCcgASgDEhEKCWhpZ2hMaW1pdBgoIAEoAxIQCghsb3dMaW1p",
            "dBgpIAEoAypuCghEYXRhVHlwZRIOCgpEYXRhVHlwZV8wEAASCgoGRVFVSVRZ",
            "EAESCQoFSU5ERVgQAhIQCgxJTkRFWF9GVVRVUkUQAxIUChBDT01NT0RJVFlf",
            "RlVUVVJFEAQSEwoPSU5ERVhfRk9SQ0FTVEVSEAUqVwoLTWVzc2FnZVR5cGUS",
            "EQoNTWVzc2FnZVR5cGVfMBAAEg8KC0lORk9STUFUSU9OEAESCwoHUkVRVUVT",
            "VBACEgkKBUlNQUdFEAMSDAoIREFUQUJBU0UQBCo1CghTdGF0dXNEQhIOCgpT",
            "dGF0dXNEQl8wEAASCgoGTk9STUFMEAESDQoJU1VTUEVOREVEEAJCHwoPUHJv",
            "dG9CdWZNZXNzYWdlQgxQQldyYXBNc2dNREFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PBWrapMsgMDA.DataType), typeof(global::PBWrapMsgMDA.MessageType), typeof(global::PBWrapMsgMDA.StatusDB), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMDA.PBMsgEqtMD), global::PBWrapMsgMDA.PBMsgEqtMD.Parser, new[]{ "EOF", "Source", "DataType", "Symbol", "TimeStamp", "PreCloseValue", "OpenValue", "HighValue", "LowValue", "LatestIndex", "MatchPrice", "AskPrice5", "AskPrice4", "AskPrice3", "AskPrice2", "AskPrice1", "BidPrice1", "BidPrice2", "BidPrice3", "BidPrice4", "BidPrice5", "Turnover", "Volume", "AskSize5", "AskSize4", "AskSize3", "AskSize2", "AskSize1", "BidSize1", "BidSize2", "BidSize3", "BidSize4", "BidSize5" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMDA.PBMsgFutMD), global::PBWrapMsgMDA.PBMsgFutMD.Parser, new[]{ "EOF", "Symbol", "TimeStamp", "AskPrice1", "BidPrice1", "PreClosePrice", "PreSettlePrice", "OpenPrice", "HighPrice", "LowPrice", "MatchPrice", "PriceChange", "SettlePrice", "HighLimit", "LowLimit", "AskSize1", "BidSize1", "Volume", "Turnover" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMDA.PBMsgMDAMD), global::PBWrapMsgMDA.PBMsgMDAMD.Parser, new[]{ "EOF", "RequestSymbolList", "DataType", "Symbol", "TimeStamp", "PreCloseValue", "OpenValue", "Turnover", "Volume", "HighValue", "LowValue", "LatestIndex", "MatchPrice", "AskPrice5", "AskSize5", "AskPrice4", "AskSize4", "AskPrice3", "AskSize3", "AskPrice2", "AskSize2", "AskPrice1", "AskSize1", "BidPrice1", "BidSize1", "BidPrice2", "BidSize2", "BidPrice3", "BidSize3", "BidPrice4", "BidSize4", "BidPrice5", "BidSize5", "PreSettlePrice", "PriceChange", "SettlePrice", "HighLimit", "LowLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DataType {
    [pbr::OriginalName("DataType_0")] _0 = 0,
    [pbr::OriginalName("EQUITY")] Equity = 1,
    [pbr::OriginalName("INDEX")] Index = 2,
    [pbr::OriginalName("INDEX_FUTURE")] IndexFuture = 3,
    [pbr::OriginalName("COMMODITY_FUTURE")] CommodityFuture = 4,
    [pbr::OriginalName("INDEX_FORCASTER")] IndexForcaster = 5,
  }

  public enum MessageType {
    [pbr::OriginalName("MessageType_0")] _0 = 0,
    /// <summary>
    /// 行情更新
    /// </summary>
    [pbr::OriginalName("INFORMATION")] Information = 1,
    /// <summary>
    /// 订阅行情标识
    /// </summary>
    [pbr::OriginalName("REQUEST")] Request = 2,
    /// <summary>
    /// 最新的行情，非更新
    /// </summary>
    [pbr::OriginalName("IMAGE")] Image = 3,
    /// <summary>
    /// 数据库相关，比如wind
    /// </summary>
    [pbr::OriginalName("DATABASE")] Database = 4,
  }

  public enum StatusDB {
    [pbr::OriginalName("StatusDB_0")] _0 = 0,
    /// <summary>
    /// 正常
    /// </summary>
    [pbr::OriginalName("NORMAL")] Normal = 1,
    /// <summary>
    /// 停牌
    /// </summary>
    [pbr::OriginalName("SUSPENDED")] Suspended = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgEqtMD : pb::IMessage<PBMsgEqtMD> {
    private static readonly pb::MessageParser<PBMsgEqtMD> _parser = new pb::MessageParser<PBMsgEqtMD>(() => new PBMsgEqtMD());
    public static pb::MessageParser<PBMsgEqtMD> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMDA.PBMsgMDAReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgEqtMD() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgEqtMD(PBMsgEqtMD other) : this() {
      eOF_ = other.eOF_;
      source_ = other.source_;
      dataType_ = other.dataType_;
      symbol_ = other.symbol_;
      timeStamp_ = other.timeStamp_;
      preCloseValue_ = other.preCloseValue_;
      openValue_ = other.openValue_;
      highValue_ = other.highValue_;
      lowValue_ = other.lowValue_;
      latestIndex_ = other.latestIndex_;
      matchPrice_ = other.matchPrice_;
      askPrice5_ = other.askPrice5_;
      askPrice4_ = other.askPrice4_;
      askPrice3_ = other.askPrice3_;
      askPrice2_ = other.askPrice2_;
      askPrice1_ = other.askPrice1_;
      bidPrice1_ = other.bidPrice1_;
      bidPrice2_ = other.bidPrice2_;
      bidPrice3_ = other.bidPrice3_;
      bidPrice4_ = other.bidPrice4_;
      bidPrice5_ = other.bidPrice5_;
      turnover_ = other.turnover_;
      volume_ = other.volume_;
      askSize5_ = other.askSize5_;
      askSize4_ = other.askSize4_;
      askSize3_ = other.askSize3_;
      askSize2_ = other.askSize2_;
      askSize1_ = other.askSize1_;
      bidSize1_ = other.bidSize1_;
      bidSize2_ = other.bidSize2_;
      bidSize3_ = other.bidSize3_;
      bidSize4_ = other.bidSize4_;
      bidSize5_ = other.bidSize5_;
    }

    public PBMsgEqtMD Clone() {
      return new PBMsgEqtMD(this);
    }

    /// <summary>Field number for the "EOF" field.</summary>
    public const int EOFFieldNumber = 1;
    private int eOF_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int EOF {
      get { return eOF_; }
      set {
        eOF_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// Message Body
    /// 深圳、上海等
    /// </summary>
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 4;
    private global::PBWrapMsgMDA.DataType dataType_ = 0;
    /// <summary>
    /// 现货、股指期货等
    /// </summary>
    public global::PBWrapMsgMDA.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 5;
    private string symbol_ = "";
    /// <summary>
    /// 现货期货代码
    /// </summary>
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private string timeStamp_ = "";
    /// <summary>
    /// 时间戳
    /// </summary>
    public string TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preCloseValue" field.</summary>
    public const int PreCloseValueFieldNumber = 7;
    private long preCloseValue_;
    /// <summary>
    /// Multiplied by 10,000
    /// 昨日收盘
    /// </summary>
    public long PreCloseValue {
      get { return preCloseValue_; }
      set {
        preCloseValue_ = value;
      }
    }

    /// <summary>Field number for the "openValue" field.</summary>
    public const int OpenValueFieldNumber = 8;
    private long openValue_;
    /// <summary>
    /// 开盘价
    /// </summary>
    public long OpenValue {
      get { return openValue_; }
      set {
        openValue_ = value;
      }
    }

    /// <summary>Field number for the "highValue" field.</summary>
    public const int HighValueFieldNumber = 11;
    private long highValue_;
    /// <summary>
    /// 最高成交价
    /// </summary>
    public long HighValue {
      get { return highValue_; }
      set {
        highValue_ = value;
      }
    }

    /// <summary>Field number for the "lowValue" field.</summary>
    public const int LowValueFieldNumber = 12;
    private long lowValue_;
    /// <summary>
    /// 最低成交价
    /// </summary>
    public long LowValue {
      get { return lowValue_; }
      set {
        lowValue_ = value;
      }
    }

    /// <summary>Field number for the "latestIndex" field.</summary>
    public const int LatestIndexFieldNumber = 13;
    private long latestIndex_;
    /// <summary>
    /// ？暂时未用
    /// </summary>
    public long LatestIndex {
      get { return latestIndex_; }
      set {
        latestIndex_ = value;
      }
    }

    /// <summary>Field number for the "matchPrice" field.</summary>
    public const int MatchPriceFieldNumber = 14;
    private long matchPrice_;
    /// <summary>
    /// 最近成交价
    /// </summary>
    public long MatchPrice {
      get { return matchPrice_; }
      set {
        matchPrice_ = value;
      }
    }

    /// <summary>Field number for the "askPrice5" field.</summary>
    public const int AskPrice5FieldNumber = 15;
    private long askPrice5_;
    /// <summary>
    /// 卖5
    /// </summary>
    public long AskPrice5 {
      get { return askPrice5_; }
      set {
        askPrice5_ = value;
      }
    }

    /// <summary>Field number for the "askPrice4" field.</summary>
    public const int AskPrice4FieldNumber = 17;
    private long askPrice4_;
    public long AskPrice4 {
      get { return askPrice4_; }
      set {
        askPrice4_ = value;
      }
    }

    /// <summary>Field number for the "askPrice3" field.</summary>
    public const int AskPrice3FieldNumber = 19;
    private long askPrice3_;
    public long AskPrice3 {
      get { return askPrice3_; }
      set {
        askPrice3_ = value;
      }
    }

    /// <summary>Field number for the "askPrice2" field.</summary>
    public const int AskPrice2FieldNumber = 21;
    private long askPrice2_;
    public long AskPrice2 {
      get { return askPrice2_; }
      set {
        askPrice2_ = value;
      }
    }

    /// <summary>Field number for the "askPrice1" field.</summary>
    public const int AskPrice1FieldNumber = 23;
    private long askPrice1_;
    public long AskPrice1 {
      get { return askPrice1_; }
      set {
        askPrice1_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice1" field.</summary>
    public const int BidPrice1FieldNumber = 25;
    private long bidPrice1_;
    /// <summary>
    /// 买1
    /// </summary>
    public long BidPrice1 {
      get { return bidPrice1_; }
      set {
        bidPrice1_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice2" field.</summary>
    public const int BidPrice2FieldNumber = 27;
    private long bidPrice2_;
    public long BidPrice2 {
      get { return bidPrice2_; }
      set {
        bidPrice2_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice3" field.</summary>
    public const int BidPrice3FieldNumber = 29;
    private long bidPrice3_;
    public long BidPrice3 {
      get { return bidPrice3_; }
      set {
        bidPrice3_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice4" field.</summary>
    public const int BidPrice4FieldNumber = 31;
    private long bidPrice4_;
    public long BidPrice4 {
      get { return bidPrice4_; }
      set {
        bidPrice4_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice5" field.</summary>
    public const int BidPrice5FieldNumber = 33;
    private long bidPrice5_;
    public long BidPrice5 {
      get { return bidPrice5_; }
      set {
        bidPrice5_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 9;
    private long turnover_;
    /// <summary>
    /// NOT Multiplied by 10,000
    /// 成交金额
    /// </summary>
    public long Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 10;
    private long volume_;
    /// <summary>
    /// 成交量
    /// </summary>
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "askSize5" field.</summary>
    public const int AskSize5FieldNumber = 16;
    private long askSize5_;
    /// <summary>
    /// 卖数量5
    /// </summary>
    public long AskSize5 {
      get { return askSize5_; }
      set {
        askSize5_ = value;
      }
    }

    /// <summary>Field number for the "askSize4" field.</summary>
    public const int AskSize4FieldNumber = 18;
    private long askSize4_;
    public long AskSize4 {
      get { return askSize4_; }
      set {
        askSize4_ = value;
      }
    }

    /// <summary>Field number for the "askSize3" field.</summary>
    public const int AskSize3FieldNumber = 20;
    private long askSize3_;
    public long AskSize3 {
      get { return askSize3_; }
      set {
        askSize3_ = value;
      }
    }

    /// <summary>Field number for the "askSize2" field.</summary>
    public const int AskSize2FieldNumber = 22;
    private long askSize2_;
    public long AskSize2 {
      get { return askSize2_; }
      set {
        askSize2_ = value;
      }
    }

    /// <summary>Field number for the "askSize1" field.</summary>
    public const int AskSize1FieldNumber = 24;
    private long askSize1_;
    public long AskSize1 {
      get { return askSize1_; }
      set {
        askSize1_ = value;
      }
    }

    /// <summary>Field number for the "bidSize1" field.</summary>
    public const int BidSize1FieldNumber = 26;
    private long bidSize1_;
    public long BidSize1 {
      get { return bidSize1_; }
      set {
        bidSize1_ = value;
      }
    }

    /// <summary>Field number for the "bidSize2" field.</summary>
    public const int BidSize2FieldNumber = 28;
    private long bidSize2_;
    public long BidSize2 {
      get { return bidSize2_; }
      set {
        bidSize2_ = value;
      }
    }

    /// <summary>Field number for the "bidSize3" field.</summary>
    public const int BidSize3FieldNumber = 30;
    private long bidSize3_;
    public long BidSize3 {
      get { return bidSize3_; }
      set {
        bidSize3_ = value;
      }
    }

    /// <summary>Field number for the "bidSize4" field.</summary>
    public const int BidSize4FieldNumber = 32;
    private long bidSize4_;
    public long BidSize4 {
      get { return bidSize4_; }
      set {
        bidSize4_ = value;
      }
    }

    /// <summary>Field number for the "bidSize5" field.</summary>
    public const int BidSize5FieldNumber = 34;
    private long bidSize5_;
    public long BidSize5 {
      get { return bidSize5_; }
      set {
        bidSize5_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgEqtMD);
    }

    public bool Equals(PBMsgEqtMD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EOF != other.EOF) return false;
      if (Source != other.Source) return false;
      if (DataType != other.DataType) return false;
      if (Symbol != other.Symbol) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (PreCloseValue != other.PreCloseValue) return false;
      if (OpenValue != other.OpenValue) return false;
      if (HighValue != other.HighValue) return false;
      if (LowValue != other.LowValue) return false;
      if (LatestIndex != other.LatestIndex) return false;
      if (MatchPrice != other.MatchPrice) return false;
      if (AskPrice5 != other.AskPrice5) return false;
      if (AskPrice4 != other.AskPrice4) return false;
      if (AskPrice3 != other.AskPrice3) return false;
      if (AskPrice2 != other.AskPrice2) return false;
      if (AskPrice1 != other.AskPrice1) return false;
      if (BidPrice1 != other.BidPrice1) return false;
      if (BidPrice2 != other.BidPrice2) return false;
      if (BidPrice3 != other.BidPrice3) return false;
      if (BidPrice4 != other.BidPrice4) return false;
      if (BidPrice5 != other.BidPrice5) return false;
      if (Turnover != other.Turnover) return false;
      if (Volume != other.Volume) return false;
      if (AskSize5 != other.AskSize5) return false;
      if (AskSize4 != other.AskSize4) return false;
      if (AskSize3 != other.AskSize3) return false;
      if (AskSize2 != other.AskSize2) return false;
      if (AskSize1 != other.AskSize1) return false;
      if (BidSize1 != other.BidSize1) return false;
      if (BidSize2 != other.BidSize2) return false;
      if (BidSize3 != other.BidSize3) return false;
      if (BidSize4 != other.BidSize4) return false;
      if (BidSize5 != other.BidSize5) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EOF != 0) hash ^= EOF.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TimeStamp.Length != 0) hash ^= TimeStamp.GetHashCode();
      if (PreCloseValue != 0L) hash ^= PreCloseValue.GetHashCode();
      if (OpenValue != 0L) hash ^= OpenValue.GetHashCode();
      if (HighValue != 0L) hash ^= HighValue.GetHashCode();
      if (LowValue != 0L) hash ^= LowValue.GetHashCode();
      if (LatestIndex != 0L) hash ^= LatestIndex.GetHashCode();
      if (MatchPrice != 0L) hash ^= MatchPrice.GetHashCode();
      if (AskPrice5 != 0L) hash ^= AskPrice5.GetHashCode();
      if (AskPrice4 != 0L) hash ^= AskPrice4.GetHashCode();
      if (AskPrice3 != 0L) hash ^= AskPrice3.GetHashCode();
      if (AskPrice2 != 0L) hash ^= AskPrice2.GetHashCode();
      if (AskPrice1 != 0L) hash ^= AskPrice1.GetHashCode();
      if (BidPrice1 != 0L) hash ^= BidPrice1.GetHashCode();
      if (BidPrice2 != 0L) hash ^= BidPrice2.GetHashCode();
      if (BidPrice3 != 0L) hash ^= BidPrice3.GetHashCode();
      if (BidPrice4 != 0L) hash ^= BidPrice4.GetHashCode();
      if (BidPrice5 != 0L) hash ^= BidPrice5.GetHashCode();
      if (Turnover != 0L) hash ^= Turnover.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (AskSize5 != 0L) hash ^= AskSize5.GetHashCode();
      if (AskSize4 != 0L) hash ^= AskSize4.GetHashCode();
      if (AskSize3 != 0L) hash ^= AskSize3.GetHashCode();
      if (AskSize2 != 0L) hash ^= AskSize2.GetHashCode();
      if (AskSize1 != 0L) hash ^= AskSize1.GetHashCode();
      if (BidSize1 != 0L) hash ^= BidSize1.GetHashCode();
      if (BidSize2 != 0L) hash ^= BidSize2.GetHashCode();
      if (BidSize3 != 0L) hash ^= BidSize3.GetHashCode();
      if (BidSize4 != 0L) hash ^= BidSize4.GetHashCode();
      if (BidSize5 != 0L) hash ^= BidSize5.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EOF != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EOF);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (DataType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DataType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Symbol);
      }
      if (TimeStamp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TimeStamp);
      }
      if (PreCloseValue != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PreCloseValue);
      }
      if (OpenValue != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(OpenValue);
      }
      if (Turnover != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Turnover);
      }
      if (Volume != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Volume);
      }
      if (HighValue != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(HighValue);
      }
      if (LowValue != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LowValue);
      }
      if (LatestIndex != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(LatestIndex);
      }
      if (MatchPrice != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(MatchPrice);
      }
      if (AskPrice5 != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(AskPrice5);
      }
      if (AskSize5 != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(AskSize5);
      }
      if (AskPrice4 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskPrice4);
      }
      if (AskSize4 != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(AskSize4);
      }
      if (AskPrice3 != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AskPrice3);
      }
      if (AskSize3 != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AskSize3);
      }
      if (AskPrice2 != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AskPrice2);
      }
      if (AskSize2 != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(AskSize2);
      }
      if (AskPrice1 != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(AskPrice1);
      }
      if (AskSize1 != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(AskSize1);
      }
      if (BidPrice1 != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(BidPrice1);
      }
      if (BidSize1 != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(BidSize1);
      }
      if (BidPrice2 != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(BidPrice2);
      }
      if (BidSize2 != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(BidSize2);
      }
      if (BidPrice3 != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(BidPrice3);
      }
      if (BidSize3 != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(BidSize3);
      }
      if (BidPrice4 != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(BidPrice4);
      }
      if (BidSize4 != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(BidSize4);
      }
      if (BidPrice5 != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(BidPrice5);
      }
      if (BidSize5 != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(BidSize5);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EOF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EOF);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TimeStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStamp);
      }
      if (PreCloseValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreCloseValue);
      }
      if (OpenValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenValue);
      }
      if (HighValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighValue);
      }
      if (LowValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowValue);
      }
      if (LatestIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestIndex);
      }
      if (MatchPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchPrice);
      }
      if (AskPrice5 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AskPrice5);
      }
      if (AskPrice4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice4);
      }
      if (AskPrice3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice3);
      }
      if (AskPrice2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice2);
      }
      if (AskPrice1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice1);
      }
      if (BidPrice1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice1);
      }
      if (BidPrice2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice2);
      }
      if (BidPrice3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice3);
      }
      if (BidPrice4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice4);
      }
      if (BidPrice5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice5);
      }
      if (Turnover != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Turnover);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (AskSize5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize5);
      }
      if (AskSize4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize4);
      }
      if (AskSize3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize3);
      }
      if (AskSize2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize2);
      }
      if (AskSize1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize1);
      }
      if (BidSize1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize1);
      }
      if (BidSize2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize2);
      }
      if (BidSize3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize3);
      }
      if (BidSize4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize4);
      }
      if (BidSize5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize5);
      }
      return size;
    }

    public void MergeFrom(PBMsgEqtMD other) {
      if (other == null) {
        return;
      }
      if (other.EOF != 0) {
        EOF = other.EOF;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TimeStamp.Length != 0) {
        TimeStamp = other.TimeStamp;
      }
      if (other.PreCloseValue != 0L) {
        PreCloseValue = other.PreCloseValue;
      }
      if (other.OpenValue != 0L) {
        OpenValue = other.OpenValue;
      }
      if (other.HighValue != 0L) {
        HighValue = other.HighValue;
      }
      if (other.LowValue != 0L) {
        LowValue = other.LowValue;
      }
      if (other.LatestIndex != 0L) {
        LatestIndex = other.LatestIndex;
      }
      if (other.MatchPrice != 0L) {
        MatchPrice = other.MatchPrice;
      }
      if (other.AskPrice5 != 0L) {
        AskPrice5 = other.AskPrice5;
      }
      if (other.AskPrice4 != 0L) {
        AskPrice4 = other.AskPrice4;
      }
      if (other.AskPrice3 != 0L) {
        AskPrice3 = other.AskPrice3;
      }
      if (other.AskPrice2 != 0L) {
        AskPrice2 = other.AskPrice2;
      }
      if (other.AskPrice1 != 0L) {
        AskPrice1 = other.AskPrice1;
      }
      if (other.BidPrice1 != 0L) {
        BidPrice1 = other.BidPrice1;
      }
      if (other.BidPrice2 != 0L) {
        BidPrice2 = other.BidPrice2;
      }
      if (other.BidPrice3 != 0L) {
        BidPrice3 = other.BidPrice3;
      }
      if (other.BidPrice4 != 0L) {
        BidPrice4 = other.BidPrice4;
      }
      if (other.BidPrice5 != 0L) {
        BidPrice5 = other.BidPrice5;
      }
      if (other.Turnover != 0L) {
        Turnover = other.Turnover;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.AskSize5 != 0L) {
        AskSize5 = other.AskSize5;
      }
      if (other.AskSize4 != 0L) {
        AskSize4 = other.AskSize4;
      }
      if (other.AskSize3 != 0L) {
        AskSize3 = other.AskSize3;
      }
      if (other.AskSize2 != 0L) {
        AskSize2 = other.AskSize2;
      }
      if (other.AskSize1 != 0L) {
        AskSize1 = other.AskSize1;
      }
      if (other.BidSize1 != 0L) {
        BidSize1 = other.BidSize1;
      }
      if (other.BidSize2 != 0L) {
        BidSize2 = other.BidSize2;
      }
      if (other.BidSize3 != 0L) {
        BidSize3 = other.BidSize3;
      }
      if (other.BidSize4 != 0L) {
        BidSize4 = other.BidSize4;
      }
      if (other.BidSize5 != 0L) {
        BidSize5 = other.BidSize5;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EOF = input.ReadInt32();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            dataType_ = (global::PBWrapMsgMDA.DataType) input.ReadEnum();
            break;
          }
          case 42: {
            Symbol = input.ReadString();
            break;
          }
          case 50: {
            TimeStamp = input.ReadString();
            break;
          }
          case 56: {
            PreCloseValue = input.ReadInt64();
            break;
          }
          case 64: {
            OpenValue = input.ReadInt64();
            break;
          }
          case 72: {
            Turnover = input.ReadInt64();
            break;
          }
          case 80: {
            Volume = input.ReadInt64();
            break;
          }
          case 88: {
            HighValue = input.ReadInt64();
            break;
          }
          case 96: {
            LowValue = input.ReadInt64();
            break;
          }
          case 104: {
            LatestIndex = input.ReadInt64();
            break;
          }
          case 112: {
            MatchPrice = input.ReadInt64();
            break;
          }
          case 120: {
            AskPrice5 = input.ReadInt64();
            break;
          }
          case 128: {
            AskSize5 = input.ReadInt64();
            break;
          }
          case 136: {
            AskPrice4 = input.ReadInt64();
            break;
          }
          case 144: {
            AskSize4 = input.ReadInt64();
            break;
          }
          case 152: {
            AskPrice3 = input.ReadInt64();
            break;
          }
          case 160: {
            AskSize3 = input.ReadInt64();
            break;
          }
          case 168: {
            AskPrice2 = input.ReadInt64();
            break;
          }
          case 176: {
            AskSize2 = input.ReadInt64();
            break;
          }
          case 184: {
            AskPrice1 = input.ReadInt64();
            break;
          }
          case 192: {
            AskSize1 = input.ReadInt64();
            break;
          }
          case 200: {
            BidPrice1 = input.ReadInt64();
            break;
          }
          case 208: {
            BidSize1 = input.ReadInt64();
            break;
          }
          case 216: {
            BidPrice2 = input.ReadInt64();
            break;
          }
          case 224: {
            BidSize2 = input.ReadInt64();
            break;
          }
          case 232: {
            BidPrice3 = input.ReadInt64();
            break;
          }
          case 240: {
            BidSize3 = input.ReadInt64();
            break;
          }
          case 248: {
            BidPrice4 = input.ReadInt64();
            break;
          }
          case 256: {
            BidSize4 = input.ReadInt64();
            break;
          }
          case 264: {
            BidPrice5 = input.ReadInt64();
            break;
          }
          case 272: {
            BidSize5 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgFutMD : pb::IMessage<PBMsgFutMD> {
    private static readonly pb::MessageParser<PBMsgFutMD> _parser = new pb::MessageParser<PBMsgFutMD>(() => new PBMsgFutMD());
    public static pb::MessageParser<PBMsgFutMD> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMDA.PBMsgMDAReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgFutMD() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgFutMD(PBMsgFutMD other) : this() {
      eOF_ = other.eOF_;
      symbol_ = other.symbol_;
      timeStamp_ = other.timeStamp_;
      askPrice1_ = other.askPrice1_;
      bidPrice1_ = other.bidPrice1_;
      preClosePrice_ = other.preClosePrice_;
      preSettlePrice_ = other.preSettlePrice_;
      openPrice_ = other.openPrice_;
      highPrice_ = other.highPrice_;
      lowPrice_ = other.lowPrice_;
      matchPrice_ = other.matchPrice_;
      priceChange_ = other.priceChange_;
      settlePrice_ = other.settlePrice_;
      highLimit_ = other.highLimit_;
      lowLimit_ = other.lowLimit_;
      askSize1_ = other.askSize1_;
      bidSize1_ = other.bidSize1_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
    }

    public PBMsgFutMD Clone() {
      return new PBMsgFutMD(this);
    }

    /// <summary>Field number for the "EOF" field.</summary>
    public const int EOFFieldNumber = 1;
    private int eOF_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int EOF {
      get { return eOF_; }
      set {
        eOF_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 5;
    private string symbol_ = "";
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private string timeStamp_ = "";
    public string TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "askPrice1" field.</summary>
    public const int AskPrice1FieldNumber = 7;
    private long askPrice1_;
    /// <summary>
    /// Multiplied by 10,000
    /// 申报卖出
    /// </summary>
    public long AskPrice1 {
      get { return askPrice1_; }
      set {
        askPrice1_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice1" field.</summary>
    public const int BidPrice1FieldNumber = 9;
    private long bidPrice1_;
    /// <summary>
    /// 申报买入
    /// </summary>
    public long BidPrice1 {
      get { return bidPrice1_; }
      set {
        bidPrice1_ = value;
      }
    }

    /// <summary>Field number for the "preClosePrice" field.</summary>
    public const int PreClosePriceFieldNumber = 11;
    private long preClosePrice_;
    /// <summary>
    /// 昨收盘
    /// </summary>
    public long PreClosePrice {
      get { return preClosePrice_; }
      set {
        preClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "preSettlePrice" field.</summary>
    public const int PreSettlePriceFieldNumber = 12;
    private long preSettlePrice_;
    /// <summary>
    /// 昨结算价
    /// </summary>
    public long PreSettlePrice {
      get { return preSettlePrice_; }
      set {
        preSettlePrice_ = value;
      }
    }

    /// <summary>Field number for the "openPrice" field.</summary>
    public const int OpenPriceFieldNumber = 13;
    private long openPrice_;
    /// <summary>
    /// 今开盘
    /// </summary>
    public long OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 14;
    private long highPrice_;
    /// <summary>
    /// 当日最高
    /// </summary>
    public long HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 15;
    private long lowPrice_;
    /// <summary>
    /// 当日最低
    /// </summary>
    public long LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "matchPrice" field.</summary>
    public const int MatchPriceFieldNumber = 16;
    private long matchPrice_;
    /// <summary>
    /// 最新成交价
    /// </summary>
    public long MatchPrice {
      get { return matchPrice_; }
      set {
        matchPrice_ = value;
      }
    }

    /// <summary>Field number for the "priceChange" field.</summary>
    public const int PriceChangeFieldNumber = 17;
    private long priceChange_;
    /// <summary>
    /// 涨跌(最新价－昨收盘)
    /// </summary>
    public long PriceChange {
      get { return priceChange_; }
      set {
        priceChange_ = value;
      }
    }

    /// <summary>Field number for the "settlePrice" field.</summary>
    public const int SettlePriceFieldNumber = 20;
    private long settlePrice_;
    /// <summary>
    /// 今结算价
    /// </summary>
    public long SettlePrice {
      get { return settlePrice_; }
      set {
        settlePrice_ = value;
      }
    }

    /// <summary>Field number for the "highLimit" field.</summary>
    public const int HighLimitFieldNumber = 21;
    private long highLimit_;
    /// <summary>
    /// 涨停版
    /// </summary>
    public long HighLimit {
      get { return highLimit_; }
      set {
        highLimit_ = value;
      }
    }

    /// <summary>Field number for the "lowLimit" field.</summary>
    public const int LowLimitFieldNumber = 22;
    private long lowLimit_;
    /// <summary>
    /// 跌停版
    /// </summary>
    public long LowLimit {
      get { return lowLimit_; }
      set {
        lowLimit_ = value;
      }
    }

    /// <summary>Field number for the "askSize1" field.</summary>
    public const int AskSize1FieldNumber = 8;
    private long askSize1_;
    /// <summary>
    /// NOT Multiplied by 10,000
    /// 申报卖出量
    /// </summary>
    public long AskSize1 {
      get { return askSize1_; }
      set {
        askSize1_ = value;
      }
    }

    /// <summary>Field number for the "bidSize1" field.</summary>
    public const int BidSize1FieldNumber = 10;
    private long bidSize1_;
    /// <summary>
    /// 申报买入量
    /// </summary>
    public long BidSize1 {
      get { return bidSize1_; }
      set {
        bidSize1_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 18;
    private long volume_;
    /// <summary>
    /// 总成交量
    /// </summary>
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 19;
    private long turnover_;
    /// <summary>
    /// 成交金额
    /// </summary>
    public long Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgFutMD);
    }

    public bool Equals(PBMsgFutMD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EOF != other.EOF) return false;
      if (Symbol != other.Symbol) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (AskPrice1 != other.AskPrice1) return false;
      if (BidPrice1 != other.BidPrice1) return false;
      if (PreClosePrice != other.PreClosePrice) return false;
      if (PreSettlePrice != other.PreSettlePrice) return false;
      if (OpenPrice != other.OpenPrice) return false;
      if (HighPrice != other.HighPrice) return false;
      if (LowPrice != other.LowPrice) return false;
      if (MatchPrice != other.MatchPrice) return false;
      if (PriceChange != other.PriceChange) return false;
      if (SettlePrice != other.SettlePrice) return false;
      if (HighLimit != other.HighLimit) return false;
      if (LowLimit != other.LowLimit) return false;
      if (AskSize1 != other.AskSize1) return false;
      if (BidSize1 != other.BidSize1) return false;
      if (Volume != other.Volume) return false;
      if (Turnover != other.Turnover) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EOF != 0) hash ^= EOF.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TimeStamp.Length != 0) hash ^= TimeStamp.GetHashCode();
      if (AskPrice1 != 0L) hash ^= AskPrice1.GetHashCode();
      if (BidPrice1 != 0L) hash ^= BidPrice1.GetHashCode();
      if (PreClosePrice != 0L) hash ^= PreClosePrice.GetHashCode();
      if (PreSettlePrice != 0L) hash ^= PreSettlePrice.GetHashCode();
      if (OpenPrice != 0L) hash ^= OpenPrice.GetHashCode();
      if (HighPrice != 0L) hash ^= HighPrice.GetHashCode();
      if (LowPrice != 0L) hash ^= LowPrice.GetHashCode();
      if (MatchPrice != 0L) hash ^= MatchPrice.GetHashCode();
      if (PriceChange != 0L) hash ^= PriceChange.GetHashCode();
      if (SettlePrice != 0L) hash ^= SettlePrice.GetHashCode();
      if (HighLimit != 0L) hash ^= HighLimit.GetHashCode();
      if (LowLimit != 0L) hash ^= LowLimit.GetHashCode();
      if (AskSize1 != 0L) hash ^= AskSize1.GetHashCode();
      if (BidSize1 != 0L) hash ^= BidSize1.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0L) hash ^= Turnover.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EOF != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EOF);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Symbol);
      }
      if (TimeStamp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TimeStamp);
      }
      if (AskPrice1 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AskPrice1);
      }
      if (AskSize1 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(AskSize1);
      }
      if (BidPrice1 != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(BidPrice1);
      }
      if (BidSize1 != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BidSize1);
      }
      if (PreClosePrice != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(PreClosePrice);
      }
      if (PreSettlePrice != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(PreSettlePrice);
      }
      if (OpenPrice != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(OpenPrice);
      }
      if (HighPrice != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(HighPrice);
      }
      if (LowPrice != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(LowPrice);
      }
      if (MatchPrice != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MatchPrice);
      }
      if (PriceChange != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(PriceChange);
      }
      if (Volume != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(Turnover);
      }
      if (SettlePrice != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(SettlePrice);
      }
      if (HighLimit != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(HighLimit);
      }
      if (LowLimit != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(LowLimit);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EOF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EOF);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TimeStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStamp);
      }
      if (AskPrice1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AskPrice1);
      }
      if (BidPrice1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidPrice1);
      }
      if (PreClosePrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreClosePrice);
      }
      if (PreSettlePrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreSettlePrice);
      }
      if (OpenPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenPrice);
      }
      if (HighPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighPrice);
      }
      if (LowPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowPrice);
      }
      if (MatchPrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MatchPrice);
      }
      if (PriceChange != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PriceChange);
      }
      if (SettlePrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SettlePrice);
      }
      if (HighLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HighLimit);
      }
      if (LowLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LowLimit);
      }
      if (AskSize1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AskSize1);
      }
      if (BidSize1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidSize1);
      }
      if (Volume != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Turnover);
      }
      return size;
    }

    public void MergeFrom(PBMsgFutMD other) {
      if (other == null) {
        return;
      }
      if (other.EOF != 0) {
        EOF = other.EOF;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TimeStamp.Length != 0) {
        TimeStamp = other.TimeStamp;
      }
      if (other.AskPrice1 != 0L) {
        AskPrice1 = other.AskPrice1;
      }
      if (other.BidPrice1 != 0L) {
        BidPrice1 = other.BidPrice1;
      }
      if (other.PreClosePrice != 0L) {
        PreClosePrice = other.PreClosePrice;
      }
      if (other.PreSettlePrice != 0L) {
        PreSettlePrice = other.PreSettlePrice;
      }
      if (other.OpenPrice != 0L) {
        OpenPrice = other.OpenPrice;
      }
      if (other.HighPrice != 0L) {
        HighPrice = other.HighPrice;
      }
      if (other.LowPrice != 0L) {
        LowPrice = other.LowPrice;
      }
      if (other.MatchPrice != 0L) {
        MatchPrice = other.MatchPrice;
      }
      if (other.PriceChange != 0L) {
        PriceChange = other.PriceChange;
      }
      if (other.SettlePrice != 0L) {
        SettlePrice = other.SettlePrice;
      }
      if (other.HighLimit != 0L) {
        HighLimit = other.HighLimit;
      }
      if (other.LowLimit != 0L) {
        LowLimit = other.LowLimit;
      }
      if (other.AskSize1 != 0L) {
        AskSize1 = other.AskSize1;
      }
      if (other.BidSize1 != 0L) {
        BidSize1 = other.BidSize1;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0L) {
        Turnover = other.Turnover;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EOF = input.ReadInt32();
            break;
          }
          case 42: {
            Symbol = input.ReadString();
            break;
          }
          case 50: {
            TimeStamp = input.ReadString();
            break;
          }
          case 56: {
            AskPrice1 = input.ReadInt64();
            break;
          }
          case 64: {
            AskSize1 = input.ReadInt64();
            break;
          }
          case 72: {
            BidPrice1 = input.ReadInt64();
            break;
          }
          case 80: {
            BidSize1 = input.ReadInt64();
            break;
          }
          case 88: {
            PreClosePrice = input.ReadInt64();
            break;
          }
          case 96: {
            PreSettlePrice = input.ReadInt64();
            break;
          }
          case 104: {
            OpenPrice = input.ReadInt64();
            break;
          }
          case 112: {
            HighPrice = input.ReadInt64();
            break;
          }
          case 120: {
            LowPrice = input.ReadInt64();
            break;
          }
          case 128: {
            MatchPrice = input.ReadInt64();
            break;
          }
          case 136: {
            PriceChange = input.ReadInt64();
            break;
          }
          case 144: {
            Volume = input.ReadInt64();
            break;
          }
          case 152: {
            Turnover = input.ReadInt64();
            break;
          }
          case 160: {
            SettlePrice = input.ReadInt64();
            break;
          }
          case 168: {
            HighLimit = input.ReadInt64();
            break;
          }
          case 176: {
            LowLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMDAMD : pb::IMessage<PBMsgMDAMD> {
    private static readonly pb::MessageParser<PBMsgMDAMD> _parser = new pb::MessageParser<PBMsgMDAMD>(() => new PBMsgMDAMD());
    public static pb::MessageParser<PBMsgMDAMD> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMDA.PBMsgMDAReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMDAMD() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMDAMD(PBMsgMDAMD other) : this() {
      eOF_ = other.eOF_;
      requestSymbolList_ = other.requestSymbolList_.Clone();
      dataType_ = other.dataType_;
      symbol_ = other.symbol_;
      timeStamp_ = other.timeStamp_;
      preCloseValue_ = other.preCloseValue_;
      openValue_ = other.openValue_;
      turnover_ = other.turnover_;
      volume_ = other.volume_;
      highValue_ = other.highValue_;
      lowValue_ = other.lowValue_;
      latestIndex_ = other.latestIndex_;
      matchPrice_ = other.matchPrice_;
      askPrice5_ = other.askPrice5_;
      askSize5_ = other.askSize5_;
      askPrice4_ = other.askPrice4_;
      askSize4_ = other.askSize4_;
      askPrice3_ = other.askPrice3_;
      askSize3_ = other.askSize3_;
      askPrice2_ = other.askPrice2_;
      askSize2_ = other.askSize2_;
      askPrice1_ = other.askPrice1_;
      askSize1_ = other.askSize1_;
      bidPrice1_ = other.bidPrice1_;
      bidSize1_ = other.bidSize1_;
      bidPrice2_ = other.bidPrice2_;
      bidSize2_ = other.bidSize2_;
      bidPrice3_ = other.bidPrice3_;
      bidSize3_ = other.bidSize3_;
      bidPrice4_ = other.bidPrice4_;
      bidSize4_ = other.bidSize4_;
      bidPrice5_ = other.bidPrice5_;
      bidSize5_ = other.bidSize5_;
      preSettlePrice_ = other.preSettlePrice_;
      priceChange_ = other.priceChange_;
      settlePrice_ = other.settlePrice_;
      highLimit_ = other.highLimit_;
      lowLimit_ = other.lowLimit_;
    }

    public PBMsgMDAMD Clone() {
      return new PBMsgMDAMD(this);
    }

    /// <summary>Field number for the "EOF" field.</summary>
    public const int EOFFieldNumber = 1;
    private int eOF_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int EOF {
      get { return eOF_; }
      set {
        eOF_ = value;
      }
    }

    /// <summary>Field number for the "requestSymbolList" field.</summary>
    public const int RequestSymbolListFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_requestSymbolList_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> requestSymbolList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// MD Request Data
    /// 订阅行情代码列表
    /// </summary>
    public pbc::RepeatedField<string> RequestSymbolList {
      get { return requestSymbolList_; }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 6;
    private global::PBWrapMsgMDA.DataType dataType_ = 0;
    /// <summary>
    /// MD Common Data
    /// </summary>
    public global::PBWrapMsgMDA.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 7;
    private string symbol_ = "";
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 8;
    private string timeStamp_ = "";
    public string TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preCloseValue" field.</summary>
    public const int PreCloseValueFieldNumber = 9;
    private long preCloseValue_;
    public long PreCloseValue {
      get { return preCloseValue_; }
      set {
        preCloseValue_ = value;
      }
    }

    /// <summary>Field number for the "openValue" field.</summary>
    public const int OpenValueFieldNumber = 10;
    private long openValue_;
    public long OpenValue {
      get { return openValue_; }
      set {
        openValue_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 11;
    private long turnover_;
    public long Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 12;
    private long volume_;
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "highValue" field.</summary>
    public const int HighValueFieldNumber = 13;
    private long highValue_;
    public long HighValue {
      get { return highValue_; }
      set {
        highValue_ = value;
      }
    }

    /// <summary>Field number for the "lowValue" field.</summary>
    public const int LowValueFieldNumber = 14;
    private long lowValue_;
    public long LowValue {
      get { return lowValue_; }
      set {
        lowValue_ = value;
      }
    }

    /// <summary>Field number for the "latestIndex" field.</summary>
    public const int LatestIndexFieldNumber = 15;
    private long latestIndex_;
    /// <summary>
    /// Index Data
    /// ？暂时未用
    /// </summary>
    public long LatestIndex {
      get { return latestIndex_; }
      set {
        latestIndex_ = value;
      }
    }

    /// <summary>Field number for the "matchPrice" field.</summary>
    public const int MatchPriceFieldNumber = 16;
    private long matchPrice_;
    /// <summary>
    /// Equity Data
    /// </summary>
    public long MatchPrice {
      get { return matchPrice_; }
      set {
        matchPrice_ = value;
      }
    }

    /// <summary>Field number for the "askPrice5" field.</summary>
    public const int AskPrice5FieldNumber = 17;
    private long askPrice5_;
    public long AskPrice5 {
      get { return askPrice5_; }
      set {
        askPrice5_ = value;
      }
    }

    /// <summary>Field number for the "askSize5" field.</summary>
    public const int AskSize5FieldNumber = 18;
    private long askSize5_;
    public long AskSize5 {
      get { return askSize5_; }
      set {
        askSize5_ = value;
      }
    }

    /// <summary>Field number for the "askPrice4" field.</summary>
    public const int AskPrice4FieldNumber = 19;
    private long askPrice4_;
    public long AskPrice4 {
      get { return askPrice4_; }
      set {
        askPrice4_ = value;
      }
    }

    /// <summary>Field number for the "askSize4" field.</summary>
    public const int AskSize4FieldNumber = 20;
    private long askSize4_;
    public long AskSize4 {
      get { return askSize4_; }
      set {
        askSize4_ = value;
      }
    }

    /// <summary>Field number for the "askPrice3" field.</summary>
    public const int AskPrice3FieldNumber = 21;
    private long askPrice3_;
    public long AskPrice3 {
      get { return askPrice3_; }
      set {
        askPrice3_ = value;
      }
    }

    /// <summary>Field number for the "askSize3" field.</summary>
    public const int AskSize3FieldNumber = 22;
    private long askSize3_;
    public long AskSize3 {
      get { return askSize3_; }
      set {
        askSize3_ = value;
      }
    }

    /// <summary>Field number for the "askPrice2" field.</summary>
    public const int AskPrice2FieldNumber = 23;
    private long askPrice2_;
    public long AskPrice2 {
      get { return askPrice2_; }
      set {
        askPrice2_ = value;
      }
    }

    /// <summary>Field number for the "askSize2" field.</summary>
    public const int AskSize2FieldNumber = 24;
    private long askSize2_;
    public long AskSize2 {
      get { return askSize2_; }
      set {
        askSize2_ = value;
      }
    }

    /// <summary>Field number for the "askPrice1" field.</summary>
    public const int AskPrice1FieldNumber = 25;
    private long askPrice1_;
    public long AskPrice1 {
      get { return askPrice1_; }
      set {
        askPrice1_ = value;
      }
    }

    /// <summary>Field number for the "askSize1" field.</summary>
    public const int AskSize1FieldNumber = 26;
    private long askSize1_;
    public long AskSize1 {
      get { return askSize1_; }
      set {
        askSize1_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice1" field.</summary>
    public const int BidPrice1FieldNumber = 27;
    private long bidPrice1_;
    public long BidPrice1 {
      get { return bidPrice1_; }
      set {
        bidPrice1_ = value;
      }
    }

    /// <summary>Field number for the "bidSize1" field.</summary>
    public const int BidSize1FieldNumber = 28;
    private long bidSize1_;
    public long BidSize1 {
      get { return bidSize1_; }
      set {
        bidSize1_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice2" field.</summary>
    public const int BidPrice2FieldNumber = 29;
    private long bidPrice2_;
    public long BidPrice2 {
      get { return bidPrice2_; }
      set {
        bidPrice2_ = value;
      }
    }

    /// <summary>Field number for the "bidSize2" field.</summary>
    public const int BidSize2FieldNumber = 30;
    private long bidSize2_;
    public long BidSize2 {
      get { return bidSize2_; }
      set {
        bidSize2_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice3" field.</summary>
    public const int BidPrice3FieldNumber = 31;
    private long bidPrice3_;
    public long BidPrice3 {
      get { return bidPrice3_; }
      set {
        bidPrice3_ = value;
      }
    }

    /// <summary>Field number for the "bidSize3" field.</summary>
    public const int BidSize3FieldNumber = 32;
    private long bidSize3_;
    public long BidSize3 {
      get { return bidSize3_; }
      set {
        bidSize3_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice4" field.</summary>
    public const int BidPrice4FieldNumber = 33;
    private long bidPrice4_;
    public long BidPrice4 {
      get { return bidPrice4_; }
      set {
        bidPrice4_ = value;
      }
    }

    /// <summary>Field number for the "bidSize4" field.</summary>
    public const int BidSize4FieldNumber = 34;
    private long bidSize4_;
    public long BidSize4 {
      get { return bidSize4_; }
      set {
        bidSize4_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice5" field.</summary>
    public const int BidPrice5FieldNumber = 35;
    private long bidPrice5_;
    public long BidPrice5 {
      get { return bidPrice5_; }
      set {
        bidPrice5_ = value;
      }
    }

    /// <summary>Field number for the "bidSize5" field.</summary>
    public const int BidSize5FieldNumber = 36;
    private long bidSize5_;
    public long BidSize5 {
      get { return bidSize5_; }
      set {
        bidSize5_ = value;
      }
    }

    /// <summary>Field number for the "preSettlePrice" field.</summary>
    public const int PreSettlePriceFieldNumber = 37;
    private long preSettlePrice_;
    /// <summary>
    /// Index Data
    /// </summary>
    public long PreSettlePrice {
      get { return preSettlePrice_; }
      set {
        preSettlePrice_ = value;
      }
    }

    /// <summary>Field number for the "priceChange" field.</summary>
    public const int PriceChangeFieldNumber = 38;
    private long priceChange_;
    public long PriceChange {
      get { return priceChange_; }
      set {
        priceChange_ = value;
      }
    }

    /// <summary>Field number for the "settlePrice" field.</summary>
    public const int SettlePriceFieldNumber = 39;
    private long settlePrice_;
    public long SettlePrice {
      get { return settlePrice_; }
      set {
        settlePrice_ = value;
      }
    }

    /// <summary>Field number for the "highLimit" field.</summary>
    public const int HighLimitFieldNumber = 40;
    private long highLimit_;
    public long HighLimit {
      get { return highLimit_; }
      set {
        highLimit_ = value;
      }
    }

    /// <summary>Field number for the "lowLimit" field.</summary>
    public const int LowLimitFieldNumber = 41;
    private long lowLimit_;
    public long LowLimit {
      get { return lowLimit_; }
      set {
        lowLimit_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMDAMD);
    }

    public bool Equals(PBMsgMDAMD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EOF != other.EOF) return false;
      if(!requestSymbolList_.Equals(other.requestSymbolList_)) return false;
      if (DataType != other.DataType) return false;
      if (Symbol != other.Symbol) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (PreCloseValue != other.PreCloseValue) return false;
      if (OpenValue != other.OpenValue) return false;
      if (Turnover != other.Turnover) return false;
      if (Volume != other.Volume) return false;
      if (HighValue != other.HighValue) return false;
      if (LowValue != other.LowValue) return false;
      if (LatestIndex != other.LatestIndex) return false;
      if (MatchPrice != other.MatchPrice) return false;
      if (AskPrice5 != other.AskPrice5) return false;
      if (AskSize5 != other.AskSize5) return false;
      if (AskPrice4 != other.AskPrice4) return false;
      if (AskSize4 != other.AskSize4) return false;
      if (AskPrice3 != other.AskPrice3) return false;
      if (AskSize3 != other.AskSize3) return false;
      if (AskPrice2 != other.AskPrice2) return false;
      if (AskSize2 != other.AskSize2) return false;
      if (AskPrice1 != other.AskPrice1) return false;
      if (AskSize1 != other.AskSize1) return false;
      if (BidPrice1 != other.BidPrice1) return false;
      if (BidSize1 != other.BidSize1) return false;
      if (BidPrice2 != other.BidPrice2) return false;
      if (BidSize2 != other.BidSize2) return false;
      if (BidPrice3 != other.BidPrice3) return false;
      if (BidSize3 != other.BidSize3) return false;
      if (BidPrice4 != other.BidPrice4) return false;
      if (BidSize4 != other.BidSize4) return false;
      if (BidPrice5 != other.BidPrice5) return false;
      if (BidSize5 != other.BidSize5) return false;
      if (PreSettlePrice != other.PreSettlePrice) return false;
      if (PriceChange != other.PriceChange) return false;
      if (SettlePrice != other.SettlePrice) return false;
      if (HighLimit != other.HighLimit) return false;
      if (LowLimit != other.LowLimit) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EOF != 0) hash ^= EOF.GetHashCode();
      hash ^= requestSymbolList_.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TimeStamp.Length != 0) hash ^= TimeStamp.GetHashCode();
      if (PreCloseValue != 0L) hash ^= PreCloseValue.GetHashCode();
      if (OpenValue != 0L) hash ^= OpenValue.GetHashCode();
      if (Turnover != 0L) hash ^= Turnover.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (HighValue != 0L) hash ^= HighValue.GetHashCode();
      if (LowValue != 0L) hash ^= LowValue.GetHashCode();
      if (LatestIndex != 0L) hash ^= LatestIndex.GetHashCode();
      if (MatchPrice != 0L) hash ^= MatchPrice.GetHashCode();
      if (AskPrice5 != 0L) hash ^= AskPrice5.GetHashCode();
      if (AskSize5 != 0L) hash ^= AskSize5.GetHashCode();
      if (AskPrice4 != 0L) hash ^= AskPrice4.GetHashCode();
      if (AskSize4 != 0L) hash ^= AskSize4.GetHashCode();
      if (AskPrice3 != 0L) hash ^= AskPrice3.GetHashCode();
      if (AskSize3 != 0L) hash ^= AskSize3.GetHashCode();
      if (AskPrice2 != 0L) hash ^= AskPrice2.GetHashCode();
      if (AskSize2 != 0L) hash ^= AskSize2.GetHashCode();
      if (AskPrice1 != 0L) hash ^= AskPrice1.GetHashCode();
      if (AskSize1 != 0L) hash ^= AskSize1.GetHashCode();
      if (BidPrice1 != 0L) hash ^= BidPrice1.GetHashCode();
      if (BidSize1 != 0L) hash ^= BidSize1.GetHashCode();
      if (BidPrice2 != 0L) hash ^= BidPrice2.GetHashCode();
      if (BidSize2 != 0L) hash ^= BidSize2.GetHashCode();
      if (BidPrice3 != 0L) hash ^= BidPrice3.GetHashCode();
      if (BidSize3 != 0L) hash ^= BidSize3.GetHashCode();
      if (BidPrice4 != 0L) hash ^= BidPrice4.GetHashCode();
      if (BidSize4 != 0L) hash ^= BidSize4.GetHashCode();
      if (BidPrice5 != 0L) hash ^= BidPrice5.GetHashCode();
      if (BidSize5 != 0L) hash ^= BidSize5.GetHashCode();
      if (PreSettlePrice != 0L) hash ^= PreSettlePrice.GetHashCode();
      if (PriceChange != 0L) hash ^= PriceChange.GetHashCode();
      if (SettlePrice != 0L) hash ^= SettlePrice.GetHashCode();
      if (HighLimit != 0L) hash ^= HighLimit.GetHashCode();
      if (LowLimit != 0L) hash ^= LowLimit.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EOF != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EOF);
      }
      requestSymbolList_.WriteTo(output, _repeated_requestSymbolList_codec);
      if (DataType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DataType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Symbol);
      }
      if (TimeStamp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TimeStamp);
      }
      if (PreCloseValue != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PreCloseValue);
      }
      if (OpenValue != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(OpenValue);
      }
      if (Turnover != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Turnover);
      }
      if (Volume != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Volume);
      }
      if (HighValue != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(HighValue);
      }
      if (LowValue != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LowValue);
      }
      if (LatestIndex != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(LatestIndex);
      }
      if (MatchPrice != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MatchPrice);
      }
      if (AskPrice5 != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskPrice5);
      }
      if (AskSize5 != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(AskSize5);
      }
      if (AskPrice4 != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AskPrice4);
      }
      if (AskSize4 != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AskSize4);
      }
      if (AskPrice3 != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(AskPrice3);
      }
      if (AskSize3 != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(AskSize3);
      }
      if (AskPrice2 != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(AskPrice2);
      }
      if (AskSize2 != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(AskSize2);
      }
      if (AskPrice1 != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(AskPrice1);
      }
      if (AskSize1 != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(AskSize1);
      }
      if (BidPrice1 != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(BidPrice1);
      }
      if (BidSize1 != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(BidSize1);
      }
      if (BidPrice2 != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(BidPrice2);
      }
      if (BidSize2 != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(BidSize2);
      }
      if (BidPrice3 != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(BidPrice3);
      }
      if (BidSize3 != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(BidSize3);
      }
      if (BidPrice4 != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(BidPrice4);
      }
      if (BidSize4 != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(BidSize4);
      }
      if (BidPrice5 != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(BidPrice5);
      }
      if (BidSize5 != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(BidSize5);
      }
      if (PreSettlePrice != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(PreSettlePrice);
      }
      if (PriceChange != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(PriceChange);
      }
      if (SettlePrice != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(SettlePrice);
      }
      if (HighLimit != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(HighLimit);
      }
      if (LowLimit != 0L) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(LowLimit);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EOF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EOF);
      }
      size += requestSymbolList_.CalculateSize(_repeated_requestSymbolList_codec);
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TimeStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStamp);
      }
      if (PreCloseValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreCloseValue);
      }
      if (OpenValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenValue);
      }
      if (Turnover != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Turnover);
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (HighValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighValue);
      }
      if (LowValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowValue);
      }
      if (LatestIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestIndex);
      }
      if (MatchPrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MatchPrice);
      }
      if (AskPrice5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice5);
      }
      if (AskSize5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize5);
      }
      if (AskPrice4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice4);
      }
      if (AskSize4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize4);
      }
      if (AskPrice3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice3);
      }
      if (AskSize3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize3);
      }
      if (AskPrice2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice2);
      }
      if (AskSize2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize2);
      }
      if (AskPrice1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskPrice1);
      }
      if (AskSize1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskSize1);
      }
      if (BidPrice1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice1);
      }
      if (BidSize1 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize1);
      }
      if (BidPrice2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice2);
      }
      if (BidSize2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize2);
      }
      if (BidPrice3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice3);
      }
      if (BidSize3 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize3);
      }
      if (BidPrice4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice4);
      }
      if (BidSize4 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize4);
      }
      if (BidPrice5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidPrice5);
      }
      if (BidSize5 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidSize5);
      }
      if (PreSettlePrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PreSettlePrice);
      }
      if (PriceChange != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PriceChange);
      }
      if (SettlePrice != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SettlePrice);
      }
      if (HighLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HighLimit);
      }
      if (LowLimit != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LowLimit);
      }
      return size;
    }

    public void MergeFrom(PBMsgMDAMD other) {
      if (other == null) {
        return;
      }
      if (other.EOF != 0) {
        EOF = other.EOF;
      }
      requestSymbolList_.Add(other.requestSymbolList_);
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TimeStamp.Length != 0) {
        TimeStamp = other.TimeStamp;
      }
      if (other.PreCloseValue != 0L) {
        PreCloseValue = other.PreCloseValue;
      }
      if (other.OpenValue != 0L) {
        OpenValue = other.OpenValue;
      }
      if (other.Turnover != 0L) {
        Turnover = other.Turnover;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.HighValue != 0L) {
        HighValue = other.HighValue;
      }
      if (other.LowValue != 0L) {
        LowValue = other.LowValue;
      }
      if (other.LatestIndex != 0L) {
        LatestIndex = other.LatestIndex;
      }
      if (other.MatchPrice != 0L) {
        MatchPrice = other.MatchPrice;
      }
      if (other.AskPrice5 != 0L) {
        AskPrice5 = other.AskPrice5;
      }
      if (other.AskSize5 != 0L) {
        AskSize5 = other.AskSize5;
      }
      if (other.AskPrice4 != 0L) {
        AskPrice4 = other.AskPrice4;
      }
      if (other.AskSize4 != 0L) {
        AskSize4 = other.AskSize4;
      }
      if (other.AskPrice3 != 0L) {
        AskPrice3 = other.AskPrice3;
      }
      if (other.AskSize3 != 0L) {
        AskSize3 = other.AskSize3;
      }
      if (other.AskPrice2 != 0L) {
        AskPrice2 = other.AskPrice2;
      }
      if (other.AskSize2 != 0L) {
        AskSize2 = other.AskSize2;
      }
      if (other.AskPrice1 != 0L) {
        AskPrice1 = other.AskPrice1;
      }
      if (other.AskSize1 != 0L) {
        AskSize1 = other.AskSize1;
      }
      if (other.BidPrice1 != 0L) {
        BidPrice1 = other.BidPrice1;
      }
      if (other.BidSize1 != 0L) {
        BidSize1 = other.BidSize1;
      }
      if (other.BidPrice2 != 0L) {
        BidPrice2 = other.BidPrice2;
      }
      if (other.BidSize2 != 0L) {
        BidSize2 = other.BidSize2;
      }
      if (other.BidPrice3 != 0L) {
        BidPrice3 = other.BidPrice3;
      }
      if (other.BidSize3 != 0L) {
        BidSize3 = other.BidSize3;
      }
      if (other.BidPrice4 != 0L) {
        BidPrice4 = other.BidPrice4;
      }
      if (other.BidSize4 != 0L) {
        BidSize4 = other.BidSize4;
      }
      if (other.BidPrice5 != 0L) {
        BidPrice5 = other.BidPrice5;
      }
      if (other.BidSize5 != 0L) {
        BidSize5 = other.BidSize5;
      }
      if (other.PreSettlePrice != 0L) {
        PreSettlePrice = other.PreSettlePrice;
      }
      if (other.PriceChange != 0L) {
        PriceChange = other.PriceChange;
      }
      if (other.SettlePrice != 0L) {
        SettlePrice = other.SettlePrice;
      }
      if (other.HighLimit != 0L) {
        HighLimit = other.HighLimit;
      }
      if (other.LowLimit != 0L) {
        LowLimit = other.LowLimit;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EOF = input.ReadInt32();
            break;
          }
          case 42: {
            requestSymbolList_.AddEntriesFrom(input, _repeated_requestSymbolList_codec);
            break;
          }
          case 48: {
            dataType_ = (global::PBWrapMsgMDA.DataType) input.ReadEnum();
            break;
          }
          case 58: {
            Symbol = input.ReadString();
            break;
          }
          case 66: {
            TimeStamp = input.ReadString();
            break;
          }
          case 72: {
            PreCloseValue = input.ReadInt64();
            break;
          }
          case 80: {
            OpenValue = input.ReadInt64();
            break;
          }
          case 88: {
            Turnover = input.ReadInt64();
            break;
          }
          case 96: {
            Volume = input.ReadInt64();
            break;
          }
          case 104: {
            HighValue = input.ReadInt64();
            break;
          }
          case 112: {
            LowValue = input.ReadInt64();
            break;
          }
          case 120: {
            LatestIndex = input.ReadInt64();
            break;
          }
          case 128: {
            MatchPrice = input.ReadInt64();
            break;
          }
          case 136: {
            AskPrice5 = input.ReadInt64();
            break;
          }
          case 144: {
            AskSize5 = input.ReadInt64();
            break;
          }
          case 152: {
            AskPrice4 = input.ReadInt64();
            break;
          }
          case 160: {
            AskSize4 = input.ReadInt64();
            break;
          }
          case 168: {
            AskPrice3 = input.ReadInt64();
            break;
          }
          case 176: {
            AskSize3 = input.ReadInt64();
            break;
          }
          case 184: {
            AskPrice2 = input.ReadInt64();
            break;
          }
          case 192: {
            AskSize2 = input.ReadInt64();
            break;
          }
          case 200: {
            AskPrice1 = input.ReadInt64();
            break;
          }
          case 208: {
            AskSize1 = input.ReadInt64();
            break;
          }
          case 216: {
            BidPrice1 = input.ReadInt64();
            break;
          }
          case 224: {
            BidSize1 = input.ReadInt64();
            break;
          }
          case 232: {
            BidPrice2 = input.ReadInt64();
            break;
          }
          case 240: {
            BidSize2 = input.ReadInt64();
            break;
          }
          case 248: {
            BidPrice3 = input.ReadInt64();
            break;
          }
          case 256: {
            BidSize3 = input.ReadInt64();
            break;
          }
          case 264: {
            BidPrice4 = input.ReadInt64();
            break;
          }
          case 272: {
            BidSize4 = input.ReadInt64();
            break;
          }
          case 280: {
            BidPrice5 = input.ReadInt64();
            break;
          }
          case 288: {
            BidSize5 = input.ReadInt64();
            break;
          }
          case 296: {
            PreSettlePrice = input.ReadInt64();
            break;
          }
          case 304: {
            PriceChange = input.ReadInt64();
            break;
          }
          case 312: {
            SettlePrice = input.ReadInt64();
            break;
          }
          case 320: {
            HighLimit = input.ReadInt64();
            break;
          }
          case 328: {
            LowLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
