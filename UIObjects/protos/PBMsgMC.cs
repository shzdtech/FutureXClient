// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgMC.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBWrapMsgMC {

  /// <summary>Holder for reflection information generated from PBMsgMC.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PBMsgMCReflection {

    #region Descriptor
    /// <summary>File descriptor for PBMsgMC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBMsgMCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QQk1zZ01DLnByb3RvEgtQQldyYXBNc2dNQyJaCg5QQk1zZ01DQnJvQXV0",
            "aBISCgpicm9rZXJOYW1lGAEgASgJEhMKC2Rlc3RpbmF0aW9uGAIgASgJEg8K",
            "B2NoYW5uZWwYAyABKAkSDgoGSVBMaXN0GAQgAygJImUKDlBCTXNnTUNNc2dB",
            "dXRoEhEKCW1lc3NhZ2VJZBgBIAEoBRIYChBtZXNzYWdlQ2xhc3NOYW1lGAIg",
            "ASgJEg8KB3NlcnZpY2UYAyABKAkSFQoNc291cmNlU2VydmljZRgEIAEoCSLm",
            "AQoPUEJNc2dNQ0F1dGhMaXN0EhEKCW1lc3NhZ2VJZBgBIAEoBRIWCg5tZXNz",
            "YWdlU2VydmljZRgCIAEoCRIPCgdzZXJ2aWNlGAMgASgJEjAKC2Jyb0F1dGhM",
            "aXN0GAQgAygLMhsuUEJXcmFwTXNnTUMuUEJNc2dNQ0Jyb0F1dGgSMAoLbXNn",
            "QXV0aExpc3QYBSADKAsyGy5QQldyYXBNc2dNQy5QQk1zZ01DTXNnQXV0aBIz",
            "Cg5zcmNNc2dBdXRoTGlzdBgGIAMoCzIbLlBCV3JhcE1zZ01DLlBCTXNnTUNN",
            "c2dBdXRoIpgBCgtQQk1zZ01DRXhjaBIRCgltZXNzYWdlSWQYASABKAUSFgoO",
            "bWVzc2FnZVNlcnZpY2UYAiABKAkSDwoHc2VydmljZRgDIAEoCRItCgttZXNz",
            "YWdlVHlwZRgEIAEoDjIYLlBCV3JhcE1zZ01DLk1lc3NhZ2VUeXBlEg4KBnNv",
            "dXJjZRgFIAMoCRIOCgZzdGF0dXMYBiABKAkiawoPUEJNc2dNQ1N1cGVyQ21k",
            "EhEKCW1lc3NhZ2VJZBgBIAEoBRIWCg5tZXNzYWdlU2VydmljZRgCIAEoCRIt",
            "Cgtjb21tYW5kVHlwZRgDIAEoDjIYLlBCV3JhcE1zZ01DLkNvbW1hbmRUeXBl",
            "IicKCVBCTXNnUGFpchILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkiegoL",
            "UEJNc2dTaW1NYXASEQoJbWVzc2FnZUlkGAEgASgFEhYKDm1lc3NhZ2VTZXJ2",
            "aWNlGAIgASgJEgwKBG5hbWUYAyABKAkSJAoEbm9kZRgEIAMoCzIWLlBCV3Jh",
            "cE1zZ01DLlBCTXNnUGFpchIMCgRpbmZvGAUgASgJIs0CCgdEQlF1ZXJ5EhEK",
            "CW1lc3NhZ2VJZBgBIAEoBRIWCg5tZXNzYWdlU2VydmljZRgCIAEoCRIpCglx",
            "dWVyeVR5cGUYAyABKA4yFi5QQldyYXBNc2dNQy5RdWVyeVR5cGUSDAoEbmFt",
            "ZRgEIAEoCRISCgpjb25uZWN0aW9uGAUgASgJEgsKA1NRTBgGIAEoCRIRCglj",
            "b2x1bW5OdW0YByABKAUSIAoEcm93cxgIIAMoCzISLlBCV3JhcE1zZ01DLkRC",
            "Um93EicKCGRhdGFUeXBlGAkgASgOMhUuUEJXcmFwTXNnTUMuRGF0YVR5cGUS",
            "FgoOcGFyYW1ldGVyX25hbWUYCiADKAkSFwoPcGFyYW1ldGVyX3ZhbHVlGAsg",
            "AygJEhYKDnBhcmFtZXRlcl90eXBlGAwgAygJEhYKDnBhcmFtZXRlcl9zaXpl",
            "GA0gAygJIhgKBURCUm93Eg8KB2NvbHVtbnMYASADKAkqUQoLTWVzc2FnZVR5",
            "cGUSEQoNTVNHX1RZUEVfWkVSTxAAEgwKCFJFR0lTVEVSEAESDgoKSEVBUlRf",
            "QkVBVBACEhEKDVNUQVRVU19SRVBPUlQQAyo7CgtDb21tYW5kVHlwZRIRCg1D",
            "TURfVFlQRV9aRVJPEAASGQoVUkVMT0FEX0FVVEhFTlRJQ0FUSU9OEAEqVwoJ",
            "UXVlcnlUeXBlEg8KC1F1ZXJ5VHlwZV8wEAASCwoHUkVRVUVTVBABEgoKBlJF",
            "VFVSThACEhIKDlNUT1JFUFJPQ0VEVVJFEAMSDAoIUkVTRVJWRUQQBCoxCghE",
            "YXRhVHlwZRIOCgpEYXRhVHlwZV8wEAASCQoFSU1BR0UQARIKCgZVUERBVEUQ",
            "AkIeCg9Qcm90b0J1Zk1lc3NhZ2VCC1BCV3JhcE1zZ01DYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PBWrapMsgMC.MessageType), typeof(global::PBWrapMsgMC.CommandType), typeof(global::PBWrapMsgMC.QueryType), typeof(global::PBWrapMsgMC.DataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgMCBroAuth), global::PBWrapMsgMC.PBMsgMCBroAuth.Parser, new[]{ "BrokerName", "Destination", "Channel", "IPList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgMCMsgAuth), global::PBWrapMsgMC.PBMsgMCMsgAuth.Parser, new[]{ "MessageId", "MessageClassName", "Service", "SourceService" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgMCAuthList), global::PBWrapMsgMC.PBMsgMCAuthList.Parser, new[]{ "MessageId", "MessageService", "Service", "BroAuthList", "MsgAuthList", "SrcMsgAuthList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgMCExch), global::PBWrapMsgMC.PBMsgMCExch.Parser, new[]{ "MessageId", "MessageService", "Service", "MessageType", "Source", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgMCSuperCmd), global::PBWrapMsgMC.PBMsgMCSuperCmd.Parser, new[]{ "MessageId", "MessageService", "CommandType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgPair), global::PBWrapMsgMC.PBMsgPair.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.PBMsgSimMap), global::PBWrapMsgMC.PBMsgSimMap.Parser, new[]{ "MessageId", "MessageService", "Name", "Node", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.DBQuery), global::PBWrapMsgMC.DBQuery.Parser, new[]{ "MessageId", "MessageService", "QueryType", "Name", "Connection", "SQL", "ColumnNum", "Rows", "DataType", "ParameterName", "ParameterValue", "ParameterType", "ParameterSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBWrapMsgMC.DBRow), global::PBWrapMsgMC.DBRow.Parser, new[]{ "Columns" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MessageType {
    [pbr::OriginalName("MSG_TYPE_ZERO")] MsgTypeZero = 0,
    [pbr::OriginalName("REGISTER")] Register = 1,
    [pbr::OriginalName("HEART_BEAT")] HeartBeat = 2,
    [pbr::OriginalName("STATUS_REPORT")] StatusReport = 3,
  }

  public enum CommandType {
    [pbr::OriginalName("CMD_TYPE_ZERO")] CmdTypeZero = 0,
    [pbr::OriginalName("RELOAD_AUTHENTICATION")] ReloadAuthentication = 1,
  }

  public enum QueryType {
    [pbr::OriginalName("QueryType_0")] _0 = 0,
    [pbr::OriginalName("REQUEST")] Request = 1,
    [pbr::OriginalName("RETURN")] Return = 2,
    [pbr::OriginalName("STOREPROCEDURE")] Storeprocedure = 3,
    [pbr::OriginalName("RESERVED")] Reserved = 4,
  }

  public enum DataType {
    [pbr::OriginalName("DataType_0")] _0 = 0,
    [pbr::OriginalName("IMAGE")] Image = 1,
    [pbr::OriginalName("UPDATE")] Update = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCBroAuth : pb::IMessage<PBMsgMCBroAuth> {
    private static readonly pb::MessageParser<PBMsgMCBroAuth> _parser = new pb::MessageParser<PBMsgMCBroAuth>(() => new PBMsgMCBroAuth());
    public static pb::MessageParser<PBMsgMCBroAuth> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMCBroAuth() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMCBroAuth(PBMsgMCBroAuth other) : this() {
      brokerName_ = other.brokerName_;
      destination_ = other.destination_;
      channel_ = other.channel_;
      iPList_ = other.iPList_.Clone();
    }

    public PBMsgMCBroAuth Clone() {
      return new PBMsgMCBroAuth(this);
    }

    /// <summary>Field number for the "brokerName" field.</summary>
    public const int BrokerNameFieldNumber = 1;
    private string brokerName_ = "";
    public string BrokerName {
      get { return brokerName_; }
      set {
        brokerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 2;
    private string destination_ = "";
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IPList" field.</summary>
    public const int IPListFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_iPList_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> iPList_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> IPList {
      get { return iPList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMCBroAuth);
    }

    public bool Equals(PBMsgMCBroAuth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrokerName != other.BrokerName) return false;
      if (Destination != other.Destination) return false;
      if (Channel != other.Channel) return false;
      if(!iPList_.Equals(other.iPList_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BrokerName.Length != 0) hash ^= BrokerName.GetHashCode();
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      hash ^= iPList_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BrokerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BrokerName);
      }
      if (Destination.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Destination);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      iPList_.WriteTo(output, _repeated_iPList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BrokerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerName);
      }
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      size += iPList_.CalculateSize(_repeated_iPList_codec);
      return size;
    }

    public void MergeFrom(PBMsgMCBroAuth other) {
      if (other == null) {
        return;
      }
      if (other.BrokerName.Length != 0) {
        BrokerName = other.BrokerName;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      iPList_.Add(other.iPList_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BrokerName = input.ReadString();
            break;
          }
          case 18: {
            Destination = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 34: {
            iPList_.AddEntriesFrom(input, _repeated_iPList_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCMsgAuth : pb::IMessage<PBMsgMCMsgAuth> {
    private static readonly pb::MessageParser<PBMsgMCMsgAuth> _parser = new pb::MessageParser<PBMsgMCMsgAuth>(() => new PBMsgMCMsgAuth());
    public static pb::MessageParser<PBMsgMCMsgAuth> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMCMsgAuth() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMCMsgAuth(PBMsgMCMsgAuth other) : this() {
      messageId_ = other.messageId_;
      messageClassName_ = other.messageClassName_;
      service_ = other.service_;
      sourceService_ = other.sourceService_;
    }

    public PBMsgMCMsgAuth Clone() {
      return new PBMsgMCMsgAuth(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageClassName" field.</summary>
    public const int MessageClassNameFieldNumber = 2;
    private string messageClassName_ = "";
    public string MessageClassName {
      get { return messageClassName_; }
      set {
        messageClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private string service_ = "";
    /// <summary>
    /// this service stands for which service this message is used for
    /// </summary>
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sourceService" field.</summary>
    public const int SourceServiceFieldNumber = 4;
    private string sourceService_ = "";
    /// <summary>
    /// sourceService stands for which source this message is used in
    /// </summary>
    public string SourceService {
      get { return sourceService_; }
      set {
        sourceService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMCMsgAuth);
    }

    public bool Equals(PBMsgMCMsgAuth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageClassName != other.MessageClassName) return false;
      if (Service != other.Service) return false;
      if (SourceService != other.SourceService) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageClassName.Length != 0) hash ^= MessageClassName.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (SourceService.Length != 0) hash ^= SourceService.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageClassName);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Service);
      }
      if (SourceService.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceService);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageClassName);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (SourceService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceService);
      }
      return size;
    }

    public void MergeFrom(PBMsgMCMsgAuth other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageClassName.Length != 0) {
        MessageClassName = other.MessageClassName;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.SourceService.Length != 0) {
        SourceService = other.SourceService;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageClassName = input.ReadString();
            break;
          }
          case 26: {
            Service = input.ReadString();
            break;
          }
          case 34: {
            SourceService = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCAuthList : pb::IMessage<PBMsgMCAuthList> {
    private static readonly pb::MessageParser<PBMsgMCAuthList> _parser = new pb::MessageParser<PBMsgMCAuthList>(() => new PBMsgMCAuthList());
    public static pb::MessageParser<PBMsgMCAuthList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMCAuthList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMCAuthList(PBMsgMCAuthList other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
      service_ = other.service_;
      broAuthList_ = other.broAuthList_.Clone();
      msgAuthList_ = other.msgAuthList_.Clone();
      srcMsgAuthList_ = other.srcMsgAuthList_.Clone();
    }

    public PBMsgMCAuthList Clone() {
      return new PBMsgMCAuthList(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private string service_ = "";
    /// <summary>
    /// Message Body
    /// this service stands for which service this authentication message is for
    /// </summary>
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broAuthList" field.</summary>
    public const int BroAuthListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PBWrapMsgMC.PBMsgMCBroAuth> _repeated_broAuthList_codec
        = pb::FieldCodec.ForMessage(34, global::PBWrapMsgMC.PBMsgMCBroAuth.Parser);
    private readonly pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCBroAuth> broAuthList_ = new pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCBroAuth>();
    public pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCBroAuth> BroAuthList {
      get { return broAuthList_; }
    }

    /// <summary>Field number for the "msgAuthList" field.</summary>
    public const int MsgAuthListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PBWrapMsgMC.PBMsgMCMsgAuth> _repeated_msgAuthList_codec
        = pb::FieldCodec.ForMessage(42, global::PBWrapMsgMC.PBMsgMCMsgAuth.Parser);
    private readonly pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth> msgAuthList_ = new pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth>();
    /// <summary>
    /// msgAuthList is for Service-Message that needs validation on incoming and will send out
    /// </summary>
    public pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth> MsgAuthList {
      get { return msgAuthList_; }
    }

    /// <summary>Field number for the "srcMsgAuthList" field.</summary>
    public const int SrcMsgAuthListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PBWrapMsgMC.PBMsgMCMsgAuth> _repeated_srcMsgAuthList_codec
        = pb::FieldCodec.ForMessage(50, global::PBWrapMsgMC.PBMsgMCMsgAuth.Parser);
    private readonly pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth> srcMsgAuthList_ = new pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth>();
    /// <summary>
    /// srcMsgAuthList is for Source-Message that needs no validation on incoming and will NOT send out
    /// </summary>
    public pbc::RepeatedField<global::PBWrapMsgMC.PBMsgMCMsgAuth> SrcMsgAuthList {
      get { return srcMsgAuthList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMCAuthList);
    }

    public bool Equals(PBMsgMCAuthList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      if (Service != other.Service) return false;
      if(!broAuthList_.Equals(other.broAuthList_)) return false;
      if(!msgAuthList_.Equals(other.msgAuthList_)) return false;
      if(!srcMsgAuthList_.Equals(other.srcMsgAuthList_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      hash ^= broAuthList_.GetHashCode();
      hash ^= msgAuthList_.GetHashCode();
      hash ^= srcMsgAuthList_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Service);
      }
      broAuthList_.WriteTo(output, _repeated_broAuthList_codec);
      msgAuthList_.WriteTo(output, _repeated_msgAuthList_codec);
      srcMsgAuthList_.WriteTo(output, _repeated_srcMsgAuthList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      size += broAuthList_.CalculateSize(_repeated_broAuthList_codec);
      size += msgAuthList_.CalculateSize(_repeated_msgAuthList_codec);
      size += srcMsgAuthList_.CalculateSize(_repeated_srcMsgAuthList_codec);
      return size;
    }

    public void MergeFrom(PBMsgMCAuthList other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      broAuthList_.Add(other.broAuthList_);
      msgAuthList_.Add(other.msgAuthList_);
      srcMsgAuthList_.Add(other.srcMsgAuthList_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
          case 26: {
            Service = input.ReadString();
            break;
          }
          case 34: {
            broAuthList_.AddEntriesFrom(input, _repeated_broAuthList_codec);
            break;
          }
          case 42: {
            msgAuthList_.AddEntriesFrom(input, _repeated_msgAuthList_codec);
            break;
          }
          case 50: {
            srcMsgAuthList_.AddEntriesFrom(input, _repeated_srcMsgAuthList_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCExch : pb::IMessage<PBMsgMCExch> {
    private static readonly pb::MessageParser<PBMsgMCExch> _parser = new pb::MessageParser<PBMsgMCExch>(() => new PBMsgMCExch());
    public static pb::MessageParser<PBMsgMCExch> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMCExch() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMCExch(PBMsgMCExch other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
      service_ = other.service_;
      messageType_ = other.messageType_;
      source_ = other.source_.Clone();
      status_ = other.status_;
    }

    public PBMsgMCExch Clone() {
      return new PBMsgMCExch(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private string service_ = "";
    /// <summary>
    /// Message Body
    /// service here stands for which service this message is from
    /// </summary>
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 4;
    private global::PBWrapMsgMC.MessageType messageType_ = 0;
    public global::PBWrapMsgMC.MessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_source_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> source_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Source {
      get { return source_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMCExch);
    }

    public bool Equals(PBMsgMCExch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      if (Service != other.Service) return false;
      if (MessageType != other.MessageType) return false;
      if(!source_.Equals(other.source_)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (MessageType != 0) hash ^= MessageType.GetHashCode();
      hash ^= source_.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Service);
      }
      if (MessageType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MessageType);
      }
      source_.WriteTo(output, _repeated_source_codec);
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (MessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      size += source_.CalculateSize(_repeated_source_codec);
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      return size;
    }

    public void MergeFrom(PBMsgMCExch other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.MessageType != 0) {
        MessageType = other.MessageType;
      }
      source_.Add(other.source_);
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
          case 26: {
            Service = input.ReadString();
            break;
          }
          case 32: {
            messageType_ = (global::PBWrapMsgMC.MessageType) input.ReadEnum();
            break;
          }
          case 42: {
            source_.AddEntriesFrom(input, _repeated_source_codec);
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCSuperCmd : pb::IMessage<PBMsgMCSuperCmd> {
    private static readonly pb::MessageParser<PBMsgMCSuperCmd> _parser = new pb::MessageParser<PBMsgMCSuperCmd>(() => new PBMsgMCSuperCmd());
    public static pb::MessageParser<PBMsgMCSuperCmd> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgMCSuperCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgMCSuperCmd(PBMsgMCSuperCmd other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
      commandType_ = other.commandType_;
    }

    public PBMsgMCSuperCmd Clone() {
      return new PBMsgMCSuperCmd(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commandType" field.</summary>
    public const int CommandTypeFieldNumber = 3;
    private global::PBWrapMsgMC.CommandType commandType_ = 0;
    /// <summary>
    /// Message Body
    /// </summary>
    public global::PBWrapMsgMC.CommandType CommandType {
      get { return commandType_; }
      set {
        commandType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgMCSuperCmd);
    }

    public bool Equals(PBMsgMCSuperCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      if (CommandType != other.CommandType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      if (CommandType != 0) hash ^= CommandType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
      if (CommandType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CommandType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      if (CommandType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandType);
      }
      return size;
    }

    public void MergeFrom(PBMsgMCSuperCmd other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
      if (other.CommandType != 0) {
        CommandType = other.CommandType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
          case 24: {
            commandType_ = (global::PBWrapMsgMC.CommandType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgPair : pb::IMessage<PBMsgPair> {
    private static readonly pb::MessageParser<PBMsgPair> _parser = new pb::MessageParser<PBMsgPair>(() => new PBMsgPair());
    public static pb::MessageParser<PBMsgPair> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgPair(PBMsgPair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    public PBMsgPair Clone() {
      return new PBMsgPair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgPair);
    }

    public bool Equals(PBMsgPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    public void MergeFrom(PBMsgPair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgSimMap : pb::IMessage<PBMsgSimMap> {
    private static readonly pb::MessageParser<PBMsgSimMap> _parser = new pb::MessageParser<PBMsgSimMap>(() => new PBMsgSimMap());
    public static pb::MessageParser<PBMsgSimMap> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBMsgSimMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBMsgSimMap(PBMsgSimMap other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
      name_ = other.name_;
      node_ = other.node_.Clone();
      info_ = other.info_;
    }

    public PBMsgSimMap Clone() {
      return new PBMsgSimMap(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    /// <summary>
    /// algo name
    /// </summary>
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// command name
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PBWrapMsgMC.PBMsgPair> _repeated_node_codec
        = pb::FieldCodec.ForMessage(34, global::PBWrapMsgMC.PBMsgPair.Parser);
    private readonly pbc::RepeatedField<global::PBWrapMsgMC.PBMsgPair> node_ = new pbc::RepeatedField<global::PBWrapMsgMC.PBMsgPair>();
    public pbc::RepeatedField<global::PBWrapMsgMC.PBMsgPair> Node {
      get { return node_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 5;
    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBMsgSimMap);
    }

    public bool Equals(PBMsgSimMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      if (Name != other.Name) return false;
      if(!node_.Equals(other.node_)) return false;
      if (Info != other.Info) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= node_.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      node_.WriteTo(output, _repeated_node_codec);
      if (Info.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += node_.CalculateSize(_repeated_node_codec);
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(PBMsgSimMap other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      node_.Add(other.node_);
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            node_.AddEntriesFrom(input, _repeated_node_codec);
            break;
          }
          case 42: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DBQuery : pb::IMessage<DBQuery> {
    private static readonly pb::MessageParser<DBQuery> _parser = new pb::MessageParser<DBQuery>(() => new DBQuery());
    public static pb::MessageParser<DBQuery> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DBQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DBQuery(DBQuery other) : this() {
      messageId_ = other.messageId_;
      messageService_ = other.messageService_;
      queryType_ = other.queryType_;
      name_ = other.name_;
      connection_ = other.connection_;
      sQL_ = other.sQL_;
      columnNum_ = other.columnNum_;
      rows_ = other.rows_.Clone();
      dataType_ = other.dataType_;
      parameterName_ = other.parameterName_.Clone();
      parameterValue_ = other.parameterValue_.Clone();
      parameterType_ = other.parameterType_.Clone();
      parameterSize_ = other.parameterSize_.Clone();
    }

    public DBQuery Clone() {
      return new DBQuery(this);
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    /// <summary>
    /// Message Header
    /// </summary>
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "messageService" field.</summary>
    public const int MessageServiceFieldNumber = 2;
    private string messageService_ = "";
    public string MessageService {
      get { return messageService_; }
      set {
        messageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queryType" field.</summary>
    public const int QueryTypeFieldNumber = 3;
    private global::PBWrapMsgMC.QueryType queryType_ = 0;
    /// <summary>
    /// own
    /// </summary>
    public global::PBWrapMsgMC.QueryType QueryType {
      get { return queryType_; }
      set {
        queryType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 5;
    private string connection_ = "";
    public string Connection {
      get { return connection_; }
      set {
        connection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SQL" field.</summary>
    public const int SQLFieldNumber = 6;
    private string sQL_ = "";
    /// <summary>
    /// SQL or store procedure name
    /// </summary>
    public string SQL {
      get { return sQL_; }
      set {
        sQL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnNum" field.</summary>
    public const int ColumnNumFieldNumber = 7;
    private int columnNum_;
    public int ColumnNum {
      get { return columnNum_; }
      set {
        columnNum_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PBWrapMsgMC.DBRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(66, global::PBWrapMsgMC.DBRow.Parser);
    private readonly pbc::RepeatedField<global::PBWrapMsgMC.DBRow> rows_ = new pbc::RepeatedField<global::PBWrapMsgMC.DBRow>();
    public pbc::RepeatedField<global::PBWrapMsgMC.DBRow> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 9;
    private global::PBWrapMsgMC.DataType dataType_ = 0;
    public global::PBWrapMsgMC.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "parameter_name" field.</summary>
    public const int ParameterNameFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_parameterName_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> parameterName_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// store procedure
    /// </summary>
    public pbc::RepeatedField<string> ParameterName {
      get { return parameterName_; }
    }

    /// <summary>Field number for the "parameter_value" field.</summary>
    public const int ParameterValueFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_parameterValue_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> parameterValue_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ParameterValue {
      get { return parameterValue_; }
    }

    /// <summary>Field number for the "parameter_type" field.</summary>
    public const int ParameterTypeFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_parameterType_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> parameterType_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ParameterType {
      get { return parameterType_; }
    }

    /// <summary>Field number for the "parameter_size" field.</summary>
    public const int ParameterSizeFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_parameterSize_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> parameterSize_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ParameterSize {
      get { return parameterSize_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DBQuery);
    }

    public bool Equals(DBQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (MessageService != other.MessageService) return false;
      if (QueryType != other.QueryType) return false;
      if (Name != other.Name) return false;
      if (Connection != other.Connection) return false;
      if (SQL != other.SQL) return false;
      if (ColumnNum != other.ColumnNum) return false;
      if(!rows_.Equals(other.rows_)) return false;
      if (DataType != other.DataType) return false;
      if(!parameterName_.Equals(other.parameterName_)) return false;
      if(!parameterValue_.Equals(other.parameterValue_)) return false;
      if(!parameterType_.Equals(other.parameterType_)) return false;
      if(!parameterSize_.Equals(other.parameterSize_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (MessageService.Length != 0) hash ^= MessageService.GetHashCode();
      if (QueryType != 0) hash ^= QueryType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Connection.Length != 0) hash ^= Connection.GetHashCode();
      if (SQL.Length != 0) hash ^= SQL.GetHashCode();
      if (ColumnNum != 0) hash ^= ColumnNum.GetHashCode();
      hash ^= rows_.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      hash ^= parameterName_.GetHashCode();
      hash ^= parameterValue_.GetHashCode();
      hash ^= parameterType_.GetHashCode();
      hash ^= parameterSize_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (MessageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageService);
      }
      if (QueryType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) QueryType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Connection.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Connection);
      }
      if (SQL.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SQL);
      }
      if (ColumnNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ColumnNum);
      }
      rows_.WriteTo(output, _repeated_rows_codec);
      if (DataType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) DataType);
      }
      parameterName_.WriteTo(output, _repeated_parameterName_codec);
      parameterValue_.WriteTo(output, _repeated_parameterValue_codec);
      parameterType_.WriteTo(output, _repeated_parameterType_codec);
      parameterSize_.WriteTo(output, _repeated_parameterSize_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (MessageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageService);
      }
      if (QueryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QueryType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Connection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connection);
      }
      if (SQL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SQL);
      }
      if (ColumnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnNum);
      }
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      size += parameterName_.CalculateSize(_repeated_parameterName_codec);
      size += parameterValue_.CalculateSize(_repeated_parameterValue_codec);
      size += parameterType_.CalculateSize(_repeated_parameterType_codec);
      size += parameterSize_.CalculateSize(_repeated_parameterSize_codec);
      return size;
    }

    public void MergeFrom(DBQuery other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.MessageService.Length != 0) {
        MessageService = other.MessageService;
      }
      if (other.QueryType != 0) {
        QueryType = other.QueryType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Connection.Length != 0) {
        Connection = other.Connection;
      }
      if (other.SQL.Length != 0) {
        SQL = other.SQL;
      }
      if (other.ColumnNum != 0) {
        ColumnNum = other.ColumnNum;
      }
      rows_.Add(other.rows_);
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      parameterName_.Add(other.parameterName_);
      parameterValue_.Add(other.parameterValue_);
      parameterType_.Add(other.parameterType_);
      parameterSize_.Add(other.parameterSize_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageService = input.ReadString();
            break;
          }
          case 24: {
            queryType_ = (global::PBWrapMsgMC.QueryType) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Connection = input.ReadString();
            break;
          }
          case 50: {
            SQL = input.ReadString();
            break;
          }
          case 56: {
            ColumnNum = input.ReadInt32();
            break;
          }
          case 66: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
          case 72: {
            dataType_ = (global::PBWrapMsgMC.DataType) input.ReadEnum();
            break;
          }
          case 82: {
            parameterName_.AddEntriesFrom(input, _repeated_parameterName_codec);
            break;
          }
          case 90: {
            parameterValue_.AddEntriesFrom(input, _repeated_parameterValue_codec);
            break;
          }
          case 98: {
            parameterType_.AddEntriesFrom(input, _repeated_parameterType_codec);
            break;
          }
          case 106: {
            parameterSize_.AddEntriesFrom(input, _repeated_parameterSize_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DBRow : pb::IMessage<DBRow> {
    private static readonly pb::MessageParser<DBRow> _parser = new pb::MessageParser<DBRow>(() => new DBRow());
    public static pb::MessageParser<DBRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.PBMsgMCReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DBRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DBRow(DBRow other) : this() {
      columns_ = other.columns_.Clone();
    }

    public DBRow Clone() {
      return new DBRow(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DBRow);
    }

    public bool Equals(DBRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      return size;
    }

    public void MergeFrom(DBRow other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
