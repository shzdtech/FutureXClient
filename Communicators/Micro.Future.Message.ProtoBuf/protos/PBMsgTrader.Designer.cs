// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PBMsgTrader {
  
  namespace Generated {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class PBMsgTrader {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgError__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgError, global::PBMsgTrader.PBMsgError.Builder> internal__static_PBMsgTrader_PBMsgError__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgLoginReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLoginReq, global::PBMsgTrader.PBMsgLoginReq.Builder> internal__static_PBMsgTrader_PBMsgLoginReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgLoginRsp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLoginRsp, global::PBMsgTrader.PBMsgLoginRsp.Builder> internal__static_PBMsgTrader_PBMsgLoginRsp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgLogout__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLogout, global::PBMsgTrader.PBMsgLogout.Builder> internal__static_PBMsgTrader_PBMsgLogout__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqMarketInfo, global::PBMsgTrader.PBMsgQueryReqMarketInfo.Builder> internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspMarketInfo, global::PBMsgTrader.PBMsgQueryRspMarketInfo.Builder> internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqInstrumentInfo, global::PBMsgTrader.PBMsgQueryReqInstrumentInfo.Builder> internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspInstrumentInfo, global::PBMsgTrader.PBMsgQueryRspInstrumentInfo.Builder> internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqOrder__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqOrder, global::PBMsgTrader.PBMsgQueryReqOrder.Builder> internal__static_PBMsgTrader_PBMsgQueryReqOrder__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqTrade__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqTrade, global::PBMsgTrader.PBMsgQueryReqTrade.Builder> internal__static_PBMsgTrader_PBMsgQueryReqTrade__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqPosition__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqPosition, global::PBMsgTrader.PBMsgQueryReqPosition.Builder> internal__static_PBMsgTrader_PBMsgQueryReqPosition__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryRspPosition__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspPosition, global::PBMsgTrader.PBMsgQueryRspPosition.Builder> internal__static_PBMsgTrader_PBMsgQueryRspPosition__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryReqFund__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqFund, global::PBMsgTrader.PBMsgQueryReqFund.Builder> internal__static_PBMsgTrader_PBMsgQueryReqFund__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgQueryRspFund__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspFund, global::PBMsgTrader.PBMsgQueryRspFund.Builder> internal__static_PBMsgTrader_PBMsgQueryRspFund__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgOrderInsert__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderInsert, global::PBMsgTrader.PBMsgOrderInsert.Builder> internal__static_PBMsgTrader_PBMsgOrderInsert__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgOrderAction__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderAction, global::PBMsgTrader.PBMsgOrderAction.Builder> internal__static_PBMsgTrader_PBMsgOrderAction__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgOrderRtn__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderRtn, global::PBMsgTrader.PBMsgOrderRtn.Builder> internal__static_PBMsgTrader_PBMsgOrderRtn__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgTradeRtn__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgTradeRtn, global::PBMsgTrader.PBMsgTradeRtn.Builder> internal__static_PBMsgTrader_PBMsgTradeRtn__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgSettlementInfoConfirm, global::PBMsgTrader.PBMsgSettlementInfoConfirm.Builder> internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgReqConnect__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgReqConnect, global::PBMsgTrader.PBMsgReqConnect.Builder> internal__static_PBMsgTrader_PBMsgReqConnect__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBMsgTrader_PBMsgRspConnect__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgRspConnect, global::PBMsgTrader.PBMsgRspConnect.Builder> internal__static_PBMsgTrader_PBMsgRspConnect__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static PBMsgTrader() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFQQk1zZ1RyYWRlci5wcm90bxILUEJNc2dUcmFkZXIiLwoKUEJNc2dFcnJv" + 
            "chIPCgdFcnJvcklEGAIgASgFEhAKCEVycm9yTXNnGAMgASgMIuoBCg1QQk1z" + 
            "Z0xvZ2luUmVxEhIKClRyYWRpbmdEYXkYAiABKAkSEAoIQnJva2VySUQYAyAB" + 
            "KAkSDgoGVXNlcklEGAQgASgJEhAKCFBhc3N3b3JkGAUgASgJEhcKD1VzZXJQ" + 
            "cm9kdWN0SW5mbxgGIAEoCRIcChRJbnRlcmZhY2VQcm9kdWN0SW5mbxgHIAEo" + 
            "CRIUCgxQcm90b2NvbEluZm8YCCABKAkSEgoKTWFjQWRkcmVzcxgJIAEoCRIX" + 
            "Cg9PbmVUaW1lUGFzc3dvcmQYCiABKAkSFwoPQ2xpZW50SVBBZGRyZXNzGAsg" + 
            "ASgJIuwBCg1QQk1zZ0xvZ2luUnNwEhIKClRyYWRpbmdEYXkYAiABKAkSEQoJ" + 
            "TG9naW5UaW1lGAMgASgJEhAKCEJyb2tlcklEGAQgASgJEg4KBlVzZXJJRBgF" + 
            "IAEoCRISCgpTeXN0ZW1OYW1lGAYgASgJEg8KB0Zyb250SUQYByABKAUSEQoJ" + 
            "U2Vzc2lvbklEGAggASgFEhMKC01heE9yZGVyUmVmGAkgASgJEhAKCFNIRkVU" + 
            "aW1lGAogASgJEg8KB0RDRVRpbWUYCyABKAkSEAoIQ1pDRVRpbWUYDCABKAkS" + 
            "EAoIRkZFWFRpbWUYDSABKAkiLwoLUEJNc2dMb2dvdXQSEAoIQnJva2VySUQY" + 
            "AiABKAkSDgoGVXNlcklEGAMgASgJIi0KF1BCTXNnUXVlcnlSZXFNYXJrZXRJ" + 
            "bmZvEhIKCkV4Y2hhbmdlSUQYAiABKAkiagoXUEJNc2dRdWVyeVJzcE1hcmtl" + 
            "dEluZm8SCwoDRU9GGAEgASgFEhIKCkV4Y2hhbmdlSUQYAiABKAkSFAoMRXhj" + 
            "aGFuZ2VOYW1lGAMgASgMEhgKEEV4Y2hhbmdlUHJvcGVydHkYBCABKAkicgob" + 
            "UEJNc2dRdWVyeVJlcUluc3RydW1lbnRJbmZvEhQKDEluc3RydW1lbnRJRBgC" + 
            "IAEoCRISCgpFeGNoYW5nZUlEGAMgASgJEhYKDkV4Y2hhbmdlSW5zdElEGAQg" + 
            "ASgJEhEKCVByb2R1Y3RJRBgFIAEoCSKQBQobUEJNc2dRdWVyeVJzcEluc3Ry" + 
            "dW1lbnRJbmZvEgsKA0VPRhgBIAEoBRIUCgxJbnN0cnVtZW50SUQYAiABKAkS" + 
            "EgoKRXhjaGFuZ2VJRBgDIAEoCRIWCg5JbnN0cnVtZW50TmFtZRgEIAEoDBIW" + 
            "Cg5FeGNoYW5nZUluc3RJRBgFIAEoCRIRCglQcm9kdWN0SUQYBiABKAkSFAoM" + 
            "UHJvZHVjdENsYXNzGAcgASgMEhQKDERlbGl2ZXJ5WWVhchgIIAEoBRIVCg1E" + 
            "ZWxpdmVyeU1vbnRoGAkgASgFEhwKFE1heE1hcmtldE9yZGVyVm9sdW1lGAog" + 
            "ASgFEhwKFE1pbk1hcmtldE9yZGVyVm9sdW1lGAsgASgFEhsKE01heExpbWl0" + 
            "T3JkZXJWb2x1bWUYDCABKAUSGwoTTWluTGltaXRPcmRlclZvbHVtZRgNIAEo" + 
            "BRIWCg5Wb2x1bWVNdWx0aXBsZRgOIAEoBRIRCglQcmljZVRpY2sYDyABKAUS" + 
            "EgoKQ3JlYXRlRGF0ZRgQIAEoCRIQCghPcGVuRGF0ZRgRIAEoCRISCgpFeHBp" + 
            "cmVEYXRlGBIgASgJEhYKDlN0YXJ0RGVsaXZEYXRlGBMgASgJEhQKDEVuZERl" + 
            "bGl2RGF0ZRgUIAEoCRIVCg1JbnN0TGlmZVBoYXNlGBUgASgJEhEKCUlzVHJh" + 
            "ZGluZxgWIAEoBRIUCgxQb3NpdGlvblR5cGUYFyABKAkSGAoQUG9zaXRpb25E" + 
            "YXRlVHlwZRgYIAEoCRIXCg9Mb25nTWFyZ2luUmF0aW8YGSABKAESGAoQU2hv" + 
            "cnRNYXJnaW5SYXRpbxgaIAEoARIeChZNYXhNYXJnaW5TaWRlQWxnb3JpdGht" + 
            "GBsgASgJItIBChJQQk1zZ1F1ZXJ5UmVxT3JkZXISEAoIQnJva2VySUQYAiAB" + 
            "KAkSEgoKSW52ZXN0b3JJRBgDIAEoCRIUCgxJbnN0cnVtZW50SUQYBCABKAkS" + 
            "EgoKRXhjaGFuZ2VJRBgFIAEoCRISCgpPcmRlclN5c0lEGAYgASgJEhcKD0lu" + 
            "c2VydFRpbWVTdGFydBgHIAEoCRIVCg1JbnNlcnRUaW1lRW5kGAggASgJEhIK" + 
            "ClRyYWRpbmdEYXkYCSABKAkSFAoMU2V0dGxlbWVudElEGAogASgFIqMBChJQ" + 
            "Qk1zZ1F1ZXJ5UmVxVHJhZGUSEAoIQnJva2VySUQYAiABKAkSEgoKSW52ZXN0" + 
            "b3JJRBgDIAEoCRIUCgxJbnN0cnVtZW50SUQYBCABKAkSEgoKRXhjaGFuZ2VJ" + 
            "RBgFIAEoCRIPCgdUcmFkZUlEGAYgASgJEhYKDlRyYWRlVGltZVN0YXJ0GAcg" + 
            "ASgJEhQKDFRyYWRlVGltZUVuZBgIIAEoCSJTChVQQk1zZ1F1ZXJ5UmVxUG9z" + 
            "aXRpb24SEAoIQnJva2VySUQYAiABKAkSEgoKSW52ZXN0b3JJRBgDIAEoCRIU" + 
            "CgxJbnN0cnVtZW50SUQYBCABKAkinAcKFVBCTXNnUXVlcnlSc3BQb3NpdGlv" + 
            "bhILCgNFT0YYASABKAUSFAoMSW5zdHJ1bWVudElEGAIgASgJEhAKCEJyb2tl" + 
            "cklEGAMgASgJEhIKCkludmVzdG9ySUQYBCABKAkSFQoNUG9zaURpcmVjdGlv" + 
            "bhgFIAEoCRIRCglIZWRnZUZsYWcYBiABKAkSFAoMUG9zaXRpb25EYXRlGAcg" + 
            "ASgJEhIKCllkUG9zaXRpb24YCCABKAUSEAoIUG9zaXRpb24YCSABKAUSEgoK" + 
            "TG9uZ0Zyb3plbhgKIAEoBRITCgtTaG9ydEZyb3plbhgLIAEoBRIYChBMb25n" + 
            "RnJvemVuQW1vdW50GAwgASgBEhkKEVNob3J0RnJvemVuQW1vdW50GA0gASgB" + 
            "EhIKCk9wZW5Wb2x1bWUYDiABKAUSEwoLQ2xvc2VWb2x1bWUYDyABKAUSEgoK" + 
            "T3BlbkFtb3VudBgQIAEoARITCgtDbG9zZUFtb3VudBgRIAEoARIUCgxQb3Np" + 
            "dGlvbkNvc3QYEiABKAESEQoJUHJlTWFyZ2luGBMgASgBEhEKCVVzZU1hcmdp" + 
            "bhgUIAEoARIUCgxGcm96ZW5NYXJnaW4YFSABKAESEgoKRnJvemVuQ2FzaBgW" + 
            "IAEoARIYChBGcm96ZW5Db21taXNzaW9uGBcgASgBEg4KBkNhc2hJbhgYIAEo" + 
            "ARISCgpDb21taXNzaW9uGBkgASgBEhMKC0Nsb3NlUHJvZml0GBogASgBEhYK" + 
            "DlBvc2l0aW9uUHJvZml0GBsgASgBEhoKElByZVNldHRsZW1lbnRQcmljZRgc" + 
            "IAEoARIXCg9TZXR0bGVtZW50UHJpY2UYHSABKAESEgoKVHJhZGluZ0RheRge" + 
            "IAEoCRIUCgxTZXR0bGVtZW50SUQYHyABKAUSEAoIT3BlbkNvc3QYICABKAES" + 
            "FgoORXhjaGFuZ2VNYXJnaW4YISABKAESFAoMQ29tYlBvc2l0aW9uGCIgASgF" + 
            "EhYKDkNvbWJMb25nRnJvemVuGCMgASgFEhcKD0NvbWJTaG9ydEZyb3plbhgk" + 
            "IAEoBRIZChFDbG9zZVByb2ZpdEJ5RGF0ZRglIAEoARIaChJDbG9zZVByb2Zp" + 
            "dEJ5VHJhZGUYJiABKAESFQoNVG9kYXlQb3NpdGlvbhgnIAEoBRIZChFNYXJn" + 
            "aW5SYXRlQnlNb25leRgoIAEoARIaChJNYXJnaW5SYXRlQnlWb2x1bWUYKSAB" + 
            "KAEiOQoRUEJNc2dRdWVyeVJlcUZ1bmQSEAoIQnJva2VySUQYAiABKAkSEgoK" + 
            "SW52ZXN0b3JJRBgDIAEoCSKcBQoRUEJNc2dRdWVyeVJzcEZ1bmQSCwoDRU9G" + 
            "GAEgASgFEhAKCEJyb2tlcklEGAIgASgJEhEKCUFjY291bnRJRBgDIAEoCRIT" + 
            "CgtQcmVNb3J0Z2FnZRgEIAEoARIRCglQcmVDcmVkaXQYBSABKAESEgoKUHJl" + 
            "RGVwb3NpdBgGIAEoARISCgpQcmVCYWxhbmNlGAcgASgBEhEKCVByZU1hcmdp" + 
            "bhgIIAEoARIUCgxJbnRlcmVzdEJhc2UYCSABKAESEAoISW50ZXJlc3QYCiAB" + 
            "KAESDwoHRGVwb3NpdBgLIAEoARIQCghXaXRoZHJhdxgMIAEoARIUCgxGcm96" + 
            "ZW5NYXJnaW4YDSABKAESEgoKRnJvemVuQ2FzaBgOIAEoARIYChBGcm96ZW5D" + 
            "b21taXNzaW9uGA8gASgBEhIKCkN1cnJNYXJnaW4YECABKAESDgoGQ2FzaElu" + 
            "GBEgASgBEhIKCkNvbW1pc3Npb24YEiABKAESEwoLQ2xvc2VQcm9maXQYEyAB" + 
            "KAESFgoOUG9zaXRpb25Qcm9maXQYFCABKAESDwoHQmFsYW5jZRgVIAEoARIR" + 
            "CglBdmFpbGFibGUYFiABKAESFQoNV2l0aGRyYXdRdW90YRgXIAEoARIPCgdS" + 
            "ZXNlcnZlGBggASgBEhIKClRyYWRpbmdEYXkYGSABKAkSFAoMU2V0dGxlbWVu" + 
            "dElEGBogASgFEg4KBkNyZWRpdBgbIAEoARIQCghNb3J0Z2FnZRgcIAEoARIW" + 
            "Cg5FeGNoYW5nZU1hcmdpbhgdIAEoARIWCg5EZWxpdmVyeU1hcmdpbhgeIAEo" + 
            "ARIeChZFeGNoYW5nZURlbGl2ZXJ5TWFyZ2luGB8gASgBEhYKDlJlc2VydmVC" + 
            "YWxhbmNlGCAgASgBIoYEChBQQk1zZ09yZGVySW5zZXJ0EhAKCEJyb2tlcklE" + 
            "GAIgASgJEhIKCkludmVzdG9ySUQYAyABKAkSFAoMSW5zdHJ1bWVudElEGAQg" + 
            "ASgJEhAKCE9yZGVyUmVmGAUgASgJEg4KBlVzZXJJRBgGIAEoCRIWCg5PcmRl" + 
            "clByaWNlVHlwZRgHIAEoCRIRCglEaXJlY3Rpb24YCCABKAkSFgoOQ29tYk9m" + 
            "ZnNldEZsYWcYCSABKAkSFQoNQ29tYkhlZGdlRmxhZxgKIAEoCRISCgpMaW1p" + 
            "dFByaWNlGAsgASgBEhsKE1ZvbHVtZVRvdGFsT3JpZ2luYWwYDCABKAUSFQoN" + 
            "VGltZUNvbmRpdGlvbhgNIAEoCRIPCgdHVEREYXRlGA4gASgJEhcKD1ZvbHVt" + 
            "ZUNvbmRpdGlvbhgPIAEoCRIRCglNaW5Wb2x1bWUYECABKAUSGwoTQ29udGlu" + 
            "Z2VudENvbmRpdGlvbhgRIAEoCRIRCglTdG9wUHJpY2UYEiABKAESGAoQRm9y" + 
            "Y2VDbG9zZVJlYXNvbhgTIAEoCRIVCg1Jc0F1dG9TdXNwZW5kGBQgASgFEhQK" + 
            "DEJ1c2luZXNzVW5pdBgVIAEoCRIRCglSZXF1ZXN0SUQYFiABKAUSFgoOVXNl" + 
            "ckZvcmNlQ2xvc2UYFyABKAUSEwoLSXNTd2FwT3JkZXIYGCABKAUijAQKEFBC" + 
            "TXNnT3JkZXJBY3Rpb24SEAoIQnJva2VySUQYAiABKAkSEgoKSW52ZXN0b3JJ" + 
            "RBgDIAEoCRIWCg5PcmRlckFjdGlvblJlZhgEIAEoBRIQCghPcmRlclJlZhgF" + 
            "IAEoCRIRCglSZXF1ZXN0SUQYBiABKAUSDwoHRnJvbnRJRBgHIAEoBRIRCglT" + 
            "ZXNzaW9uSUQYCCABKAUSEgoKRXhjaGFuZ2VJRBgJIAEoCRISCgpPcmRlclN5" + 
            "c0lEGAogASgJEhIKCkFjdGlvbkZsYWcYCyABKAkSEgoKTGltaXRQcmljZRgM" + 
            "IAEoARIUCgxWb2x1bWVDaGFuZ2UYDSABKAUSEgoKQWN0aW9uRGF0ZRgOIAEo" + 
            "CRISCgpBY3Rpb25UaW1lGA8gASgJEhAKCFRyYWRlcklEGBAgASgJEhEKCUlu" + 
            "c3RhbGxJRBgRIAEoBRIUCgxPcmRlckxvY2FsSUQYEiABKAkSFQoNQWN0aW9u" + 
            "TG9jYWxJRBgTIAEoCRIVCg1QYXJ0aWNpcGFudElEGBQgASgJEhAKCENsaWVu" + 
            "dElEGBUgASgJEhQKDEJ1c2luZXNzVW5pdBgWIAEoCRIZChFPcmRlckFjdGlv" + 
            "blN0YXR1cxgXIAEoCRIOCgZVc2VySUQYGCABKAkSEQoJU3RhdHVzTXNnGBkg" + 
            "ASgMEhQKDEluc3RydW1lbnRJRBgaIAEoCSKECgoNUEJNc2dPcmRlclJ0bhIL" + 
            "CgNFT0YYASABKAUSEAoIQnJva2VySUQYAiABKAkSEgoKSW52ZXN0b3JJRBgD" + 
            "IAEoCRIUCgxJbnN0cnVtZW50SUQYBCABKAkSEAoIT3JkZXJSZWYYBSABKAkS" + 
            "DgoGVXNlcklEGAYgASgJEhYKDk9yZGVyUHJpY2VUeXBlGAcgASgJEhEKCURp" + 
            "cmVjdGlvbhgIIAEoCRIWCg5Db21iT2Zmc2V0RmxhZxgJIAEoCRIVCg1Db21i" + 
            "SGVkZ2VGbGFnGAogASgJEhIKCkxpbWl0UHJpY2UYCyABKAESGwoTVm9sdW1l" + 
            "VG90YWxPcmlnaW5hbBgMIAEoBRIVCg1UaW1lQ29uZGl0aW9uGA0gASgJEg8K" + 
            "B0dURERhdGUYDiABKAkSFwoPVm9sdW1lQ29uZGl0aW9uGA8gASgJEhEKCU1p" + 
            "blZvbHVtZRgQIAEoBRIbChNDb250aW5nZW50Q29uZGl0aW9uGBEgASgJEhEK" + 
            "CVN0b3BQcmljZRgSIAEoARIYChBGb3JjZUNsb3NlUmVhc29uGBMgASgJEhUK" + 
            "DUlzQXV0b1N1c3BlbmQYFCABKAUSFAoMQnVzaW5lc3NVbml0GBUgASgJEhEK" + 
            "CVJlcXVlc3RJRBgWIAEoBRIUCgxPcmRlckxvY2FsSUQYFyABKAkSEgoKRXhj" + 
            "aGFuZ2VJRBgYIAEoCRIVCg1QYXJ0aWNpcGFudElEGBkgASgJEhAKCENsaWVu" + 
            "dElEGBogASgJEhYKDkV4Y2hhbmdlSW5zdElEGBsgASgJEhAKCFRyYWRlcklE" + 
            "GBwgASgJEhEKCUluc3RhbGxJRBgdIAEoBRIZChFPcmRlclN1Ym1pdFN0YXR1" + 
            "cxgeIAEoCRIWCg5Ob3RpZnlTZXF1ZW5jZRgfIAEoBRISCgpUcmFkaW5nRGF5" + 
            "GCAgASgJEhQKDFNldHRsZW1lbnRJRBghIAEoBRISCgpPcmRlclN5c0lEGCIg" + 
            "ASgJEhMKC09yZGVyU291cmNlGCMgASgJEhMKC09yZGVyU3RhdHVzGCQgASgJ" + 
            "EhEKCU9yZGVyVHlwZRglIAEoCRIUCgxWb2x1bWVUcmFkZWQYJiABKAUSEwoL" + 
            "Vm9sdW1lVG90YWwYJyABKAUSEgoKSW5zZXJ0RGF0ZRgoIAEoCRISCgpJbnNl" + 
            "cnRUaW1lGCkgASgJEhIKCkFjdGl2ZVRpbWUYKiABKAkSEwoLU3VzcGVuZFRp" + 
            "bWUYKyABKAkSEgoKVXBkYXRlVGltZRgsIAEoCRISCgpDYW5jZWxUaW1lGC0g" + 
            "ASgJEhYKDkFjdGl2ZVRyYWRlcklEGC4gASgJEhYKDkNsZWFyaW5nUGFydElE" + 
            "GC8gASgJEhIKClNlcXVlbmNlTm8YMCABKAUSDwoHRnJvbnRJRBgxIAEoBRIR" + 
            "CglTZXNzaW9uSUQYMiABKAUSFwoPVXNlclByb2R1Y3RJbmZvGDMgASgJEhEK" + 
            "CVN0YXR1c01zZxg0IAEoDBIWCg5Vc2VyRm9yY2VDbG9zZRg1IAEoBRIUCgxB" + 
            "Y3RpdmVVc2VySUQYNiABKAkSFgoOQnJva2VyT3JkZXJTZXEYNyABKAUSGgoS" + 
            "UmVsYXRpdmVPcmRlclN5c0lEGDggASgJEhwKFFpDRVRvdGFsVHJhZGVkVm9s" + 
            "dW1lGDkgASgFEhMKC0lzU3dhcE9yZGVyGDogASgFEhQKDElPcmRlclN0YXR1" + 
            "cxg7IAEoBSLxBAoNUEJNc2dUcmFkZVJ0bhILCgNFT0YYASABKAUSEAoIQnJv" + 
            "a2VySUQYAiABKAkSEgoKSW52ZXN0b3JJRBgDIAEoCRIUCgxJbnN0cnVtZW50" + 
            "SUQYBCABKAkSEAoIT3JkZXJSZWYYBSABKAkSDgoGVXNlcklEGAYgASgJEhIK" + 
            "CkV4Y2hhbmdlSUQYByABKAkSDwoHVHJhZGVJRBgIIAEoCRIRCglEaXJlY3Rp" + 
            "b24YCSABKAkSEgoKT3JkZXJTeXNJRBgKIAEoCRIVCg1QYXJ0aWNpcGFudElE" + 
            "GAsgASgJEhAKCENsaWVudElEGAwgASgJEhMKC1RyYWRpbmdSb2xlGA0gASgJ" + 
            "EhYKDkV4Y2hhbmdlSW5zdElEGA4gASgJEhIKCk9mZnNldEZsYWcYDyABKAkS" + 
            "EQoJSGVkZ2VGbGFnGBAgASgJEg0KBVByaWNlGBEgASgBEg4KBlZvbHVtZRgS" + 
            "IAEoBRIRCglUcmFkZURhdGUYEyABKAkSEQoJVHJhZGVUaW1lGBQgASgJEhEK" + 
            "CVRyYWRlVHlwZRgVIAEoCRITCgtQcmljZVNvdXJjZRgWIAEoCRIQCghUcmFk" + 
            "ZXJJRBgXIAEoCRIUCgxPcmRlckxvY2FsSUQYGCABKAkSFgoOQ2xlYXJpbmdQ" + 
            "YXJ0SUQYGSABKAkSFAoMQnVzaW5lc3NVbml0GBogASgJEhIKClNlcXVlbmNl" + 
            "Tm8YGyABKAUSEgoKVHJhZGluZ0RheRgcIAEoCRIUCgxTZXR0bGVtZW50SUQY" + 
            "HSABKAUSFgoOQnJva2VyT3JkZXJTZXEYHiABKAUSEwoLVHJhZGVTb3VyY2UY" + 
            "HyABKAkibAoaUEJNc2dTZXR0bGVtZW50SW5mb0NvbmZpcm0SEAoIQnJva2Vy" + 
            "SUQYAiABKAkSEgoKSW52ZXN0b3JJRBgDIAEoCRITCgtDb25maXJtRGF0ZRgE" + 
            "IAEoCRITCgtDb25maXJtVGltZRgFIAEoCSJLCg9QQk1zZ1JlcUNvbm5lY3QS" + 
            "EAoIQnJva2VySUQYAiABKAkSEgoKSW52ZXN0b3JJRBgDIAEoCRISCgpUcmFk" + 
            "ZUZyb250GAQgASgJImsKD1BCTXNnUnNwQ29ubmVjdBIQCghCcm9rZXJJRBgC" + 
            "IAEoCRISCgpJbnZlc3RvcklEGAMgASgJEhIKClRyYWRlRnJvbnQYBCABKAkS" + 
            "DgoGUmVxVVJJGAUgASgJEg4KBlJzcFVSSRgGIAEoCSrGAQoNUEJPcmRlclN0" + 
            "YXR1cxIdChlUVElTX09SREVSX0lOU0VSVF9TVUNDRVNTEAESHAoYVFRJU19P" + 
            "UkRFUl9JTlNFUlRfRkFJTEVEEAISHQoZVFRJU19PUkRFUl9DQU5DRUxfU1VD" + 
            "Q0VTUxADEhwKGFRUSVNfT1JERVJfQ0FOQ0VMX0ZBSUxFRBAEEhQKEFRUSVNf" + 
            "T1JERVJfT1RIRVIQBRIQCgxBTExfRklOSVNIRUQQChITCg9QQVJUTFlfRklO" + 
            "SVNIRUQQC0IeCg9Qcm90b0J1Zk1lc3NhZ2VCC1BCTXNnVHJhZGVy");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_PBMsgTrader_PBMsgError__Descriptor = Descriptor.MessageTypes[0];
          internal__static_PBMsgTrader_PBMsgError__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgError, global::PBMsgTrader.PBMsgError.Builder>(internal__static_PBMsgTrader_PBMsgError__Descriptor,
                  new string[] { "ErrorID", "ErrorMsg", });
          internal__static_PBMsgTrader_PBMsgLoginReq__Descriptor = Descriptor.MessageTypes[1];
          internal__static_PBMsgTrader_PBMsgLoginReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLoginReq, global::PBMsgTrader.PBMsgLoginReq.Builder>(internal__static_PBMsgTrader_PBMsgLoginReq__Descriptor,
                  new string[] { "TradingDay", "BrokerID", "UserID", "Password", "UserProductInfo", "InterfaceProductInfo", "ProtocolInfo", "MacAddress", "OneTimePassword", "ClientIPAddress", });
          internal__static_PBMsgTrader_PBMsgLoginRsp__Descriptor = Descriptor.MessageTypes[2];
          internal__static_PBMsgTrader_PBMsgLoginRsp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLoginRsp, global::PBMsgTrader.PBMsgLoginRsp.Builder>(internal__static_PBMsgTrader_PBMsgLoginRsp__Descriptor,
                  new string[] { "TradingDay", "LoginTime", "BrokerID", "UserID", "SystemName", "FrontID", "SessionID", "MaxOrderRef", "SHFETime", "DCETime", "CZCETime", "FFEXTime", });
          internal__static_PBMsgTrader_PBMsgLogout__Descriptor = Descriptor.MessageTypes[3];
          internal__static_PBMsgTrader_PBMsgLogout__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgLogout, global::PBMsgTrader.PBMsgLogout.Builder>(internal__static_PBMsgTrader_PBMsgLogout__Descriptor,
                  new string[] { "BrokerID", "UserID", });
          internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__Descriptor = Descriptor.MessageTypes[4];
          internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqMarketInfo, global::PBMsgTrader.PBMsgQueryReqMarketInfo.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__Descriptor,
                  new string[] { "ExchangeID", });
          internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__Descriptor = Descriptor.MessageTypes[5];
          internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspMarketInfo, global::PBMsgTrader.PBMsgQueryRspMarketInfo.Builder>(internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__Descriptor,
                  new string[] { "EOF", "ExchangeID", "ExchangeName", "ExchangeProperty", });
          internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__Descriptor = Descriptor.MessageTypes[6];
          internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqInstrumentInfo, global::PBMsgTrader.PBMsgQueryReqInstrumentInfo.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__Descriptor,
                  new string[] { "InstrumentID", "ExchangeID", "ExchangeInstID", "ProductID", });
          internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__Descriptor = Descriptor.MessageTypes[7];
          internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspInstrumentInfo, global::PBMsgTrader.PBMsgQueryRspInstrumentInfo.Builder>(internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__Descriptor,
                  new string[] { "EOF", "InstrumentID", "ExchangeID", "InstrumentName", "ExchangeInstID", "ProductID", "ProductClass", "DeliveryYear", "DeliveryMonth", "MaxMarketOrderVolume", "MinMarketOrderVolume", "MaxLimitOrderVolume", "MinLimitOrderVolume", "VolumeMultiple", "PriceTick", "CreateDate", "OpenDate", "ExpireDate", "StartDelivDate", "EndDelivDate", "InstLifePhase", "IsTrading", "PositionType", "PositionDateType", "LongMarginRatio", "ShortMarginRatio", "MaxMarginSideAlgorithm", });
          internal__static_PBMsgTrader_PBMsgQueryReqOrder__Descriptor = Descriptor.MessageTypes[8];
          internal__static_PBMsgTrader_PBMsgQueryReqOrder__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqOrder, global::PBMsgTrader.PBMsgQueryReqOrder.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqOrder__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "OrderSysID", "InsertTimeStart", "InsertTimeEnd", "TradingDay", "SettlementID", });
          internal__static_PBMsgTrader_PBMsgQueryReqTrade__Descriptor = Descriptor.MessageTypes[9];
          internal__static_PBMsgTrader_PBMsgQueryReqTrade__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqTrade, global::PBMsgTrader.PBMsgQueryReqTrade.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqTrade__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "InstrumentID", "ExchangeID", "TradeID", "TradeTimeStart", "TradeTimeEnd", });
          internal__static_PBMsgTrader_PBMsgQueryReqPosition__Descriptor = Descriptor.MessageTypes[10];
          internal__static_PBMsgTrader_PBMsgQueryReqPosition__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqPosition, global::PBMsgTrader.PBMsgQueryReqPosition.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqPosition__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "InstrumentID", });
          internal__static_PBMsgTrader_PBMsgQueryRspPosition__Descriptor = Descriptor.MessageTypes[11];
          internal__static_PBMsgTrader_PBMsgQueryRspPosition__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspPosition, global::PBMsgTrader.PBMsgQueryRspPosition.Builder>(internal__static_PBMsgTrader_PBMsgQueryRspPosition__Descriptor,
                  new string[] { "EOF", "InstrumentID", "BrokerID", "InvestorID", "PosiDirection", "HedgeFlag", "PositionDate", "YdPosition", "Position", "LongFrozen", "ShortFrozen", "LongFrozenAmount", "ShortFrozenAmount", "OpenVolume", "CloseVolume", "OpenAmount", "CloseAmount", "PositionCost", "PreMargin", "UseMargin", "FrozenMargin", "FrozenCash", "FrozenCommission", "CashIn", "Commission", "CloseProfit", "PositionProfit", "PreSettlementPrice", "SettlementPrice", "TradingDay", "SettlementID", "OpenCost", "ExchangeMargin", "CombPosition", "CombLongFrozen", "CombShortFrozen", "CloseProfitByDate", "CloseProfitByTrade", "TodayPosition", "MarginRateByMoney", "MarginRateByVolume", });
          internal__static_PBMsgTrader_PBMsgQueryReqFund__Descriptor = Descriptor.MessageTypes[12];
          internal__static_PBMsgTrader_PBMsgQueryReqFund__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryReqFund, global::PBMsgTrader.PBMsgQueryReqFund.Builder>(internal__static_PBMsgTrader_PBMsgQueryReqFund__Descriptor,
                  new string[] { "BrokerID", "InvestorID", });
          internal__static_PBMsgTrader_PBMsgQueryRspFund__Descriptor = Descriptor.MessageTypes[13];
          internal__static_PBMsgTrader_PBMsgQueryRspFund__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgQueryRspFund, global::PBMsgTrader.PBMsgQueryRspFund.Builder>(internal__static_PBMsgTrader_PBMsgQueryRspFund__Descriptor,
                  new string[] { "EOF", "BrokerID", "AccountID", "PreMortgage", "PreCredit", "PreDeposit", "PreBalance", "PreMargin", "InterestBase", "Interest", "Deposit", "Withdraw", "FrozenMargin", "FrozenCash", "FrozenCommission", "CurrMargin", "CashIn", "Commission", "CloseProfit", "PositionProfit", "Balance", "Available", "WithdrawQuota", "Reserve", "TradingDay", "SettlementID", "Credit", "Mortgage", "ExchangeMargin", "DeliveryMargin", "ExchangeDeliveryMargin", "ReserveBalance", });
          internal__static_PBMsgTrader_PBMsgOrderInsert__Descriptor = Descriptor.MessageTypes[14];
          internal__static_PBMsgTrader_PBMsgOrderInsert__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderInsert, global::PBMsgTrader.PBMsgOrderInsert.Builder>(internal__static_PBMsgTrader_PBMsgOrderInsert__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "UserForceClose", "IsSwapOrder", });
          internal__static_PBMsgTrader_PBMsgOrderAction__Descriptor = Descriptor.MessageTypes[15];
          internal__static_PBMsgTrader_PBMsgOrderAction__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderAction, global::PBMsgTrader.PBMsgOrderAction.Builder>(internal__static_PBMsgTrader_PBMsgOrderAction__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "OrderActionRef", "OrderRef", "RequestID", "FrontID", "SessionID", "ExchangeID", "OrderSysID", "ActionFlag", "LimitPrice", "VolumeChange", "ActionDate", "ActionTime", "TraderID", "InstallID", "OrderLocalID", "ActionLocalID", "ParticipantID", "ClientID", "BusinessUnit", "OrderActionStatus", "UserID", "StatusMsg", "InstrumentID", });
          internal__static_PBMsgTrader_PBMsgOrderRtn__Descriptor = Descriptor.MessageTypes[16];
          internal__static_PBMsgTrader_PBMsgOrderRtn__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgOrderRtn, global::PBMsgTrader.PBMsgOrderRtn.Builder>(internal__static_PBMsgTrader_PBMsgOrderRtn__Descriptor,
                  new string[] { "EOF", "BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "OrderPriceType", "Direction", "CombOffsetFlag", "CombHedgeFlag", "LimitPrice", "VolumeTotalOriginal", "TimeCondition", "GTDDate", "VolumeCondition", "MinVolume", "ContingentCondition", "StopPrice", "ForceCloseReason", "IsAutoSuspend", "BusinessUnit", "RequestID", "OrderLocalID", "ExchangeID", "ParticipantID", "ClientID", "ExchangeInstID", "TraderID", "InstallID", "OrderSubmitStatus", "NotifySequence", "TradingDay", "SettlementID", "OrderSysID", "OrderSource", "OrderStatus", "OrderType", "VolumeTraded", "VolumeTotal", "InsertDate", "InsertTime", "ActiveTime", "SuspendTime", "UpdateTime", "CancelTime", "ActiveTraderID", "ClearingPartID", "SequenceNo", "FrontID", "SessionID", "UserProductInfo", "StatusMsg", "UserForceClose", "ActiveUserID", "BrokerOrderSeq", "RelativeOrderSysID", "ZCETotalTradedVolume", "IsSwapOrder", "IOrderStatus", });
          internal__static_PBMsgTrader_PBMsgTradeRtn__Descriptor = Descriptor.MessageTypes[17];
          internal__static_PBMsgTrader_PBMsgTradeRtn__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgTradeRtn, global::PBMsgTrader.PBMsgTradeRtn.Builder>(internal__static_PBMsgTrader_PBMsgTradeRtn__Descriptor,
                  new string[] { "EOF", "BrokerID", "InvestorID", "InstrumentID", "OrderRef", "UserID", "ExchangeID", "TradeID", "Direction", "OrderSysID", "ParticipantID", "ClientID", "TradingRole", "ExchangeInstID", "OffsetFlag", "HedgeFlag", "Price", "Volume", "TradeDate", "TradeTime", "TradeType", "PriceSource", "TraderID", "OrderLocalID", "ClearingPartID", "BusinessUnit", "SequenceNo", "TradingDay", "SettlementID", "BrokerOrderSeq", "TradeSource", });
          internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__Descriptor = Descriptor.MessageTypes[18];
          internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgSettlementInfoConfirm, global::PBMsgTrader.PBMsgSettlementInfoConfirm.Builder>(internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "ConfirmDate", "ConfirmTime", });
          internal__static_PBMsgTrader_PBMsgReqConnect__Descriptor = Descriptor.MessageTypes[19];
          internal__static_PBMsgTrader_PBMsgReqConnect__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgReqConnect, global::PBMsgTrader.PBMsgReqConnect.Builder>(internal__static_PBMsgTrader_PBMsgReqConnect__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "TradeFront", });
          internal__static_PBMsgTrader_PBMsgRspConnect__Descriptor = Descriptor.MessageTypes[20];
          internal__static_PBMsgTrader_PBMsgRspConnect__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBMsgTrader.PBMsgRspConnect, global::PBMsgTrader.PBMsgRspConnect.Builder>(internal__static_PBMsgTrader_PBMsgRspConnect__Descriptor,
                  new string[] { "BrokerID", "InvestorID", "TradeFront", "ReqURI", "RspURI", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Enums
  public enum PBOrderStatus {
    TTIS_ORDER_INSERT_SUCCESS = 1,
    TTIS_ORDER_INSERT_FAILED = 2,
    TTIS_ORDER_CANCEL_SUCCESS = 3,
    TTIS_ORDER_CANCEL_FAILED = 4,
    TTIS_ORDER_OTHER = 5,
    ALL_FINISHED = 10,
    PARTLY_FINISHED = 11,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgError : pb::GeneratedMessage<PBMsgError, PBMsgError.Builder> {
    private PBMsgError() { }
    private static readonly PBMsgError defaultInstance = new PBMsgError().MakeReadOnly();
    private static readonly string[] _pBMsgErrorFieldNames = new string[] { "ErrorID", "ErrorMsg" };
    private static readonly uint[] _pBMsgErrorFieldTags = new uint[] { 16, 26 };
    public static PBMsgError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgError, PBMsgError.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgError__FieldAccessorTable; }
    }
    
    public const int ErrorIDFieldNumber = 2;
    private bool hasErrorID;
    private int errorID_;
    public bool HasErrorID {
      get { return hasErrorID; }
    }
    public int ErrorID {
      get { return errorID_; }
    }
    
    public const int ErrorMsgFieldNumber = 3;
    private bool hasErrorMsg;
    private pb::ByteString errorMsg_ = pb::ByteString.Empty;
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public pb::ByteString ErrorMsg {
      get { return errorMsg_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgErrorFieldNames;
      if (hasErrorID) {
        output.WriteInt32(2, field_names[0], ErrorID);
      }
      if (hasErrorMsg) {
        output.WriteBytes(3, field_names[1], ErrorMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasErrorID) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ErrorID);
        }
        if (hasErrorMsg) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ErrorMsg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgError result;
      
      private PBMsgError PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgError original = result;
          result = new PBMsgError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgError.Descriptor; }
      }
      
      public override PBMsgError DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgError.DefaultInstance; }
      }
      
      public override PBMsgError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgError) {
          return MergeFrom((PBMsgError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgError other) {
        if (other == global::PBMsgTrader.PBMsgError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorID) {
          ErrorID = other.ErrorID;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasErrorID = input.ReadInt32(ref result.errorID_);
              break;
            }
            case 26: {
              result.hasErrorMsg = input.ReadBytes(ref result.errorMsg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorID {
        get { return result.hasErrorID; }
      }
      public int ErrorID {
        get { return result.ErrorID; }
        set { SetErrorID(value); }
      }
      public Builder SetErrorID(int value) {
        PrepareBuilder();
        result.hasErrorID = true;
        result.errorID_ = value;
        return this;
      }
      public Builder ClearErrorID() {
        PrepareBuilder();
        result.hasErrorID = false;
        result.errorID_ = 0;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.hasErrorMsg; }
      }
      public pb::ByteString ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        PrepareBuilder();
        result.hasErrorMsg = false;
        result.errorMsg_ = pb::ByteString.Empty;
        return this;
      }
    }
    static PBMsgError() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgLoginReq : pb::GeneratedMessage<PBMsgLoginReq, PBMsgLoginReq.Builder> {
    private PBMsgLoginReq() { }
    private static readonly PBMsgLoginReq defaultInstance = new PBMsgLoginReq().MakeReadOnly();
    private static readonly string[] _pBMsgLoginReqFieldNames = new string[] { "BrokerID", "ClientIPAddress", "InterfaceProductInfo", "MacAddress", "OneTimePassword", "Password", "ProtocolInfo", "TradingDay", "UserID", "UserProductInfo" };
    private static readonly uint[] _pBMsgLoginReqFieldTags = new uint[] { 26, 90, 58, 74, 82, 42, 66, 18, 34, 50 };
    public static PBMsgLoginReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgLoginReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgLoginReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLoginReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgLoginReq, PBMsgLoginReq.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLoginReq__FieldAccessorTable; }
    }
    
    public const int TradingDayFieldNumber = 2;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int BrokerIDFieldNumber = 3;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int UserIDFieldNumber = 4;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int PasswordFieldNumber = 5;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int UserProductInfoFieldNumber = 6;
    private bool hasUserProductInfo;
    private string userProductInfo_ = "";
    public bool HasUserProductInfo {
      get { return hasUserProductInfo; }
    }
    public string UserProductInfo {
      get { return userProductInfo_; }
    }
    
    public const int InterfaceProductInfoFieldNumber = 7;
    private bool hasInterfaceProductInfo;
    private string interfaceProductInfo_ = "";
    public bool HasInterfaceProductInfo {
      get { return hasInterfaceProductInfo; }
    }
    public string InterfaceProductInfo {
      get { return interfaceProductInfo_; }
    }
    
    public const int ProtocolInfoFieldNumber = 8;
    private bool hasProtocolInfo;
    private string protocolInfo_ = "";
    public bool HasProtocolInfo {
      get { return hasProtocolInfo; }
    }
    public string ProtocolInfo {
      get { return protocolInfo_; }
    }
    
    public const int MacAddressFieldNumber = 9;
    private bool hasMacAddress;
    private string macAddress_ = "";
    public bool HasMacAddress {
      get { return hasMacAddress; }
    }
    public string MacAddress {
      get { return macAddress_; }
    }
    
    public const int OneTimePasswordFieldNumber = 10;
    private bool hasOneTimePassword;
    private string oneTimePassword_ = "";
    public bool HasOneTimePassword {
      get { return hasOneTimePassword; }
    }
    public string OneTimePassword {
      get { return oneTimePassword_; }
    }
    
    public const int ClientIPAddressFieldNumber = 11;
    private bool hasClientIPAddress;
    private string clientIPAddress_ = "";
    public bool HasClientIPAddress {
      get { return hasClientIPAddress; }
    }
    public string ClientIPAddress {
      get { return clientIPAddress_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgLoginReqFieldNames;
      if (hasTradingDay) {
        output.WriteString(2, field_names[7], TradingDay);
      }
      if (hasBrokerID) {
        output.WriteString(3, field_names[0], BrokerID);
      }
      if (hasUserID) {
        output.WriteString(4, field_names[8], UserID);
      }
      if (hasPassword) {
        output.WriteString(5, field_names[5], Password);
      }
      if (hasUserProductInfo) {
        output.WriteString(6, field_names[9], UserProductInfo);
      }
      if (hasInterfaceProductInfo) {
        output.WriteString(7, field_names[2], InterfaceProductInfo);
      }
      if (hasProtocolInfo) {
        output.WriteString(8, field_names[6], ProtocolInfo);
      }
      if (hasMacAddress) {
        output.WriteString(9, field_names[3], MacAddress);
      }
      if (hasOneTimePassword) {
        output.WriteString(10, field_names[4], OneTimePassword);
      }
      if (hasClientIPAddress) {
        output.WriteString(11, field_names[1], ClientIPAddress);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TradingDay);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BrokerID);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, UserID);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Password);
        }
        if (hasUserProductInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserProductInfo);
        }
        if (hasInterfaceProductInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(7, InterfaceProductInfo);
        }
        if (hasProtocolInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ProtocolInfo);
        }
        if (hasMacAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(9, MacAddress);
        }
        if (hasOneTimePassword) {
          size += pb::CodedOutputStream.ComputeStringSize(10, OneTimePassword);
        }
        if (hasClientIPAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ClientIPAddress);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgLoginReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgLoginReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLoginReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgLoginReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgLoginReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgLoginReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgLoginReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgLoginReq result;
      
      private PBMsgLoginReq PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgLoginReq original = result;
          result = new PBMsgLoginReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgLoginReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgLoginReq.Descriptor; }
      }
      
      public override PBMsgLoginReq DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgLoginReq.DefaultInstance; }
      }
      
      public override PBMsgLoginReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgLoginReq) {
          return MergeFrom((PBMsgLoginReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgLoginReq other) {
        if (other == global::PBMsgTrader.PBMsgLoginReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasUserProductInfo) {
          UserProductInfo = other.UserProductInfo;
        }
        if (other.HasInterfaceProductInfo) {
          InterfaceProductInfo = other.InterfaceProductInfo;
        }
        if (other.HasProtocolInfo) {
          ProtocolInfo = other.ProtocolInfo;
        }
        if (other.HasMacAddress) {
          MacAddress = other.MacAddress;
        }
        if (other.HasOneTimePassword) {
          OneTimePassword = other.OneTimePassword;
        }
        if (other.HasClientIPAddress) {
          ClientIPAddress = other.ClientIPAddress;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgLoginReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgLoginReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 26: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 34: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 42: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 50: {
              result.hasUserProductInfo = input.ReadString(ref result.userProductInfo_);
              break;
            }
            case 58: {
              result.hasInterfaceProductInfo = input.ReadString(ref result.interfaceProductInfo_);
              break;
            }
            case 66: {
              result.hasProtocolInfo = input.ReadString(ref result.protocolInfo_);
              break;
            }
            case 74: {
              result.hasMacAddress = input.ReadString(ref result.macAddress_);
              break;
            }
            case 82: {
              result.hasOneTimePassword = input.ReadString(ref result.oneTimePassword_);
              break;
            }
            case 90: {
              result.hasClientIPAddress = input.ReadString(ref result.clientIPAddress_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasUserProductInfo {
        get { return result.hasUserProductInfo; }
      }
      public string UserProductInfo {
        get { return result.UserProductInfo; }
        set { SetUserProductInfo(value); }
      }
      public Builder SetUserProductInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserProductInfo = true;
        result.userProductInfo_ = value;
        return this;
      }
      public Builder ClearUserProductInfo() {
        PrepareBuilder();
        result.hasUserProductInfo = false;
        result.userProductInfo_ = "";
        return this;
      }
      
      public bool HasInterfaceProductInfo {
        get { return result.hasInterfaceProductInfo; }
      }
      public string InterfaceProductInfo {
        get { return result.InterfaceProductInfo; }
        set { SetInterfaceProductInfo(value); }
      }
      public Builder SetInterfaceProductInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInterfaceProductInfo = true;
        result.interfaceProductInfo_ = value;
        return this;
      }
      public Builder ClearInterfaceProductInfo() {
        PrepareBuilder();
        result.hasInterfaceProductInfo = false;
        result.interfaceProductInfo_ = "";
        return this;
      }
      
      public bool HasProtocolInfo {
        get { return result.hasProtocolInfo; }
      }
      public string ProtocolInfo {
        get { return result.ProtocolInfo; }
        set { SetProtocolInfo(value); }
      }
      public Builder SetProtocolInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProtocolInfo = true;
        result.protocolInfo_ = value;
        return this;
      }
      public Builder ClearProtocolInfo() {
        PrepareBuilder();
        result.hasProtocolInfo = false;
        result.protocolInfo_ = "";
        return this;
      }
      
      public bool HasMacAddress {
        get { return result.hasMacAddress; }
      }
      public string MacAddress {
        get { return result.MacAddress; }
        set { SetMacAddress(value); }
      }
      public Builder SetMacAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddress = true;
        result.macAddress_ = value;
        return this;
      }
      public Builder ClearMacAddress() {
        PrepareBuilder();
        result.hasMacAddress = false;
        result.macAddress_ = "";
        return this;
      }
      
      public bool HasOneTimePassword {
        get { return result.hasOneTimePassword; }
      }
      public string OneTimePassword {
        get { return result.OneTimePassword; }
        set { SetOneTimePassword(value); }
      }
      public Builder SetOneTimePassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOneTimePassword = true;
        result.oneTimePassword_ = value;
        return this;
      }
      public Builder ClearOneTimePassword() {
        PrepareBuilder();
        result.hasOneTimePassword = false;
        result.oneTimePassword_ = "";
        return this;
      }
      
      public bool HasClientIPAddress {
        get { return result.hasClientIPAddress; }
      }
      public string ClientIPAddress {
        get { return result.ClientIPAddress; }
        set { SetClientIPAddress(value); }
      }
      public Builder SetClientIPAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientIPAddress = true;
        result.clientIPAddress_ = value;
        return this;
      }
      public Builder ClearClientIPAddress() {
        PrepareBuilder();
        result.hasClientIPAddress = false;
        result.clientIPAddress_ = "";
        return this;
      }
    }
    static PBMsgLoginReq() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgLoginRsp : pb::GeneratedMessage<PBMsgLoginRsp, PBMsgLoginRsp.Builder> {
    private PBMsgLoginRsp() { }
    private static readonly PBMsgLoginRsp defaultInstance = new PBMsgLoginRsp().MakeReadOnly();
    private static readonly string[] _pBMsgLoginRspFieldNames = new string[] { "BrokerID", "CZCETime", "DCETime", "FFEXTime", "FrontID", "LoginTime", "MaxOrderRef", "SHFETime", "SessionID", "SystemName", "TradingDay", "UserID" };
    private static readonly uint[] _pBMsgLoginRspFieldTags = new uint[] { 34, 98, 90, 106, 56, 26, 74, 82, 64, 50, 18, 42 };
    public static PBMsgLoginRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgLoginRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgLoginRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLoginRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgLoginRsp, PBMsgLoginRsp.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLoginRsp__FieldAccessorTable; }
    }
    
    public const int TradingDayFieldNumber = 2;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int LoginTimeFieldNumber = 3;
    private bool hasLoginTime;
    private string loginTime_ = "";
    public bool HasLoginTime {
      get { return hasLoginTime; }
    }
    public string LoginTime {
      get { return loginTime_; }
    }
    
    public const int BrokerIDFieldNumber = 4;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int UserIDFieldNumber = 5;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int SystemNameFieldNumber = 6;
    private bool hasSystemName;
    private string systemName_ = "";
    public bool HasSystemName {
      get { return hasSystemName; }
    }
    public string SystemName {
      get { return systemName_; }
    }
    
    public const int FrontIDFieldNumber = 7;
    private bool hasFrontID;
    private int frontID_;
    public bool HasFrontID {
      get { return hasFrontID; }
    }
    public int FrontID {
      get { return frontID_; }
    }
    
    public const int SessionIDFieldNumber = 8;
    private bool hasSessionID;
    private int sessionID_;
    public bool HasSessionID {
      get { return hasSessionID; }
    }
    public int SessionID {
      get { return sessionID_; }
    }
    
    public const int MaxOrderRefFieldNumber = 9;
    private bool hasMaxOrderRef;
    private string maxOrderRef_ = "";
    public bool HasMaxOrderRef {
      get { return hasMaxOrderRef; }
    }
    public string MaxOrderRef {
      get { return maxOrderRef_; }
    }
    
    public const int SHFETimeFieldNumber = 10;
    private bool hasSHFETime;
    private string sHFETime_ = "";
    public bool HasSHFETime {
      get { return hasSHFETime; }
    }
    public string SHFETime {
      get { return sHFETime_; }
    }
    
    public const int DCETimeFieldNumber = 11;
    private bool hasDCETime;
    private string dCETime_ = "";
    public bool HasDCETime {
      get { return hasDCETime; }
    }
    public string DCETime {
      get { return dCETime_; }
    }
    
    public const int CZCETimeFieldNumber = 12;
    private bool hasCZCETime;
    private string cZCETime_ = "";
    public bool HasCZCETime {
      get { return hasCZCETime; }
    }
    public string CZCETime {
      get { return cZCETime_; }
    }
    
    public const int FFEXTimeFieldNumber = 13;
    private bool hasFFEXTime;
    private string fFEXTime_ = "";
    public bool HasFFEXTime {
      get { return hasFFEXTime; }
    }
    public string FFEXTime {
      get { return fFEXTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgLoginRspFieldNames;
      if (hasTradingDay) {
        output.WriteString(2, field_names[10], TradingDay);
      }
      if (hasLoginTime) {
        output.WriteString(3, field_names[5], LoginTime);
      }
      if (hasBrokerID) {
        output.WriteString(4, field_names[0], BrokerID);
      }
      if (hasUserID) {
        output.WriteString(5, field_names[11], UserID);
      }
      if (hasSystemName) {
        output.WriteString(6, field_names[9], SystemName);
      }
      if (hasFrontID) {
        output.WriteInt32(7, field_names[4], FrontID);
      }
      if (hasSessionID) {
        output.WriteInt32(8, field_names[8], SessionID);
      }
      if (hasMaxOrderRef) {
        output.WriteString(9, field_names[6], MaxOrderRef);
      }
      if (hasSHFETime) {
        output.WriteString(10, field_names[7], SHFETime);
      }
      if (hasDCETime) {
        output.WriteString(11, field_names[2], DCETime);
      }
      if (hasCZCETime) {
        output.WriteString(12, field_names[1], CZCETime);
      }
      if (hasFFEXTime) {
        output.WriteString(13, field_names[3], FFEXTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TradingDay);
        }
        if (hasLoginTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, LoginTime);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, BrokerID);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, UserID);
        }
        if (hasSystemName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, SystemName);
        }
        if (hasFrontID) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, FrontID);
        }
        if (hasSessionID) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SessionID);
        }
        if (hasMaxOrderRef) {
          size += pb::CodedOutputStream.ComputeStringSize(9, MaxOrderRef);
        }
        if (hasSHFETime) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SHFETime);
        }
        if (hasDCETime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, DCETime);
        }
        if (hasCZCETime) {
          size += pb::CodedOutputStream.ComputeStringSize(12, CZCETime);
        }
        if (hasFFEXTime) {
          size += pb::CodedOutputStream.ComputeStringSize(13, FFEXTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgLoginRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgLoginRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLoginRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgLoginRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgLoginRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgLoginRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgLoginRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgLoginRsp result;
      
      private PBMsgLoginRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgLoginRsp original = result;
          result = new PBMsgLoginRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgLoginRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgLoginRsp.Descriptor; }
      }
      
      public override PBMsgLoginRsp DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgLoginRsp.DefaultInstance; }
      }
      
      public override PBMsgLoginRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgLoginRsp) {
          return MergeFrom((PBMsgLoginRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgLoginRsp other) {
        if (other == global::PBMsgTrader.PBMsgLoginRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasLoginTime) {
          LoginTime = other.LoginTime;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasSystemName) {
          SystemName = other.SystemName;
        }
        if (other.HasFrontID) {
          FrontID = other.FrontID;
        }
        if (other.HasSessionID) {
          SessionID = other.SessionID;
        }
        if (other.HasMaxOrderRef) {
          MaxOrderRef = other.MaxOrderRef;
        }
        if (other.HasSHFETime) {
          SHFETime = other.SHFETime;
        }
        if (other.HasDCETime) {
          DCETime = other.DCETime;
        }
        if (other.HasCZCETime) {
          CZCETime = other.CZCETime;
        }
        if (other.HasFFEXTime) {
          FFEXTime = other.FFEXTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgLoginRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgLoginRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 26: {
              result.hasLoginTime = input.ReadString(ref result.loginTime_);
              break;
            }
            case 34: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 42: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 50: {
              result.hasSystemName = input.ReadString(ref result.systemName_);
              break;
            }
            case 56: {
              result.hasFrontID = input.ReadInt32(ref result.frontID_);
              break;
            }
            case 64: {
              result.hasSessionID = input.ReadInt32(ref result.sessionID_);
              break;
            }
            case 74: {
              result.hasMaxOrderRef = input.ReadString(ref result.maxOrderRef_);
              break;
            }
            case 82: {
              result.hasSHFETime = input.ReadString(ref result.sHFETime_);
              break;
            }
            case 90: {
              result.hasDCETime = input.ReadString(ref result.dCETime_);
              break;
            }
            case 98: {
              result.hasCZCETime = input.ReadString(ref result.cZCETime_);
              break;
            }
            case 106: {
              result.hasFFEXTime = input.ReadString(ref result.fFEXTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasLoginTime {
        get { return result.hasLoginTime; }
      }
      public string LoginTime {
        get { return result.LoginTime; }
        set { SetLoginTime(value); }
      }
      public Builder SetLoginTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginTime = true;
        result.loginTime_ = value;
        return this;
      }
      public Builder ClearLoginTime() {
        PrepareBuilder();
        result.hasLoginTime = false;
        result.loginTime_ = "";
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasSystemName {
        get { return result.hasSystemName; }
      }
      public string SystemName {
        get { return result.SystemName; }
        set { SetSystemName(value); }
      }
      public Builder SetSystemName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSystemName = true;
        result.systemName_ = value;
        return this;
      }
      public Builder ClearSystemName() {
        PrepareBuilder();
        result.hasSystemName = false;
        result.systemName_ = "";
        return this;
      }
      
      public bool HasFrontID {
        get { return result.hasFrontID; }
      }
      public int FrontID {
        get { return result.FrontID; }
        set { SetFrontID(value); }
      }
      public Builder SetFrontID(int value) {
        PrepareBuilder();
        result.hasFrontID = true;
        result.frontID_ = value;
        return this;
      }
      public Builder ClearFrontID() {
        PrepareBuilder();
        result.hasFrontID = false;
        result.frontID_ = 0;
        return this;
      }
      
      public bool HasSessionID {
        get { return result.hasSessionID; }
      }
      public int SessionID {
        get { return result.SessionID; }
        set { SetSessionID(value); }
      }
      public Builder SetSessionID(int value) {
        PrepareBuilder();
        result.hasSessionID = true;
        result.sessionID_ = value;
        return this;
      }
      public Builder ClearSessionID() {
        PrepareBuilder();
        result.hasSessionID = false;
        result.sessionID_ = 0;
        return this;
      }
      
      public bool HasMaxOrderRef {
        get { return result.hasMaxOrderRef; }
      }
      public string MaxOrderRef {
        get { return result.MaxOrderRef; }
        set { SetMaxOrderRef(value); }
      }
      public Builder SetMaxOrderRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxOrderRef = true;
        result.maxOrderRef_ = value;
        return this;
      }
      public Builder ClearMaxOrderRef() {
        PrepareBuilder();
        result.hasMaxOrderRef = false;
        result.maxOrderRef_ = "";
        return this;
      }
      
      public bool HasSHFETime {
        get { return result.hasSHFETime; }
      }
      public string SHFETime {
        get { return result.SHFETime; }
        set { SetSHFETime(value); }
      }
      public Builder SetSHFETime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSHFETime = true;
        result.sHFETime_ = value;
        return this;
      }
      public Builder ClearSHFETime() {
        PrepareBuilder();
        result.hasSHFETime = false;
        result.sHFETime_ = "";
        return this;
      }
      
      public bool HasDCETime {
        get { return result.hasDCETime; }
      }
      public string DCETime {
        get { return result.DCETime; }
        set { SetDCETime(value); }
      }
      public Builder SetDCETime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDCETime = true;
        result.dCETime_ = value;
        return this;
      }
      public Builder ClearDCETime() {
        PrepareBuilder();
        result.hasDCETime = false;
        result.dCETime_ = "";
        return this;
      }
      
      public bool HasCZCETime {
        get { return result.hasCZCETime; }
      }
      public string CZCETime {
        get { return result.CZCETime; }
        set { SetCZCETime(value); }
      }
      public Builder SetCZCETime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCZCETime = true;
        result.cZCETime_ = value;
        return this;
      }
      public Builder ClearCZCETime() {
        PrepareBuilder();
        result.hasCZCETime = false;
        result.cZCETime_ = "";
        return this;
      }
      
      public bool HasFFEXTime {
        get { return result.hasFFEXTime; }
      }
      public string FFEXTime {
        get { return result.FFEXTime; }
        set { SetFFEXTime(value); }
      }
      public Builder SetFFEXTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFFEXTime = true;
        result.fFEXTime_ = value;
        return this;
      }
      public Builder ClearFFEXTime() {
        PrepareBuilder();
        result.hasFFEXTime = false;
        result.fFEXTime_ = "";
        return this;
      }
    }
    static PBMsgLoginRsp() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgLogout : pb::GeneratedMessage<PBMsgLogout, PBMsgLogout.Builder> {
    private PBMsgLogout() { }
    private static readonly PBMsgLogout defaultInstance = new PBMsgLogout().MakeReadOnly();
    private static readonly string[] _pBMsgLogoutFieldNames = new string[] { "BrokerID", "UserID" };
    private static readonly uint[] _pBMsgLogoutFieldTags = new uint[] { 18, 26 };
    public static PBMsgLogout DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgLogout DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgLogout ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLogout__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgLogout, PBMsgLogout.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgLogout__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int UserIDFieldNumber = 3;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgLogoutFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasUserID) {
        output.WriteString(3, field_names[1], UserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, UserID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgLogout ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgLogout ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgLogout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgLogout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgLogout MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgLogout prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgLogout, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgLogout cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgLogout result;
      
      private PBMsgLogout PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgLogout original = result;
          result = new PBMsgLogout();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgLogout MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgLogout.Descriptor; }
      }
      
      public override PBMsgLogout DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgLogout.DefaultInstance; }
      }
      
      public override PBMsgLogout BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgLogout) {
          return MergeFrom((PBMsgLogout) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgLogout other) {
        if (other == global::PBMsgTrader.PBMsgLogout.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgLogoutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgLogoutFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
    }
    static PBMsgLogout() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqMarketInfo : pb::GeneratedMessage<PBMsgQueryReqMarketInfo, PBMsgQueryReqMarketInfo.Builder> {
    private PBMsgQueryReqMarketInfo() { }
    private static readonly PBMsgQueryReqMarketInfo defaultInstance = new PBMsgQueryReqMarketInfo().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqMarketInfoFieldNames = new string[] { "ExchangeID" };
    private static readonly uint[] _pBMsgQueryReqMarketInfoFieldTags = new uint[] { 18 };
    public static PBMsgQueryReqMarketInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqMarketInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqMarketInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqMarketInfo, PBMsgQueryReqMarketInfo.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqMarketInfo__FieldAccessorTable; }
    }
    
    public const int ExchangeIDFieldNumber = 2;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqMarketInfoFieldNames;
      if (hasExchangeID) {
        output.WriteString(2, field_names[0], ExchangeID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ExchangeID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqMarketInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqMarketInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqMarketInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqMarketInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqMarketInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqMarketInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqMarketInfo result;
      
      private PBMsgQueryReqMarketInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqMarketInfo original = result;
          result = new PBMsgQueryReqMarketInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqMarketInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqMarketInfo.Descriptor; }
      }
      
      public override PBMsgQueryReqMarketInfo DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqMarketInfo.DefaultInstance; }
      }
      
      public override PBMsgQueryReqMarketInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqMarketInfo) {
          return MergeFrom((PBMsgQueryReqMarketInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqMarketInfo other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqMarketInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqMarketInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqMarketInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
    }
    static PBMsgQueryReqMarketInfo() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryRspMarketInfo : pb::GeneratedMessage<PBMsgQueryRspMarketInfo, PBMsgQueryRspMarketInfo.Builder> {
    private PBMsgQueryRspMarketInfo() { }
    private static readonly PBMsgQueryRspMarketInfo defaultInstance = new PBMsgQueryRspMarketInfo().MakeReadOnly();
    private static readonly string[] _pBMsgQueryRspMarketInfoFieldNames = new string[] { "EOF", "ExchangeID", "ExchangeName", "ExchangeProperty" };
    private static readonly uint[] _pBMsgQueryRspMarketInfoFieldTags = new uint[] { 8, 18, 26, 34 };
    public static PBMsgQueryRspMarketInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryRspMarketInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryRspMarketInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryRspMarketInfo, PBMsgQueryRspMarketInfo.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspMarketInfo__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int ExchangeIDFieldNumber = 2;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int ExchangeNameFieldNumber = 3;
    private bool hasExchangeName;
    private pb::ByteString exchangeName_ = pb::ByteString.Empty;
    public bool HasExchangeName {
      get { return hasExchangeName; }
    }
    public pb::ByteString ExchangeName {
      get { return exchangeName_; }
    }
    
    public const int ExchangePropertyFieldNumber = 4;
    private bool hasExchangeProperty;
    private string exchangeProperty_ = "";
    public bool HasExchangeProperty {
      get { return hasExchangeProperty; }
    }
    public string ExchangeProperty {
      get { return exchangeProperty_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryRspMarketInfoFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[0], EOF);
      }
      if (hasExchangeID) {
        output.WriteString(2, field_names[1], ExchangeID);
      }
      if (hasExchangeName) {
        output.WriteBytes(3, field_names[2], ExchangeName);
      }
      if (hasExchangeProperty) {
        output.WriteString(4, field_names[3], ExchangeProperty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ExchangeID);
        }
        if (hasExchangeName) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ExchangeName);
        }
        if (hasExchangeProperty) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ExchangeProperty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryRspMarketInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspMarketInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryRspMarketInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryRspMarketInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryRspMarketInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryRspMarketInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryRspMarketInfo result;
      
      private PBMsgQueryRspMarketInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryRspMarketInfo original = result;
          result = new PBMsgQueryRspMarketInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryRspMarketInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryRspMarketInfo.Descriptor; }
      }
      
      public override PBMsgQueryRspMarketInfo DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryRspMarketInfo.DefaultInstance; }
      }
      
      public override PBMsgQueryRspMarketInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryRspMarketInfo) {
          return MergeFrom((PBMsgQueryRspMarketInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryRspMarketInfo other) {
        if (other == global::PBMsgTrader.PBMsgQueryRspMarketInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasExchangeName) {
          ExchangeName = other.ExchangeName;
        }
        if (other.HasExchangeProperty) {
          ExchangeProperty = other.ExchangeProperty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryRspMarketInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryRspMarketInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 26: {
              result.hasExchangeName = input.ReadBytes(ref result.exchangeName_);
              break;
            }
            case 34: {
              result.hasExchangeProperty = input.ReadString(ref result.exchangeProperty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasExchangeName {
        get { return result.hasExchangeName; }
      }
      public pb::ByteString ExchangeName {
        get { return result.ExchangeName; }
        set { SetExchangeName(value); }
      }
      public Builder SetExchangeName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeName = true;
        result.exchangeName_ = value;
        return this;
      }
      public Builder ClearExchangeName() {
        PrepareBuilder();
        result.hasExchangeName = false;
        result.exchangeName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExchangeProperty {
        get { return result.hasExchangeProperty; }
      }
      public string ExchangeProperty {
        get { return result.ExchangeProperty; }
        set { SetExchangeProperty(value); }
      }
      public Builder SetExchangeProperty(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeProperty = true;
        result.exchangeProperty_ = value;
        return this;
      }
      public Builder ClearExchangeProperty() {
        PrepareBuilder();
        result.hasExchangeProperty = false;
        result.exchangeProperty_ = "";
        return this;
      }
    }
    static PBMsgQueryRspMarketInfo() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqInstrumentInfo : pb::GeneratedMessage<PBMsgQueryReqInstrumentInfo, PBMsgQueryReqInstrumentInfo.Builder> {
    private PBMsgQueryReqInstrumentInfo() { }
    private static readonly PBMsgQueryReqInstrumentInfo defaultInstance = new PBMsgQueryReqInstrumentInfo().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqInstrumentInfoFieldNames = new string[] { "ExchangeID", "ExchangeInstID", "InstrumentID", "ProductID" };
    private static readonly uint[] _pBMsgQueryReqInstrumentInfoFieldTags = new uint[] { 26, 34, 18, 42 };
    public static PBMsgQueryReqInstrumentInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqInstrumentInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqInstrumentInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqInstrumentInfo, PBMsgQueryReqInstrumentInfo.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqInstrumentInfo__FieldAccessorTable; }
    }
    
    public const int InstrumentIDFieldNumber = 2;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int ExchangeIDFieldNumber = 3;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int ExchangeInstIDFieldNumber = 4;
    private bool hasExchangeInstID;
    private string exchangeInstID_ = "";
    public bool HasExchangeInstID {
      get { return hasExchangeInstID; }
    }
    public string ExchangeInstID {
      get { return exchangeInstID_; }
    }
    
    public const int ProductIDFieldNumber = 5;
    private bool hasProductID;
    private string productID_ = "";
    public bool HasProductID {
      get { return hasProductID; }
    }
    public string ProductID {
      get { return productID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqInstrumentInfoFieldNames;
      if (hasInstrumentID) {
        output.WriteString(2, field_names[2], InstrumentID);
      }
      if (hasExchangeID) {
        output.WriteString(3, field_names[0], ExchangeID);
      }
      if (hasExchangeInstID) {
        output.WriteString(4, field_names[1], ExchangeInstID);
      }
      if (hasProductID) {
        output.WriteString(5, field_names[3], ProductID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ExchangeID);
        }
        if (hasExchangeInstID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ExchangeInstID);
        }
        if (hasProductID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ProductID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqInstrumentInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqInstrumentInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqInstrumentInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqInstrumentInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqInstrumentInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqInstrumentInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqInstrumentInfo result;
      
      private PBMsgQueryReqInstrumentInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqInstrumentInfo original = result;
          result = new PBMsgQueryReqInstrumentInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqInstrumentInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqInstrumentInfo.Descriptor; }
      }
      
      public override PBMsgQueryReqInstrumentInfo DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqInstrumentInfo.DefaultInstance; }
      }
      
      public override PBMsgQueryReqInstrumentInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqInstrumentInfo) {
          return MergeFrom((PBMsgQueryReqInstrumentInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqInstrumentInfo other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqInstrumentInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasExchangeInstID) {
          ExchangeInstID = other.ExchangeInstID;
        }
        if (other.HasProductID) {
          ProductID = other.ProductID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqInstrumentInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqInstrumentInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 26: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 34: {
              result.hasExchangeInstID = input.ReadString(ref result.exchangeInstID_);
              break;
            }
            case 42: {
              result.hasProductID = input.ReadString(ref result.productID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasExchangeInstID {
        get { return result.hasExchangeInstID; }
      }
      public string ExchangeInstID {
        get { return result.ExchangeInstID; }
        set { SetExchangeInstID(value); }
      }
      public Builder SetExchangeInstID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeInstID = true;
        result.exchangeInstID_ = value;
        return this;
      }
      public Builder ClearExchangeInstID() {
        PrepareBuilder();
        result.hasExchangeInstID = false;
        result.exchangeInstID_ = "";
        return this;
      }
      
      public bool HasProductID {
        get { return result.hasProductID; }
      }
      public string ProductID {
        get { return result.ProductID; }
        set { SetProductID(value); }
      }
      public Builder SetProductID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProductID = true;
        result.productID_ = value;
        return this;
      }
      public Builder ClearProductID() {
        PrepareBuilder();
        result.hasProductID = false;
        result.productID_ = "";
        return this;
      }
    }
    static PBMsgQueryReqInstrumentInfo() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryRspInstrumentInfo : pb::GeneratedMessage<PBMsgQueryRspInstrumentInfo, PBMsgQueryRspInstrumentInfo.Builder> {
    private PBMsgQueryRspInstrumentInfo() { }
    private static readonly PBMsgQueryRspInstrumentInfo defaultInstance = new PBMsgQueryRspInstrumentInfo().MakeReadOnly();
    private static readonly string[] _pBMsgQueryRspInstrumentInfoFieldNames = new string[] { "CreateDate", "DeliveryMonth", "DeliveryYear", "EOF", "EndDelivDate", "ExchangeID", "ExchangeInstID", "ExpireDate", "InstLifePhase", "InstrumentID", "InstrumentName", "IsTrading", "LongMarginRatio", "MaxLimitOrderVolume", "MaxMarginSideAlgorithm", "MaxMarketOrderVolume", "MinLimitOrderVolume", "MinMarketOrderVolume", "OpenDate", "PositionDateType", "PositionType", "PriceTick", "ProductClass", "ProductID", "ShortMarginRatio", "StartDelivDate", "VolumeMultiple" };
    private static readonly uint[] _pBMsgQueryRspInstrumentInfoFieldTags = new uint[] { 130, 72, 64, 8, 162, 26, 42, 146, 170, 18, 34, 176, 201, 96, 218, 80, 104, 88, 138, 194, 186, 120, 58, 50, 209, 154, 112 };
    public static PBMsgQueryRspInstrumentInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryRspInstrumentInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryRspInstrumentInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryRspInstrumentInfo, PBMsgQueryRspInstrumentInfo.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspInstrumentInfo__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int InstrumentIDFieldNumber = 2;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int ExchangeIDFieldNumber = 3;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int InstrumentNameFieldNumber = 4;
    private bool hasInstrumentName;
    private pb::ByteString instrumentName_ = pb::ByteString.Empty;
    public bool HasInstrumentName {
      get { return hasInstrumentName; }
    }
    public pb::ByteString InstrumentName {
      get { return instrumentName_; }
    }
    
    public const int ExchangeInstIDFieldNumber = 5;
    private bool hasExchangeInstID;
    private string exchangeInstID_ = "";
    public bool HasExchangeInstID {
      get { return hasExchangeInstID; }
    }
    public string ExchangeInstID {
      get { return exchangeInstID_; }
    }
    
    public const int ProductIDFieldNumber = 6;
    private bool hasProductID;
    private string productID_ = "";
    public bool HasProductID {
      get { return hasProductID; }
    }
    public string ProductID {
      get { return productID_; }
    }
    
    public const int ProductClassFieldNumber = 7;
    private bool hasProductClass;
    private pb::ByteString productClass_ = pb::ByteString.Empty;
    public bool HasProductClass {
      get { return hasProductClass; }
    }
    public pb::ByteString ProductClass {
      get { return productClass_; }
    }
    
    public const int DeliveryYearFieldNumber = 8;
    private bool hasDeliveryYear;
    private int deliveryYear_;
    public bool HasDeliveryYear {
      get { return hasDeliveryYear; }
    }
    public int DeliveryYear {
      get { return deliveryYear_; }
    }
    
    public const int DeliveryMonthFieldNumber = 9;
    private bool hasDeliveryMonth;
    private int deliveryMonth_;
    public bool HasDeliveryMonth {
      get { return hasDeliveryMonth; }
    }
    public int DeliveryMonth {
      get { return deliveryMonth_; }
    }
    
    public const int MaxMarketOrderVolumeFieldNumber = 10;
    private bool hasMaxMarketOrderVolume;
    private int maxMarketOrderVolume_;
    public bool HasMaxMarketOrderVolume {
      get { return hasMaxMarketOrderVolume; }
    }
    public int MaxMarketOrderVolume {
      get { return maxMarketOrderVolume_; }
    }
    
    public const int MinMarketOrderVolumeFieldNumber = 11;
    private bool hasMinMarketOrderVolume;
    private int minMarketOrderVolume_;
    public bool HasMinMarketOrderVolume {
      get { return hasMinMarketOrderVolume; }
    }
    public int MinMarketOrderVolume {
      get { return minMarketOrderVolume_; }
    }
    
    public const int MaxLimitOrderVolumeFieldNumber = 12;
    private bool hasMaxLimitOrderVolume;
    private int maxLimitOrderVolume_;
    public bool HasMaxLimitOrderVolume {
      get { return hasMaxLimitOrderVolume; }
    }
    public int MaxLimitOrderVolume {
      get { return maxLimitOrderVolume_; }
    }
    
    public const int MinLimitOrderVolumeFieldNumber = 13;
    private bool hasMinLimitOrderVolume;
    private int minLimitOrderVolume_;
    public bool HasMinLimitOrderVolume {
      get { return hasMinLimitOrderVolume; }
    }
    public int MinLimitOrderVolume {
      get { return minLimitOrderVolume_; }
    }
    
    public const int VolumeMultipleFieldNumber = 14;
    private bool hasVolumeMultiple;
    private int volumeMultiple_;
    public bool HasVolumeMultiple {
      get { return hasVolumeMultiple; }
    }
    public int VolumeMultiple {
      get { return volumeMultiple_; }
    }
    
    public const int PriceTickFieldNumber = 15;
    private bool hasPriceTick;
    private int priceTick_;
    public bool HasPriceTick {
      get { return hasPriceTick; }
    }
    public int PriceTick {
      get { return priceTick_; }
    }
    
    public const int CreateDateFieldNumber = 16;
    private bool hasCreateDate;
    private string createDate_ = "";
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public string CreateDate {
      get { return createDate_; }
    }
    
    public const int OpenDateFieldNumber = 17;
    private bool hasOpenDate;
    private string openDate_ = "";
    public bool HasOpenDate {
      get { return hasOpenDate; }
    }
    public string OpenDate {
      get { return openDate_; }
    }
    
    public const int ExpireDateFieldNumber = 18;
    private bool hasExpireDate;
    private string expireDate_ = "";
    public bool HasExpireDate {
      get { return hasExpireDate; }
    }
    public string ExpireDate {
      get { return expireDate_; }
    }
    
    public const int StartDelivDateFieldNumber = 19;
    private bool hasStartDelivDate;
    private string startDelivDate_ = "";
    public bool HasStartDelivDate {
      get { return hasStartDelivDate; }
    }
    public string StartDelivDate {
      get { return startDelivDate_; }
    }
    
    public const int EndDelivDateFieldNumber = 20;
    private bool hasEndDelivDate;
    private string endDelivDate_ = "";
    public bool HasEndDelivDate {
      get { return hasEndDelivDate; }
    }
    public string EndDelivDate {
      get { return endDelivDate_; }
    }
    
    public const int InstLifePhaseFieldNumber = 21;
    private bool hasInstLifePhase;
    private string instLifePhase_ = "";
    public bool HasInstLifePhase {
      get { return hasInstLifePhase; }
    }
    public string InstLifePhase {
      get { return instLifePhase_; }
    }
    
    public const int IsTradingFieldNumber = 22;
    private bool hasIsTrading;
    private int isTrading_;
    public bool HasIsTrading {
      get { return hasIsTrading; }
    }
    public int IsTrading {
      get { return isTrading_; }
    }
    
    public const int PositionTypeFieldNumber = 23;
    private bool hasPositionType;
    private string positionType_ = "";
    public bool HasPositionType {
      get { return hasPositionType; }
    }
    public string PositionType {
      get { return positionType_; }
    }
    
    public const int PositionDateTypeFieldNumber = 24;
    private bool hasPositionDateType;
    private string positionDateType_ = "";
    public bool HasPositionDateType {
      get { return hasPositionDateType; }
    }
    public string PositionDateType {
      get { return positionDateType_; }
    }
    
    public const int LongMarginRatioFieldNumber = 25;
    private bool hasLongMarginRatio;
    private double longMarginRatio_;
    public bool HasLongMarginRatio {
      get { return hasLongMarginRatio; }
    }
    public double LongMarginRatio {
      get { return longMarginRatio_; }
    }
    
    public const int ShortMarginRatioFieldNumber = 26;
    private bool hasShortMarginRatio;
    private double shortMarginRatio_;
    public bool HasShortMarginRatio {
      get { return hasShortMarginRatio; }
    }
    public double ShortMarginRatio {
      get { return shortMarginRatio_; }
    }
    
    public const int MaxMarginSideAlgorithmFieldNumber = 27;
    private bool hasMaxMarginSideAlgorithm;
    private string maxMarginSideAlgorithm_ = "";
    public bool HasMaxMarginSideAlgorithm {
      get { return hasMaxMarginSideAlgorithm; }
    }
    public string MaxMarginSideAlgorithm {
      get { return maxMarginSideAlgorithm_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryRspInstrumentInfoFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[3], EOF);
      }
      if (hasInstrumentID) {
        output.WriteString(2, field_names[9], InstrumentID);
      }
      if (hasExchangeID) {
        output.WriteString(3, field_names[5], ExchangeID);
      }
      if (hasInstrumentName) {
        output.WriteBytes(4, field_names[10], InstrumentName);
      }
      if (hasExchangeInstID) {
        output.WriteString(5, field_names[6], ExchangeInstID);
      }
      if (hasProductID) {
        output.WriteString(6, field_names[23], ProductID);
      }
      if (hasProductClass) {
        output.WriteBytes(7, field_names[22], ProductClass);
      }
      if (hasDeliveryYear) {
        output.WriteInt32(8, field_names[2], DeliveryYear);
      }
      if (hasDeliveryMonth) {
        output.WriteInt32(9, field_names[1], DeliveryMonth);
      }
      if (hasMaxMarketOrderVolume) {
        output.WriteInt32(10, field_names[15], MaxMarketOrderVolume);
      }
      if (hasMinMarketOrderVolume) {
        output.WriteInt32(11, field_names[17], MinMarketOrderVolume);
      }
      if (hasMaxLimitOrderVolume) {
        output.WriteInt32(12, field_names[13], MaxLimitOrderVolume);
      }
      if (hasMinLimitOrderVolume) {
        output.WriteInt32(13, field_names[16], MinLimitOrderVolume);
      }
      if (hasVolumeMultiple) {
        output.WriteInt32(14, field_names[26], VolumeMultiple);
      }
      if (hasPriceTick) {
        output.WriteInt32(15, field_names[21], PriceTick);
      }
      if (hasCreateDate) {
        output.WriteString(16, field_names[0], CreateDate);
      }
      if (hasOpenDate) {
        output.WriteString(17, field_names[18], OpenDate);
      }
      if (hasExpireDate) {
        output.WriteString(18, field_names[7], ExpireDate);
      }
      if (hasStartDelivDate) {
        output.WriteString(19, field_names[25], StartDelivDate);
      }
      if (hasEndDelivDate) {
        output.WriteString(20, field_names[4], EndDelivDate);
      }
      if (hasInstLifePhase) {
        output.WriteString(21, field_names[8], InstLifePhase);
      }
      if (hasIsTrading) {
        output.WriteInt32(22, field_names[11], IsTrading);
      }
      if (hasPositionType) {
        output.WriteString(23, field_names[20], PositionType);
      }
      if (hasPositionDateType) {
        output.WriteString(24, field_names[19], PositionDateType);
      }
      if (hasLongMarginRatio) {
        output.WriteDouble(25, field_names[12], LongMarginRatio);
      }
      if (hasShortMarginRatio) {
        output.WriteDouble(26, field_names[24], ShortMarginRatio);
      }
      if (hasMaxMarginSideAlgorithm) {
        output.WriteString(27, field_names[14], MaxMarginSideAlgorithm);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ExchangeID);
        }
        if (hasInstrumentName) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, InstrumentName);
        }
        if (hasExchangeInstID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ExchangeInstID);
        }
        if (hasProductID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ProductID);
        }
        if (hasProductClass) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, ProductClass);
        }
        if (hasDeliveryYear) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, DeliveryYear);
        }
        if (hasDeliveryMonth) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, DeliveryMonth);
        }
        if (hasMaxMarketOrderVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, MaxMarketOrderVolume);
        }
        if (hasMinMarketOrderVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, MinMarketOrderVolume);
        }
        if (hasMaxLimitOrderVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, MaxLimitOrderVolume);
        }
        if (hasMinLimitOrderVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, MinLimitOrderVolume);
        }
        if (hasVolumeMultiple) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, VolumeMultiple);
        }
        if (hasPriceTick) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, PriceTick);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeStringSize(16, CreateDate);
        }
        if (hasOpenDate) {
          size += pb::CodedOutputStream.ComputeStringSize(17, OpenDate);
        }
        if (hasExpireDate) {
          size += pb::CodedOutputStream.ComputeStringSize(18, ExpireDate);
        }
        if (hasStartDelivDate) {
          size += pb::CodedOutputStream.ComputeStringSize(19, StartDelivDate);
        }
        if (hasEndDelivDate) {
          size += pb::CodedOutputStream.ComputeStringSize(20, EndDelivDate);
        }
        if (hasInstLifePhase) {
          size += pb::CodedOutputStream.ComputeStringSize(21, InstLifePhase);
        }
        if (hasIsTrading) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, IsTrading);
        }
        if (hasPositionType) {
          size += pb::CodedOutputStream.ComputeStringSize(23, PositionType);
        }
        if (hasPositionDateType) {
          size += pb::CodedOutputStream.ComputeStringSize(24, PositionDateType);
        }
        if (hasLongMarginRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, LongMarginRatio);
        }
        if (hasShortMarginRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, ShortMarginRatio);
        }
        if (hasMaxMarginSideAlgorithm) {
          size += pb::CodedOutputStream.ComputeStringSize(27, MaxMarginSideAlgorithm);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryRspInstrumentInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspInstrumentInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryRspInstrumentInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryRspInstrumentInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryRspInstrumentInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryRspInstrumentInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryRspInstrumentInfo result;
      
      private PBMsgQueryRspInstrumentInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryRspInstrumentInfo original = result;
          result = new PBMsgQueryRspInstrumentInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryRspInstrumentInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryRspInstrumentInfo.Descriptor; }
      }
      
      public override PBMsgQueryRspInstrumentInfo DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryRspInstrumentInfo.DefaultInstance; }
      }
      
      public override PBMsgQueryRspInstrumentInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryRspInstrumentInfo) {
          return MergeFrom((PBMsgQueryRspInstrumentInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryRspInstrumentInfo other) {
        if (other == global::PBMsgTrader.PBMsgQueryRspInstrumentInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasInstrumentName) {
          InstrumentName = other.InstrumentName;
        }
        if (other.HasExchangeInstID) {
          ExchangeInstID = other.ExchangeInstID;
        }
        if (other.HasProductID) {
          ProductID = other.ProductID;
        }
        if (other.HasProductClass) {
          ProductClass = other.ProductClass;
        }
        if (other.HasDeliveryYear) {
          DeliveryYear = other.DeliveryYear;
        }
        if (other.HasDeliveryMonth) {
          DeliveryMonth = other.DeliveryMonth;
        }
        if (other.HasMaxMarketOrderVolume) {
          MaxMarketOrderVolume = other.MaxMarketOrderVolume;
        }
        if (other.HasMinMarketOrderVolume) {
          MinMarketOrderVolume = other.MinMarketOrderVolume;
        }
        if (other.HasMaxLimitOrderVolume) {
          MaxLimitOrderVolume = other.MaxLimitOrderVolume;
        }
        if (other.HasMinLimitOrderVolume) {
          MinLimitOrderVolume = other.MinLimitOrderVolume;
        }
        if (other.HasVolumeMultiple) {
          VolumeMultiple = other.VolumeMultiple;
        }
        if (other.HasPriceTick) {
          PriceTick = other.PriceTick;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasOpenDate) {
          OpenDate = other.OpenDate;
        }
        if (other.HasExpireDate) {
          ExpireDate = other.ExpireDate;
        }
        if (other.HasStartDelivDate) {
          StartDelivDate = other.StartDelivDate;
        }
        if (other.HasEndDelivDate) {
          EndDelivDate = other.EndDelivDate;
        }
        if (other.HasInstLifePhase) {
          InstLifePhase = other.InstLifePhase;
        }
        if (other.HasIsTrading) {
          IsTrading = other.IsTrading;
        }
        if (other.HasPositionType) {
          PositionType = other.PositionType;
        }
        if (other.HasPositionDateType) {
          PositionDateType = other.PositionDateType;
        }
        if (other.HasLongMarginRatio) {
          LongMarginRatio = other.LongMarginRatio;
        }
        if (other.HasShortMarginRatio) {
          ShortMarginRatio = other.ShortMarginRatio;
        }
        if (other.HasMaxMarginSideAlgorithm) {
          MaxMarginSideAlgorithm = other.MaxMarginSideAlgorithm;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryRspInstrumentInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryRspInstrumentInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 26: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 34: {
              result.hasInstrumentName = input.ReadBytes(ref result.instrumentName_);
              break;
            }
            case 42: {
              result.hasExchangeInstID = input.ReadString(ref result.exchangeInstID_);
              break;
            }
            case 50: {
              result.hasProductID = input.ReadString(ref result.productID_);
              break;
            }
            case 58: {
              result.hasProductClass = input.ReadBytes(ref result.productClass_);
              break;
            }
            case 64: {
              result.hasDeliveryYear = input.ReadInt32(ref result.deliveryYear_);
              break;
            }
            case 72: {
              result.hasDeliveryMonth = input.ReadInt32(ref result.deliveryMonth_);
              break;
            }
            case 80: {
              result.hasMaxMarketOrderVolume = input.ReadInt32(ref result.maxMarketOrderVolume_);
              break;
            }
            case 88: {
              result.hasMinMarketOrderVolume = input.ReadInt32(ref result.minMarketOrderVolume_);
              break;
            }
            case 96: {
              result.hasMaxLimitOrderVolume = input.ReadInt32(ref result.maxLimitOrderVolume_);
              break;
            }
            case 104: {
              result.hasMinLimitOrderVolume = input.ReadInt32(ref result.minLimitOrderVolume_);
              break;
            }
            case 112: {
              result.hasVolumeMultiple = input.ReadInt32(ref result.volumeMultiple_);
              break;
            }
            case 120: {
              result.hasPriceTick = input.ReadInt32(ref result.priceTick_);
              break;
            }
            case 130: {
              result.hasCreateDate = input.ReadString(ref result.createDate_);
              break;
            }
            case 138: {
              result.hasOpenDate = input.ReadString(ref result.openDate_);
              break;
            }
            case 146: {
              result.hasExpireDate = input.ReadString(ref result.expireDate_);
              break;
            }
            case 154: {
              result.hasStartDelivDate = input.ReadString(ref result.startDelivDate_);
              break;
            }
            case 162: {
              result.hasEndDelivDate = input.ReadString(ref result.endDelivDate_);
              break;
            }
            case 170: {
              result.hasInstLifePhase = input.ReadString(ref result.instLifePhase_);
              break;
            }
            case 176: {
              result.hasIsTrading = input.ReadInt32(ref result.isTrading_);
              break;
            }
            case 186: {
              result.hasPositionType = input.ReadString(ref result.positionType_);
              break;
            }
            case 194: {
              result.hasPositionDateType = input.ReadString(ref result.positionDateType_);
              break;
            }
            case 201: {
              result.hasLongMarginRatio = input.ReadDouble(ref result.longMarginRatio_);
              break;
            }
            case 209: {
              result.hasShortMarginRatio = input.ReadDouble(ref result.shortMarginRatio_);
              break;
            }
            case 218: {
              result.hasMaxMarginSideAlgorithm = input.ReadString(ref result.maxMarginSideAlgorithm_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasInstrumentName {
        get { return result.hasInstrumentName; }
      }
      public pb::ByteString InstrumentName {
        get { return result.InstrumentName; }
        set { SetInstrumentName(value); }
      }
      public Builder SetInstrumentName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentName = true;
        result.instrumentName_ = value;
        return this;
      }
      public Builder ClearInstrumentName() {
        PrepareBuilder();
        result.hasInstrumentName = false;
        result.instrumentName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExchangeInstID {
        get { return result.hasExchangeInstID; }
      }
      public string ExchangeInstID {
        get { return result.ExchangeInstID; }
        set { SetExchangeInstID(value); }
      }
      public Builder SetExchangeInstID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeInstID = true;
        result.exchangeInstID_ = value;
        return this;
      }
      public Builder ClearExchangeInstID() {
        PrepareBuilder();
        result.hasExchangeInstID = false;
        result.exchangeInstID_ = "";
        return this;
      }
      
      public bool HasProductID {
        get { return result.hasProductID; }
      }
      public string ProductID {
        get { return result.ProductID; }
        set { SetProductID(value); }
      }
      public Builder SetProductID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProductID = true;
        result.productID_ = value;
        return this;
      }
      public Builder ClearProductID() {
        PrepareBuilder();
        result.hasProductID = false;
        result.productID_ = "";
        return this;
      }
      
      public bool HasProductClass {
        get { return result.hasProductClass; }
      }
      public pb::ByteString ProductClass {
        get { return result.ProductClass; }
        set { SetProductClass(value); }
      }
      public Builder SetProductClass(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProductClass = true;
        result.productClass_ = value;
        return this;
      }
      public Builder ClearProductClass() {
        PrepareBuilder();
        result.hasProductClass = false;
        result.productClass_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasDeliveryYear {
        get { return result.hasDeliveryYear; }
      }
      public int DeliveryYear {
        get { return result.DeliveryYear; }
        set { SetDeliveryYear(value); }
      }
      public Builder SetDeliveryYear(int value) {
        PrepareBuilder();
        result.hasDeliveryYear = true;
        result.deliveryYear_ = value;
        return this;
      }
      public Builder ClearDeliveryYear() {
        PrepareBuilder();
        result.hasDeliveryYear = false;
        result.deliveryYear_ = 0;
        return this;
      }
      
      public bool HasDeliveryMonth {
        get { return result.hasDeliveryMonth; }
      }
      public int DeliveryMonth {
        get { return result.DeliveryMonth; }
        set { SetDeliveryMonth(value); }
      }
      public Builder SetDeliveryMonth(int value) {
        PrepareBuilder();
        result.hasDeliveryMonth = true;
        result.deliveryMonth_ = value;
        return this;
      }
      public Builder ClearDeliveryMonth() {
        PrepareBuilder();
        result.hasDeliveryMonth = false;
        result.deliveryMonth_ = 0;
        return this;
      }
      
      public bool HasMaxMarketOrderVolume {
        get { return result.hasMaxMarketOrderVolume; }
      }
      public int MaxMarketOrderVolume {
        get { return result.MaxMarketOrderVolume; }
        set { SetMaxMarketOrderVolume(value); }
      }
      public Builder SetMaxMarketOrderVolume(int value) {
        PrepareBuilder();
        result.hasMaxMarketOrderVolume = true;
        result.maxMarketOrderVolume_ = value;
        return this;
      }
      public Builder ClearMaxMarketOrderVolume() {
        PrepareBuilder();
        result.hasMaxMarketOrderVolume = false;
        result.maxMarketOrderVolume_ = 0;
        return this;
      }
      
      public bool HasMinMarketOrderVolume {
        get { return result.hasMinMarketOrderVolume; }
      }
      public int MinMarketOrderVolume {
        get { return result.MinMarketOrderVolume; }
        set { SetMinMarketOrderVolume(value); }
      }
      public Builder SetMinMarketOrderVolume(int value) {
        PrepareBuilder();
        result.hasMinMarketOrderVolume = true;
        result.minMarketOrderVolume_ = value;
        return this;
      }
      public Builder ClearMinMarketOrderVolume() {
        PrepareBuilder();
        result.hasMinMarketOrderVolume = false;
        result.minMarketOrderVolume_ = 0;
        return this;
      }
      
      public bool HasMaxLimitOrderVolume {
        get { return result.hasMaxLimitOrderVolume; }
      }
      public int MaxLimitOrderVolume {
        get { return result.MaxLimitOrderVolume; }
        set { SetMaxLimitOrderVolume(value); }
      }
      public Builder SetMaxLimitOrderVolume(int value) {
        PrepareBuilder();
        result.hasMaxLimitOrderVolume = true;
        result.maxLimitOrderVolume_ = value;
        return this;
      }
      public Builder ClearMaxLimitOrderVolume() {
        PrepareBuilder();
        result.hasMaxLimitOrderVolume = false;
        result.maxLimitOrderVolume_ = 0;
        return this;
      }
      
      public bool HasMinLimitOrderVolume {
        get { return result.hasMinLimitOrderVolume; }
      }
      public int MinLimitOrderVolume {
        get { return result.MinLimitOrderVolume; }
        set { SetMinLimitOrderVolume(value); }
      }
      public Builder SetMinLimitOrderVolume(int value) {
        PrepareBuilder();
        result.hasMinLimitOrderVolume = true;
        result.minLimitOrderVolume_ = value;
        return this;
      }
      public Builder ClearMinLimitOrderVolume() {
        PrepareBuilder();
        result.hasMinLimitOrderVolume = false;
        result.minLimitOrderVolume_ = 0;
        return this;
      }
      
      public bool HasVolumeMultiple {
        get { return result.hasVolumeMultiple; }
      }
      public int VolumeMultiple {
        get { return result.VolumeMultiple; }
        set { SetVolumeMultiple(value); }
      }
      public Builder SetVolumeMultiple(int value) {
        PrepareBuilder();
        result.hasVolumeMultiple = true;
        result.volumeMultiple_ = value;
        return this;
      }
      public Builder ClearVolumeMultiple() {
        PrepareBuilder();
        result.hasVolumeMultiple = false;
        result.volumeMultiple_ = 0;
        return this;
      }
      
      public bool HasPriceTick {
        get { return result.hasPriceTick; }
      }
      public int PriceTick {
        get { return result.PriceTick; }
        set { SetPriceTick(value); }
      }
      public Builder SetPriceTick(int value) {
        PrepareBuilder();
        result.hasPriceTick = true;
        result.priceTick_ = value;
        return this;
      }
      public Builder ClearPriceTick() {
        PrepareBuilder();
        result.hasPriceTick = false;
        result.priceTick_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public string CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = "";
        return this;
      }
      
      public bool HasOpenDate {
        get { return result.hasOpenDate; }
      }
      public string OpenDate {
        get { return result.OpenDate; }
        set { SetOpenDate(value); }
      }
      public Builder SetOpenDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpenDate = true;
        result.openDate_ = value;
        return this;
      }
      public Builder ClearOpenDate() {
        PrepareBuilder();
        result.hasOpenDate = false;
        result.openDate_ = "";
        return this;
      }
      
      public bool HasExpireDate {
        get { return result.hasExpireDate; }
      }
      public string ExpireDate {
        get { return result.ExpireDate; }
        set { SetExpireDate(value); }
      }
      public Builder SetExpireDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExpireDate = true;
        result.expireDate_ = value;
        return this;
      }
      public Builder ClearExpireDate() {
        PrepareBuilder();
        result.hasExpireDate = false;
        result.expireDate_ = "";
        return this;
      }
      
      public bool HasStartDelivDate {
        get { return result.hasStartDelivDate; }
      }
      public string StartDelivDate {
        get { return result.StartDelivDate; }
        set { SetStartDelivDate(value); }
      }
      public Builder SetStartDelivDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStartDelivDate = true;
        result.startDelivDate_ = value;
        return this;
      }
      public Builder ClearStartDelivDate() {
        PrepareBuilder();
        result.hasStartDelivDate = false;
        result.startDelivDate_ = "";
        return this;
      }
      
      public bool HasEndDelivDate {
        get { return result.hasEndDelivDate; }
      }
      public string EndDelivDate {
        get { return result.EndDelivDate; }
        set { SetEndDelivDate(value); }
      }
      public Builder SetEndDelivDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndDelivDate = true;
        result.endDelivDate_ = value;
        return this;
      }
      public Builder ClearEndDelivDate() {
        PrepareBuilder();
        result.hasEndDelivDate = false;
        result.endDelivDate_ = "";
        return this;
      }
      
      public bool HasInstLifePhase {
        get { return result.hasInstLifePhase; }
      }
      public string InstLifePhase {
        get { return result.InstLifePhase; }
        set { SetInstLifePhase(value); }
      }
      public Builder SetInstLifePhase(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstLifePhase = true;
        result.instLifePhase_ = value;
        return this;
      }
      public Builder ClearInstLifePhase() {
        PrepareBuilder();
        result.hasInstLifePhase = false;
        result.instLifePhase_ = "";
        return this;
      }
      
      public bool HasIsTrading {
        get { return result.hasIsTrading; }
      }
      public int IsTrading {
        get { return result.IsTrading; }
        set { SetIsTrading(value); }
      }
      public Builder SetIsTrading(int value) {
        PrepareBuilder();
        result.hasIsTrading = true;
        result.isTrading_ = value;
        return this;
      }
      public Builder ClearIsTrading() {
        PrepareBuilder();
        result.hasIsTrading = false;
        result.isTrading_ = 0;
        return this;
      }
      
      public bool HasPositionType {
        get { return result.hasPositionType; }
      }
      public string PositionType {
        get { return result.PositionType; }
        set { SetPositionType(value); }
      }
      public Builder SetPositionType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionType = true;
        result.positionType_ = value;
        return this;
      }
      public Builder ClearPositionType() {
        PrepareBuilder();
        result.hasPositionType = false;
        result.positionType_ = "";
        return this;
      }
      
      public bool HasPositionDateType {
        get { return result.hasPositionDateType; }
      }
      public string PositionDateType {
        get { return result.PositionDateType; }
        set { SetPositionDateType(value); }
      }
      public Builder SetPositionDateType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionDateType = true;
        result.positionDateType_ = value;
        return this;
      }
      public Builder ClearPositionDateType() {
        PrepareBuilder();
        result.hasPositionDateType = false;
        result.positionDateType_ = "";
        return this;
      }
      
      public bool HasLongMarginRatio {
        get { return result.hasLongMarginRatio; }
      }
      public double LongMarginRatio {
        get { return result.LongMarginRatio; }
        set { SetLongMarginRatio(value); }
      }
      public Builder SetLongMarginRatio(double value) {
        PrepareBuilder();
        result.hasLongMarginRatio = true;
        result.longMarginRatio_ = value;
        return this;
      }
      public Builder ClearLongMarginRatio() {
        PrepareBuilder();
        result.hasLongMarginRatio = false;
        result.longMarginRatio_ = 0D;
        return this;
      }
      
      public bool HasShortMarginRatio {
        get { return result.hasShortMarginRatio; }
      }
      public double ShortMarginRatio {
        get { return result.ShortMarginRatio; }
        set { SetShortMarginRatio(value); }
      }
      public Builder SetShortMarginRatio(double value) {
        PrepareBuilder();
        result.hasShortMarginRatio = true;
        result.shortMarginRatio_ = value;
        return this;
      }
      public Builder ClearShortMarginRatio() {
        PrepareBuilder();
        result.hasShortMarginRatio = false;
        result.shortMarginRatio_ = 0D;
        return this;
      }
      
      public bool HasMaxMarginSideAlgorithm {
        get { return result.hasMaxMarginSideAlgorithm; }
      }
      public string MaxMarginSideAlgorithm {
        get { return result.MaxMarginSideAlgorithm; }
        set { SetMaxMarginSideAlgorithm(value); }
      }
      public Builder SetMaxMarginSideAlgorithm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxMarginSideAlgorithm = true;
        result.maxMarginSideAlgorithm_ = value;
        return this;
      }
      public Builder ClearMaxMarginSideAlgorithm() {
        PrepareBuilder();
        result.hasMaxMarginSideAlgorithm = false;
        result.maxMarginSideAlgorithm_ = "";
        return this;
      }
    }
    static PBMsgQueryRspInstrumentInfo() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqOrder : pb::GeneratedMessage<PBMsgQueryReqOrder, PBMsgQueryReqOrder.Builder> {
    private PBMsgQueryReqOrder() { }
    private static readonly PBMsgQueryReqOrder defaultInstance = new PBMsgQueryReqOrder().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqOrderFieldNames = new string[] { "BrokerID", "ExchangeID", "InsertTimeEnd", "InsertTimeStart", "InstrumentID", "InvestorID", "OrderSysID", "SettlementID", "TradingDay" };
    private static readonly uint[] _pBMsgQueryReqOrderFieldTags = new uint[] { 18, 42, 66, 58, 34, 26, 50, 80, 74 };
    public static PBMsgQueryReqOrder DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqOrder DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqOrder ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqOrder__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqOrder, PBMsgQueryReqOrder.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqOrder__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int ExchangeIDFieldNumber = 5;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int OrderSysIDFieldNumber = 6;
    private bool hasOrderSysID;
    private string orderSysID_ = "";
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public string OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int InsertTimeStartFieldNumber = 7;
    private bool hasInsertTimeStart;
    private string insertTimeStart_ = "";
    public bool HasInsertTimeStart {
      get { return hasInsertTimeStart; }
    }
    public string InsertTimeStart {
      get { return insertTimeStart_; }
    }
    
    public const int InsertTimeEndFieldNumber = 8;
    private bool hasInsertTimeEnd;
    private string insertTimeEnd_ = "";
    public bool HasInsertTimeEnd {
      get { return hasInsertTimeEnd; }
    }
    public string InsertTimeEnd {
      get { return insertTimeEnd_; }
    }
    
    public const int TradingDayFieldNumber = 9;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 10;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqOrderFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[5], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[4], InstrumentID);
      }
      if (hasExchangeID) {
        output.WriteString(5, field_names[1], ExchangeID);
      }
      if (hasOrderSysID) {
        output.WriteString(6, field_names[6], OrderSysID);
      }
      if (hasInsertTimeStart) {
        output.WriteString(7, field_names[3], InsertTimeStart);
      }
      if (hasInsertTimeEnd) {
        output.WriteString(8, field_names[2], InsertTimeEnd);
      }
      if (hasTradingDay) {
        output.WriteString(9, field_names[8], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(10, field_names[7], SettlementID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ExchangeID);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, OrderSysID);
        }
        if (hasInsertTimeStart) {
          size += pb::CodedOutputStream.ComputeStringSize(7, InsertTimeStart);
        }
        if (hasInsertTimeEnd) {
          size += pb::CodedOutputStream.ComputeStringSize(8, InsertTimeEnd);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(9, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, SettlementID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqOrder ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqOrder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqOrder MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqOrder prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqOrder, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqOrder cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqOrder result;
      
      private PBMsgQueryReqOrder PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqOrder original = result;
          result = new PBMsgQueryReqOrder();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqOrder MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqOrder.Descriptor; }
      }
      
      public override PBMsgQueryReqOrder DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqOrder.DefaultInstance; }
      }
      
      public override PBMsgQueryReqOrder BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqOrder) {
          return MergeFrom((PBMsgQueryReqOrder) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqOrder other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqOrder.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasInsertTimeStart) {
          InsertTimeStart = other.InsertTimeStart;
        }
        if (other.HasInsertTimeEnd) {
          InsertTimeEnd = other.InsertTimeEnd;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqOrderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqOrderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 42: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 50: {
              result.hasOrderSysID = input.ReadString(ref result.orderSysID_);
              break;
            }
            case 58: {
              result.hasInsertTimeStart = input.ReadString(ref result.insertTimeStart_);
              break;
            }
            case 66: {
              result.hasInsertTimeEnd = input.ReadString(ref result.insertTimeEnd_);
              break;
            }
            case 74: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 80: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public string OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = "";
        return this;
      }
      
      public bool HasInsertTimeStart {
        get { return result.hasInsertTimeStart; }
      }
      public string InsertTimeStart {
        get { return result.InsertTimeStart; }
        set { SetInsertTimeStart(value); }
      }
      public Builder SetInsertTimeStart(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInsertTimeStart = true;
        result.insertTimeStart_ = value;
        return this;
      }
      public Builder ClearInsertTimeStart() {
        PrepareBuilder();
        result.hasInsertTimeStart = false;
        result.insertTimeStart_ = "";
        return this;
      }
      
      public bool HasInsertTimeEnd {
        get { return result.hasInsertTimeEnd; }
      }
      public string InsertTimeEnd {
        get { return result.InsertTimeEnd; }
        set { SetInsertTimeEnd(value); }
      }
      public Builder SetInsertTimeEnd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInsertTimeEnd = true;
        result.insertTimeEnd_ = value;
        return this;
      }
      public Builder ClearInsertTimeEnd() {
        PrepareBuilder();
        result.hasInsertTimeEnd = false;
        result.insertTimeEnd_ = "";
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
    }
    static PBMsgQueryReqOrder() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqTrade : pb::GeneratedMessage<PBMsgQueryReqTrade, PBMsgQueryReqTrade.Builder> {
    private PBMsgQueryReqTrade() { }
    private static readonly PBMsgQueryReqTrade defaultInstance = new PBMsgQueryReqTrade().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqTradeFieldNames = new string[] { "BrokerID", "ExchangeID", "InstrumentID", "InvestorID", "TradeID", "TradeTimeEnd", "TradeTimeStart" };
    private static readonly uint[] _pBMsgQueryReqTradeFieldTags = new uint[] { 18, 42, 34, 26, 50, 66, 58 };
    public static PBMsgQueryReqTrade DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqTrade DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqTrade ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqTrade__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqTrade, PBMsgQueryReqTrade.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqTrade__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int ExchangeIDFieldNumber = 5;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int TradeIDFieldNumber = 6;
    private bool hasTradeID;
    private string tradeID_ = "";
    public bool HasTradeID {
      get { return hasTradeID; }
    }
    public string TradeID {
      get { return tradeID_; }
    }
    
    public const int TradeTimeStartFieldNumber = 7;
    private bool hasTradeTimeStart;
    private string tradeTimeStart_ = "";
    public bool HasTradeTimeStart {
      get { return hasTradeTimeStart; }
    }
    public string TradeTimeStart {
      get { return tradeTimeStart_; }
    }
    
    public const int TradeTimeEndFieldNumber = 8;
    private bool hasTradeTimeEnd;
    private string tradeTimeEnd_ = "";
    public bool HasTradeTimeEnd {
      get { return hasTradeTimeEnd; }
    }
    public string TradeTimeEnd {
      get { return tradeTimeEnd_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqTradeFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[3], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[2], InstrumentID);
      }
      if (hasExchangeID) {
        output.WriteString(5, field_names[1], ExchangeID);
      }
      if (hasTradeID) {
        output.WriteString(6, field_names[4], TradeID);
      }
      if (hasTradeTimeStart) {
        output.WriteString(7, field_names[6], TradeTimeStart);
      }
      if (hasTradeTimeEnd) {
        output.WriteString(8, field_names[5], TradeTimeEnd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ExchangeID);
        }
        if (hasTradeID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, TradeID);
        }
        if (hasTradeTimeStart) {
          size += pb::CodedOutputStream.ComputeStringSize(7, TradeTimeStart);
        }
        if (hasTradeTimeEnd) {
          size += pb::CodedOutputStream.ComputeStringSize(8, TradeTimeEnd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqTrade ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqTrade ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqTrade MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqTrade prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqTrade, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqTrade cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqTrade result;
      
      private PBMsgQueryReqTrade PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqTrade original = result;
          result = new PBMsgQueryReqTrade();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqTrade MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqTrade.Descriptor; }
      }
      
      public override PBMsgQueryReqTrade DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqTrade.DefaultInstance; }
      }
      
      public override PBMsgQueryReqTrade BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqTrade) {
          return MergeFrom((PBMsgQueryReqTrade) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqTrade other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqTrade.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasTradeID) {
          TradeID = other.TradeID;
        }
        if (other.HasTradeTimeStart) {
          TradeTimeStart = other.TradeTimeStart;
        }
        if (other.HasTradeTimeEnd) {
          TradeTimeEnd = other.TradeTimeEnd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqTradeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqTradeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 42: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 50: {
              result.hasTradeID = input.ReadString(ref result.tradeID_);
              break;
            }
            case 58: {
              result.hasTradeTimeStart = input.ReadString(ref result.tradeTimeStart_);
              break;
            }
            case 66: {
              result.hasTradeTimeEnd = input.ReadString(ref result.tradeTimeEnd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasTradeID {
        get { return result.hasTradeID; }
      }
      public string TradeID {
        get { return result.TradeID; }
        set { SetTradeID(value); }
      }
      public Builder SetTradeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeID = true;
        result.tradeID_ = value;
        return this;
      }
      public Builder ClearTradeID() {
        PrepareBuilder();
        result.hasTradeID = false;
        result.tradeID_ = "";
        return this;
      }
      
      public bool HasTradeTimeStart {
        get { return result.hasTradeTimeStart; }
      }
      public string TradeTimeStart {
        get { return result.TradeTimeStart; }
        set { SetTradeTimeStart(value); }
      }
      public Builder SetTradeTimeStart(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeTimeStart = true;
        result.tradeTimeStart_ = value;
        return this;
      }
      public Builder ClearTradeTimeStart() {
        PrepareBuilder();
        result.hasTradeTimeStart = false;
        result.tradeTimeStart_ = "";
        return this;
      }
      
      public bool HasTradeTimeEnd {
        get { return result.hasTradeTimeEnd; }
      }
      public string TradeTimeEnd {
        get { return result.TradeTimeEnd; }
        set { SetTradeTimeEnd(value); }
      }
      public Builder SetTradeTimeEnd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeTimeEnd = true;
        result.tradeTimeEnd_ = value;
        return this;
      }
      public Builder ClearTradeTimeEnd() {
        PrepareBuilder();
        result.hasTradeTimeEnd = false;
        result.tradeTimeEnd_ = "";
        return this;
      }
    }
    static PBMsgQueryReqTrade() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqPosition : pb::GeneratedMessage<PBMsgQueryReqPosition, PBMsgQueryReqPosition.Builder> {
    private PBMsgQueryReqPosition() { }
    private static readonly PBMsgQueryReqPosition defaultInstance = new PBMsgQueryReqPosition().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqPositionFieldNames = new string[] { "BrokerID", "InstrumentID", "InvestorID" };
    private static readonly uint[] _pBMsgQueryReqPositionFieldTags = new uint[] { 18, 34, 26 };
    public static PBMsgQueryReqPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqPosition, PBMsgQueryReqPosition.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqPosition__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqPositionFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[2], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[1], InstrumentID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqPosition result;
      
      private PBMsgQueryReqPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqPosition original = result;
          result = new PBMsgQueryReqPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqPosition.Descriptor; }
      }
      
      public override PBMsgQueryReqPosition DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqPosition.DefaultInstance; }
      }
      
      public override PBMsgQueryReqPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqPosition) {
          return MergeFrom((PBMsgQueryReqPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqPosition other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
    }
    static PBMsgQueryReqPosition() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryRspPosition : pb::GeneratedMessage<PBMsgQueryRspPosition, PBMsgQueryRspPosition.Builder> {
    private PBMsgQueryRspPosition() { }
    private static readonly PBMsgQueryRspPosition defaultInstance = new PBMsgQueryRspPosition().MakeReadOnly();
    private static readonly string[] _pBMsgQueryRspPositionFieldNames = new string[] { "BrokerID", "CashIn", "CloseAmount", "CloseProfit", "CloseProfitByDate", "CloseProfitByTrade", "CloseVolume", "CombLongFrozen", "CombPosition", "CombShortFrozen", "Commission", "EOF", "ExchangeMargin", "FrozenCash", "FrozenCommission", "FrozenMargin", "HedgeFlag", "InstrumentID", "InvestorID", "LongFrozen", "LongFrozenAmount", "MarginRateByMoney", "MarginRateByVolume", "OpenAmount", "OpenCost", "OpenVolume", "PosiDirection", "Position", "PositionCost", "PositionDate", "PositionProfit", "PreMargin", "PreSettlementPrice", "SettlementID", "SettlementPrice", "ShortFrozen", "ShortFrozenAmount", "TodayPosition", "TradingDay", "UseMargin", "YdPosition" };
    private static readonly uint[] _pBMsgQueryRspPositionFieldTags = new uint[] { 26, 193, 137, 209, 297, 305, 120, 280, 272, 288, 201, 8, 265, 177, 185, 169, 50, 18, 34, 80, 97, 321, 329, 129, 257, 112, 42, 72, 145, 58, 217, 153, 225, 248, 233, 88, 105, 312, 242, 161, 64 };
    public static PBMsgQueryRspPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryRspPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryRspPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryRspPosition, PBMsgQueryRspPosition.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspPosition__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int InstrumentIDFieldNumber = 2;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int BrokerIDFieldNumber = 3;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 4;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int PosiDirectionFieldNumber = 5;
    private bool hasPosiDirection;
    private string posiDirection_ = "";
    public bool HasPosiDirection {
      get { return hasPosiDirection; }
    }
    public string PosiDirection {
      get { return posiDirection_; }
    }
    
    public const int HedgeFlagFieldNumber = 6;
    private bool hasHedgeFlag;
    private string hedgeFlag_ = "";
    public bool HasHedgeFlag {
      get { return hasHedgeFlag; }
    }
    public string HedgeFlag {
      get { return hedgeFlag_; }
    }
    
    public const int PositionDateFieldNumber = 7;
    private bool hasPositionDate;
    private string positionDate_ = "";
    public bool HasPositionDate {
      get { return hasPositionDate; }
    }
    public string PositionDate {
      get { return positionDate_; }
    }
    
    public const int YdPositionFieldNumber = 8;
    private bool hasYdPosition;
    private int ydPosition_;
    public bool HasYdPosition {
      get { return hasYdPosition; }
    }
    public int YdPosition {
      get { return ydPosition_; }
    }
    
    public const int PositionFieldNumber = 9;
    private bool hasPosition;
    private int position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public int Position {
      get { return position_; }
    }
    
    public const int LongFrozenFieldNumber = 10;
    private bool hasLongFrozen;
    private int longFrozen_;
    public bool HasLongFrozen {
      get { return hasLongFrozen; }
    }
    public int LongFrozen {
      get { return longFrozen_; }
    }
    
    public const int ShortFrozenFieldNumber = 11;
    private bool hasShortFrozen;
    private int shortFrozen_;
    public bool HasShortFrozen {
      get { return hasShortFrozen; }
    }
    public int ShortFrozen {
      get { return shortFrozen_; }
    }
    
    public const int LongFrozenAmountFieldNumber = 12;
    private bool hasLongFrozenAmount;
    private double longFrozenAmount_;
    public bool HasLongFrozenAmount {
      get { return hasLongFrozenAmount; }
    }
    public double LongFrozenAmount {
      get { return longFrozenAmount_; }
    }
    
    public const int ShortFrozenAmountFieldNumber = 13;
    private bool hasShortFrozenAmount;
    private double shortFrozenAmount_;
    public bool HasShortFrozenAmount {
      get { return hasShortFrozenAmount; }
    }
    public double ShortFrozenAmount {
      get { return shortFrozenAmount_; }
    }
    
    public const int OpenVolumeFieldNumber = 14;
    private bool hasOpenVolume;
    private int openVolume_;
    public bool HasOpenVolume {
      get { return hasOpenVolume; }
    }
    public int OpenVolume {
      get { return openVolume_; }
    }
    
    public const int CloseVolumeFieldNumber = 15;
    private bool hasCloseVolume;
    private int closeVolume_;
    public bool HasCloseVolume {
      get { return hasCloseVolume; }
    }
    public int CloseVolume {
      get { return closeVolume_; }
    }
    
    public const int OpenAmountFieldNumber = 16;
    private bool hasOpenAmount;
    private double openAmount_;
    public bool HasOpenAmount {
      get { return hasOpenAmount; }
    }
    public double OpenAmount {
      get { return openAmount_; }
    }
    
    public const int CloseAmountFieldNumber = 17;
    private bool hasCloseAmount;
    private double closeAmount_;
    public bool HasCloseAmount {
      get { return hasCloseAmount; }
    }
    public double CloseAmount {
      get { return closeAmount_; }
    }
    
    public const int PositionCostFieldNumber = 18;
    private bool hasPositionCost;
    private double positionCost_;
    public bool HasPositionCost {
      get { return hasPositionCost; }
    }
    public double PositionCost {
      get { return positionCost_; }
    }
    
    public const int PreMarginFieldNumber = 19;
    private bool hasPreMargin;
    private double preMargin_;
    public bool HasPreMargin {
      get { return hasPreMargin; }
    }
    public double PreMargin {
      get { return preMargin_; }
    }
    
    public const int UseMarginFieldNumber = 20;
    private bool hasUseMargin;
    private double useMargin_;
    public bool HasUseMargin {
      get { return hasUseMargin; }
    }
    public double UseMargin {
      get { return useMargin_; }
    }
    
    public const int FrozenMarginFieldNumber = 21;
    private bool hasFrozenMargin;
    private double frozenMargin_;
    public bool HasFrozenMargin {
      get { return hasFrozenMargin; }
    }
    public double FrozenMargin {
      get { return frozenMargin_; }
    }
    
    public const int FrozenCashFieldNumber = 22;
    private bool hasFrozenCash;
    private double frozenCash_;
    public bool HasFrozenCash {
      get { return hasFrozenCash; }
    }
    public double FrozenCash {
      get { return frozenCash_; }
    }
    
    public const int FrozenCommissionFieldNumber = 23;
    private bool hasFrozenCommission;
    private double frozenCommission_;
    public bool HasFrozenCommission {
      get { return hasFrozenCommission; }
    }
    public double FrozenCommission {
      get { return frozenCommission_; }
    }
    
    public const int CashInFieldNumber = 24;
    private bool hasCashIn;
    private double cashIn_;
    public bool HasCashIn {
      get { return hasCashIn; }
    }
    public double CashIn {
      get { return cashIn_; }
    }
    
    public const int CommissionFieldNumber = 25;
    private bool hasCommission;
    private double commission_;
    public bool HasCommission {
      get { return hasCommission; }
    }
    public double Commission {
      get { return commission_; }
    }
    
    public const int CloseProfitFieldNumber = 26;
    private bool hasCloseProfit;
    private double closeProfit_;
    public bool HasCloseProfit {
      get { return hasCloseProfit; }
    }
    public double CloseProfit {
      get { return closeProfit_; }
    }
    
    public const int PositionProfitFieldNumber = 27;
    private bool hasPositionProfit;
    private double positionProfit_;
    public bool HasPositionProfit {
      get { return hasPositionProfit; }
    }
    public double PositionProfit {
      get { return positionProfit_; }
    }
    
    public const int PreSettlementPriceFieldNumber = 28;
    private bool hasPreSettlementPrice;
    private double preSettlementPrice_;
    public bool HasPreSettlementPrice {
      get { return hasPreSettlementPrice; }
    }
    public double PreSettlementPrice {
      get { return preSettlementPrice_; }
    }
    
    public const int SettlementPriceFieldNumber = 29;
    private bool hasSettlementPrice;
    private double settlementPrice_;
    public bool HasSettlementPrice {
      get { return hasSettlementPrice; }
    }
    public double SettlementPrice {
      get { return settlementPrice_; }
    }
    
    public const int TradingDayFieldNumber = 30;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 31;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public const int OpenCostFieldNumber = 32;
    private bool hasOpenCost;
    private double openCost_;
    public bool HasOpenCost {
      get { return hasOpenCost; }
    }
    public double OpenCost {
      get { return openCost_; }
    }
    
    public const int ExchangeMarginFieldNumber = 33;
    private bool hasExchangeMargin;
    private double exchangeMargin_;
    public bool HasExchangeMargin {
      get { return hasExchangeMargin; }
    }
    public double ExchangeMargin {
      get { return exchangeMargin_; }
    }
    
    public const int CombPositionFieldNumber = 34;
    private bool hasCombPosition;
    private int combPosition_;
    public bool HasCombPosition {
      get { return hasCombPosition; }
    }
    public int CombPosition {
      get { return combPosition_; }
    }
    
    public const int CombLongFrozenFieldNumber = 35;
    private bool hasCombLongFrozen;
    private int combLongFrozen_;
    public bool HasCombLongFrozen {
      get { return hasCombLongFrozen; }
    }
    public int CombLongFrozen {
      get { return combLongFrozen_; }
    }
    
    public const int CombShortFrozenFieldNumber = 36;
    private bool hasCombShortFrozen;
    private int combShortFrozen_;
    public bool HasCombShortFrozen {
      get { return hasCombShortFrozen; }
    }
    public int CombShortFrozen {
      get { return combShortFrozen_; }
    }
    
    public const int CloseProfitByDateFieldNumber = 37;
    private bool hasCloseProfitByDate;
    private double closeProfitByDate_;
    public bool HasCloseProfitByDate {
      get { return hasCloseProfitByDate; }
    }
    public double CloseProfitByDate {
      get { return closeProfitByDate_; }
    }
    
    public const int CloseProfitByTradeFieldNumber = 38;
    private bool hasCloseProfitByTrade;
    private double closeProfitByTrade_;
    public bool HasCloseProfitByTrade {
      get { return hasCloseProfitByTrade; }
    }
    public double CloseProfitByTrade {
      get { return closeProfitByTrade_; }
    }
    
    public const int TodayPositionFieldNumber = 39;
    private bool hasTodayPosition;
    private int todayPosition_;
    public bool HasTodayPosition {
      get { return hasTodayPosition; }
    }
    public int TodayPosition {
      get { return todayPosition_; }
    }
    
    public const int MarginRateByMoneyFieldNumber = 40;
    private bool hasMarginRateByMoney;
    private double marginRateByMoney_;
    public bool HasMarginRateByMoney {
      get { return hasMarginRateByMoney; }
    }
    public double MarginRateByMoney {
      get { return marginRateByMoney_; }
    }
    
    public const int MarginRateByVolumeFieldNumber = 41;
    private bool hasMarginRateByVolume;
    private double marginRateByVolume_;
    public bool HasMarginRateByVolume {
      get { return hasMarginRateByVolume; }
    }
    public double MarginRateByVolume {
      get { return marginRateByVolume_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryRspPositionFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[11], EOF);
      }
      if (hasInstrumentID) {
        output.WriteString(2, field_names[17], InstrumentID);
      }
      if (hasBrokerID) {
        output.WriteString(3, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(4, field_names[18], InvestorID);
      }
      if (hasPosiDirection) {
        output.WriteString(5, field_names[26], PosiDirection);
      }
      if (hasHedgeFlag) {
        output.WriteString(6, field_names[16], HedgeFlag);
      }
      if (hasPositionDate) {
        output.WriteString(7, field_names[29], PositionDate);
      }
      if (hasYdPosition) {
        output.WriteInt32(8, field_names[40], YdPosition);
      }
      if (hasPosition) {
        output.WriteInt32(9, field_names[27], Position);
      }
      if (hasLongFrozen) {
        output.WriteInt32(10, field_names[19], LongFrozen);
      }
      if (hasShortFrozen) {
        output.WriteInt32(11, field_names[35], ShortFrozen);
      }
      if (hasLongFrozenAmount) {
        output.WriteDouble(12, field_names[20], LongFrozenAmount);
      }
      if (hasShortFrozenAmount) {
        output.WriteDouble(13, field_names[36], ShortFrozenAmount);
      }
      if (hasOpenVolume) {
        output.WriteInt32(14, field_names[25], OpenVolume);
      }
      if (hasCloseVolume) {
        output.WriteInt32(15, field_names[6], CloseVolume);
      }
      if (hasOpenAmount) {
        output.WriteDouble(16, field_names[23], OpenAmount);
      }
      if (hasCloseAmount) {
        output.WriteDouble(17, field_names[2], CloseAmount);
      }
      if (hasPositionCost) {
        output.WriteDouble(18, field_names[28], PositionCost);
      }
      if (hasPreMargin) {
        output.WriteDouble(19, field_names[31], PreMargin);
      }
      if (hasUseMargin) {
        output.WriteDouble(20, field_names[39], UseMargin);
      }
      if (hasFrozenMargin) {
        output.WriteDouble(21, field_names[15], FrozenMargin);
      }
      if (hasFrozenCash) {
        output.WriteDouble(22, field_names[13], FrozenCash);
      }
      if (hasFrozenCommission) {
        output.WriteDouble(23, field_names[14], FrozenCommission);
      }
      if (hasCashIn) {
        output.WriteDouble(24, field_names[1], CashIn);
      }
      if (hasCommission) {
        output.WriteDouble(25, field_names[10], Commission);
      }
      if (hasCloseProfit) {
        output.WriteDouble(26, field_names[3], CloseProfit);
      }
      if (hasPositionProfit) {
        output.WriteDouble(27, field_names[30], PositionProfit);
      }
      if (hasPreSettlementPrice) {
        output.WriteDouble(28, field_names[32], PreSettlementPrice);
      }
      if (hasSettlementPrice) {
        output.WriteDouble(29, field_names[34], SettlementPrice);
      }
      if (hasTradingDay) {
        output.WriteString(30, field_names[38], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(31, field_names[33], SettlementID);
      }
      if (hasOpenCost) {
        output.WriteDouble(32, field_names[24], OpenCost);
      }
      if (hasExchangeMargin) {
        output.WriteDouble(33, field_names[12], ExchangeMargin);
      }
      if (hasCombPosition) {
        output.WriteInt32(34, field_names[8], CombPosition);
      }
      if (hasCombLongFrozen) {
        output.WriteInt32(35, field_names[7], CombLongFrozen);
      }
      if (hasCombShortFrozen) {
        output.WriteInt32(36, field_names[9], CombShortFrozen);
      }
      if (hasCloseProfitByDate) {
        output.WriteDouble(37, field_names[4], CloseProfitByDate);
      }
      if (hasCloseProfitByTrade) {
        output.WriteDouble(38, field_names[5], CloseProfitByTrade);
      }
      if (hasTodayPosition) {
        output.WriteInt32(39, field_names[37], TodayPosition);
      }
      if (hasMarginRateByMoney) {
        output.WriteDouble(40, field_names[21], MarginRateByMoney);
      }
      if (hasMarginRateByVolume) {
        output.WriteDouble(41, field_names[22], MarginRateByVolume);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentID);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InvestorID);
        }
        if (hasPosiDirection) {
          size += pb::CodedOutputStream.ComputeStringSize(5, PosiDirection);
        }
        if (hasHedgeFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(6, HedgeFlag);
        }
        if (hasPositionDate) {
          size += pb::CodedOutputStream.ComputeStringSize(7, PositionDate);
        }
        if (hasYdPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, YdPosition);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Position);
        }
        if (hasLongFrozen) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, LongFrozen);
        }
        if (hasShortFrozen) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, ShortFrozen);
        }
        if (hasLongFrozenAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, LongFrozenAmount);
        }
        if (hasShortFrozenAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, ShortFrozenAmount);
        }
        if (hasOpenVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, OpenVolume);
        }
        if (hasCloseVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, CloseVolume);
        }
        if (hasOpenAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, OpenAmount);
        }
        if (hasCloseAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, CloseAmount);
        }
        if (hasPositionCost) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, PositionCost);
        }
        if (hasPreMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, PreMargin);
        }
        if (hasUseMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, UseMargin);
        }
        if (hasFrozenMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, FrozenMargin);
        }
        if (hasFrozenCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, FrozenCash);
        }
        if (hasFrozenCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, FrozenCommission);
        }
        if (hasCashIn) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, CashIn);
        }
        if (hasCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, Commission);
        }
        if (hasCloseProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, CloseProfit);
        }
        if (hasPositionProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, PositionProfit);
        }
        if (hasPreSettlementPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, PreSettlementPrice);
        }
        if (hasSettlementPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, SettlementPrice);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(30, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, SettlementID);
        }
        if (hasOpenCost) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, OpenCost);
        }
        if (hasExchangeMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, ExchangeMargin);
        }
        if (hasCombPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, CombPosition);
        }
        if (hasCombLongFrozen) {
          size += pb::CodedOutputStream.ComputeInt32Size(35, CombLongFrozen);
        }
        if (hasCombShortFrozen) {
          size += pb::CodedOutputStream.ComputeInt32Size(36, CombShortFrozen);
        }
        if (hasCloseProfitByDate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(37, CloseProfitByDate);
        }
        if (hasCloseProfitByTrade) {
          size += pb::CodedOutputStream.ComputeDoubleSize(38, CloseProfitByTrade);
        }
        if (hasTodayPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(39, TodayPosition);
        }
        if (hasMarginRateByMoney) {
          size += pb::CodedOutputStream.ComputeDoubleSize(40, MarginRateByMoney);
        }
        if (hasMarginRateByVolume) {
          size += pb::CodedOutputStream.ComputeDoubleSize(41, MarginRateByVolume);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryRspPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryRspPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryRspPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryRspPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryRspPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryRspPosition result;
      
      private PBMsgQueryRspPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryRspPosition original = result;
          result = new PBMsgQueryRspPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryRspPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryRspPosition.Descriptor; }
      }
      
      public override PBMsgQueryRspPosition DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryRspPosition.DefaultInstance; }
      }
      
      public override PBMsgQueryRspPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryRspPosition) {
          return MergeFrom((PBMsgQueryRspPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryRspPosition other) {
        if (other == global::PBMsgTrader.PBMsgQueryRspPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasPosiDirection) {
          PosiDirection = other.PosiDirection;
        }
        if (other.HasHedgeFlag) {
          HedgeFlag = other.HedgeFlag;
        }
        if (other.HasPositionDate) {
          PositionDate = other.PositionDate;
        }
        if (other.HasYdPosition) {
          YdPosition = other.YdPosition;
        }
        if (other.HasPosition) {
          Position = other.Position;
        }
        if (other.HasLongFrozen) {
          LongFrozen = other.LongFrozen;
        }
        if (other.HasShortFrozen) {
          ShortFrozen = other.ShortFrozen;
        }
        if (other.HasLongFrozenAmount) {
          LongFrozenAmount = other.LongFrozenAmount;
        }
        if (other.HasShortFrozenAmount) {
          ShortFrozenAmount = other.ShortFrozenAmount;
        }
        if (other.HasOpenVolume) {
          OpenVolume = other.OpenVolume;
        }
        if (other.HasCloseVolume) {
          CloseVolume = other.CloseVolume;
        }
        if (other.HasOpenAmount) {
          OpenAmount = other.OpenAmount;
        }
        if (other.HasCloseAmount) {
          CloseAmount = other.CloseAmount;
        }
        if (other.HasPositionCost) {
          PositionCost = other.PositionCost;
        }
        if (other.HasPreMargin) {
          PreMargin = other.PreMargin;
        }
        if (other.HasUseMargin) {
          UseMargin = other.UseMargin;
        }
        if (other.HasFrozenMargin) {
          FrozenMargin = other.FrozenMargin;
        }
        if (other.HasFrozenCash) {
          FrozenCash = other.FrozenCash;
        }
        if (other.HasFrozenCommission) {
          FrozenCommission = other.FrozenCommission;
        }
        if (other.HasCashIn) {
          CashIn = other.CashIn;
        }
        if (other.HasCommission) {
          Commission = other.Commission;
        }
        if (other.HasCloseProfit) {
          CloseProfit = other.CloseProfit;
        }
        if (other.HasPositionProfit) {
          PositionProfit = other.PositionProfit;
        }
        if (other.HasPreSettlementPrice) {
          PreSettlementPrice = other.PreSettlementPrice;
        }
        if (other.HasSettlementPrice) {
          SettlementPrice = other.SettlementPrice;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        if (other.HasOpenCost) {
          OpenCost = other.OpenCost;
        }
        if (other.HasExchangeMargin) {
          ExchangeMargin = other.ExchangeMargin;
        }
        if (other.HasCombPosition) {
          CombPosition = other.CombPosition;
        }
        if (other.HasCombLongFrozen) {
          CombLongFrozen = other.CombLongFrozen;
        }
        if (other.HasCombShortFrozen) {
          CombShortFrozen = other.CombShortFrozen;
        }
        if (other.HasCloseProfitByDate) {
          CloseProfitByDate = other.CloseProfitByDate;
        }
        if (other.HasCloseProfitByTrade) {
          CloseProfitByTrade = other.CloseProfitByTrade;
        }
        if (other.HasTodayPosition) {
          TodayPosition = other.TodayPosition;
        }
        if (other.HasMarginRateByMoney) {
          MarginRateByMoney = other.MarginRateByMoney;
        }
        if (other.HasMarginRateByVolume) {
          MarginRateByVolume = other.MarginRateByVolume;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryRspPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryRspPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 26: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 34: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 42: {
              result.hasPosiDirection = input.ReadString(ref result.posiDirection_);
              break;
            }
            case 50: {
              result.hasHedgeFlag = input.ReadString(ref result.hedgeFlag_);
              break;
            }
            case 58: {
              result.hasPositionDate = input.ReadString(ref result.positionDate_);
              break;
            }
            case 64: {
              result.hasYdPosition = input.ReadInt32(ref result.ydPosition_);
              break;
            }
            case 72: {
              result.hasPosition = input.ReadInt32(ref result.position_);
              break;
            }
            case 80: {
              result.hasLongFrozen = input.ReadInt32(ref result.longFrozen_);
              break;
            }
            case 88: {
              result.hasShortFrozen = input.ReadInt32(ref result.shortFrozen_);
              break;
            }
            case 97: {
              result.hasLongFrozenAmount = input.ReadDouble(ref result.longFrozenAmount_);
              break;
            }
            case 105: {
              result.hasShortFrozenAmount = input.ReadDouble(ref result.shortFrozenAmount_);
              break;
            }
            case 112: {
              result.hasOpenVolume = input.ReadInt32(ref result.openVolume_);
              break;
            }
            case 120: {
              result.hasCloseVolume = input.ReadInt32(ref result.closeVolume_);
              break;
            }
            case 129: {
              result.hasOpenAmount = input.ReadDouble(ref result.openAmount_);
              break;
            }
            case 137: {
              result.hasCloseAmount = input.ReadDouble(ref result.closeAmount_);
              break;
            }
            case 145: {
              result.hasPositionCost = input.ReadDouble(ref result.positionCost_);
              break;
            }
            case 153: {
              result.hasPreMargin = input.ReadDouble(ref result.preMargin_);
              break;
            }
            case 161: {
              result.hasUseMargin = input.ReadDouble(ref result.useMargin_);
              break;
            }
            case 169: {
              result.hasFrozenMargin = input.ReadDouble(ref result.frozenMargin_);
              break;
            }
            case 177: {
              result.hasFrozenCash = input.ReadDouble(ref result.frozenCash_);
              break;
            }
            case 185: {
              result.hasFrozenCommission = input.ReadDouble(ref result.frozenCommission_);
              break;
            }
            case 193: {
              result.hasCashIn = input.ReadDouble(ref result.cashIn_);
              break;
            }
            case 201: {
              result.hasCommission = input.ReadDouble(ref result.commission_);
              break;
            }
            case 209: {
              result.hasCloseProfit = input.ReadDouble(ref result.closeProfit_);
              break;
            }
            case 217: {
              result.hasPositionProfit = input.ReadDouble(ref result.positionProfit_);
              break;
            }
            case 225: {
              result.hasPreSettlementPrice = input.ReadDouble(ref result.preSettlementPrice_);
              break;
            }
            case 233: {
              result.hasSettlementPrice = input.ReadDouble(ref result.settlementPrice_);
              break;
            }
            case 242: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 248: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
            case 257: {
              result.hasOpenCost = input.ReadDouble(ref result.openCost_);
              break;
            }
            case 265: {
              result.hasExchangeMargin = input.ReadDouble(ref result.exchangeMargin_);
              break;
            }
            case 272: {
              result.hasCombPosition = input.ReadInt32(ref result.combPosition_);
              break;
            }
            case 280: {
              result.hasCombLongFrozen = input.ReadInt32(ref result.combLongFrozen_);
              break;
            }
            case 288: {
              result.hasCombShortFrozen = input.ReadInt32(ref result.combShortFrozen_);
              break;
            }
            case 297: {
              result.hasCloseProfitByDate = input.ReadDouble(ref result.closeProfitByDate_);
              break;
            }
            case 305: {
              result.hasCloseProfitByTrade = input.ReadDouble(ref result.closeProfitByTrade_);
              break;
            }
            case 312: {
              result.hasTodayPosition = input.ReadInt32(ref result.todayPosition_);
              break;
            }
            case 321: {
              result.hasMarginRateByMoney = input.ReadDouble(ref result.marginRateByMoney_);
              break;
            }
            case 329: {
              result.hasMarginRateByVolume = input.ReadDouble(ref result.marginRateByVolume_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasPosiDirection {
        get { return result.hasPosiDirection; }
      }
      public string PosiDirection {
        get { return result.PosiDirection; }
        set { SetPosiDirection(value); }
      }
      public Builder SetPosiDirection(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosiDirection = true;
        result.posiDirection_ = value;
        return this;
      }
      public Builder ClearPosiDirection() {
        PrepareBuilder();
        result.hasPosiDirection = false;
        result.posiDirection_ = "";
        return this;
      }
      
      public bool HasHedgeFlag {
        get { return result.hasHedgeFlag; }
      }
      public string HedgeFlag {
        get { return result.HedgeFlag; }
        set { SetHedgeFlag(value); }
      }
      public Builder SetHedgeFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHedgeFlag = true;
        result.hedgeFlag_ = value;
        return this;
      }
      public Builder ClearHedgeFlag() {
        PrepareBuilder();
        result.hasHedgeFlag = false;
        result.hedgeFlag_ = "";
        return this;
      }
      
      public bool HasPositionDate {
        get { return result.hasPositionDate; }
      }
      public string PositionDate {
        get { return result.PositionDate; }
        set { SetPositionDate(value); }
      }
      public Builder SetPositionDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionDate = true;
        result.positionDate_ = value;
        return this;
      }
      public Builder ClearPositionDate() {
        PrepareBuilder();
        result.hasPositionDate = false;
        result.positionDate_ = "";
        return this;
      }
      
      public bool HasYdPosition {
        get { return result.hasYdPosition; }
      }
      public int YdPosition {
        get { return result.YdPosition; }
        set { SetYdPosition(value); }
      }
      public Builder SetYdPosition(int value) {
        PrepareBuilder();
        result.hasYdPosition = true;
        result.ydPosition_ = value;
        return this;
      }
      public Builder ClearYdPosition() {
        PrepareBuilder();
        result.hasYdPosition = false;
        result.ydPosition_ = 0;
        return this;
      }
      
      public bool HasPosition {
        get { return result.hasPosition; }
      }
      public int Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(int value) {
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = 0;
        return this;
      }
      
      public bool HasLongFrozen {
        get { return result.hasLongFrozen; }
      }
      public int LongFrozen {
        get { return result.LongFrozen; }
        set { SetLongFrozen(value); }
      }
      public Builder SetLongFrozen(int value) {
        PrepareBuilder();
        result.hasLongFrozen = true;
        result.longFrozen_ = value;
        return this;
      }
      public Builder ClearLongFrozen() {
        PrepareBuilder();
        result.hasLongFrozen = false;
        result.longFrozen_ = 0;
        return this;
      }
      
      public bool HasShortFrozen {
        get { return result.hasShortFrozen; }
      }
      public int ShortFrozen {
        get { return result.ShortFrozen; }
        set { SetShortFrozen(value); }
      }
      public Builder SetShortFrozen(int value) {
        PrepareBuilder();
        result.hasShortFrozen = true;
        result.shortFrozen_ = value;
        return this;
      }
      public Builder ClearShortFrozen() {
        PrepareBuilder();
        result.hasShortFrozen = false;
        result.shortFrozen_ = 0;
        return this;
      }
      
      public bool HasLongFrozenAmount {
        get { return result.hasLongFrozenAmount; }
      }
      public double LongFrozenAmount {
        get { return result.LongFrozenAmount; }
        set { SetLongFrozenAmount(value); }
      }
      public Builder SetLongFrozenAmount(double value) {
        PrepareBuilder();
        result.hasLongFrozenAmount = true;
        result.longFrozenAmount_ = value;
        return this;
      }
      public Builder ClearLongFrozenAmount() {
        PrepareBuilder();
        result.hasLongFrozenAmount = false;
        result.longFrozenAmount_ = 0D;
        return this;
      }
      
      public bool HasShortFrozenAmount {
        get { return result.hasShortFrozenAmount; }
      }
      public double ShortFrozenAmount {
        get { return result.ShortFrozenAmount; }
        set { SetShortFrozenAmount(value); }
      }
      public Builder SetShortFrozenAmount(double value) {
        PrepareBuilder();
        result.hasShortFrozenAmount = true;
        result.shortFrozenAmount_ = value;
        return this;
      }
      public Builder ClearShortFrozenAmount() {
        PrepareBuilder();
        result.hasShortFrozenAmount = false;
        result.shortFrozenAmount_ = 0D;
        return this;
      }
      
      public bool HasOpenVolume {
        get { return result.hasOpenVolume; }
      }
      public int OpenVolume {
        get { return result.OpenVolume; }
        set { SetOpenVolume(value); }
      }
      public Builder SetOpenVolume(int value) {
        PrepareBuilder();
        result.hasOpenVolume = true;
        result.openVolume_ = value;
        return this;
      }
      public Builder ClearOpenVolume() {
        PrepareBuilder();
        result.hasOpenVolume = false;
        result.openVolume_ = 0;
        return this;
      }
      
      public bool HasCloseVolume {
        get { return result.hasCloseVolume; }
      }
      public int CloseVolume {
        get { return result.CloseVolume; }
        set { SetCloseVolume(value); }
      }
      public Builder SetCloseVolume(int value) {
        PrepareBuilder();
        result.hasCloseVolume = true;
        result.closeVolume_ = value;
        return this;
      }
      public Builder ClearCloseVolume() {
        PrepareBuilder();
        result.hasCloseVolume = false;
        result.closeVolume_ = 0;
        return this;
      }
      
      public bool HasOpenAmount {
        get { return result.hasOpenAmount; }
      }
      public double OpenAmount {
        get { return result.OpenAmount; }
        set { SetOpenAmount(value); }
      }
      public Builder SetOpenAmount(double value) {
        PrepareBuilder();
        result.hasOpenAmount = true;
        result.openAmount_ = value;
        return this;
      }
      public Builder ClearOpenAmount() {
        PrepareBuilder();
        result.hasOpenAmount = false;
        result.openAmount_ = 0D;
        return this;
      }
      
      public bool HasCloseAmount {
        get { return result.hasCloseAmount; }
      }
      public double CloseAmount {
        get { return result.CloseAmount; }
        set { SetCloseAmount(value); }
      }
      public Builder SetCloseAmount(double value) {
        PrepareBuilder();
        result.hasCloseAmount = true;
        result.closeAmount_ = value;
        return this;
      }
      public Builder ClearCloseAmount() {
        PrepareBuilder();
        result.hasCloseAmount = false;
        result.closeAmount_ = 0D;
        return this;
      }
      
      public bool HasPositionCost {
        get { return result.hasPositionCost; }
      }
      public double PositionCost {
        get { return result.PositionCost; }
        set { SetPositionCost(value); }
      }
      public Builder SetPositionCost(double value) {
        PrepareBuilder();
        result.hasPositionCost = true;
        result.positionCost_ = value;
        return this;
      }
      public Builder ClearPositionCost() {
        PrepareBuilder();
        result.hasPositionCost = false;
        result.positionCost_ = 0D;
        return this;
      }
      
      public bool HasPreMargin {
        get { return result.hasPreMargin; }
      }
      public double PreMargin {
        get { return result.PreMargin; }
        set { SetPreMargin(value); }
      }
      public Builder SetPreMargin(double value) {
        PrepareBuilder();
        result.hasPreMargin = true;
        result.preMargin_ = value;
        return this;
      }
      public Builder ClearPreMargin() {
        PrepareBuilder();
        result.hasPreMargin = false;
        result.preMargin_ = 0D;
        return this;
      }
      
      public bool HasUseMargin {
        get { return result.hasUseMargin; }
      }
      public double UseMargin {
        get { return result.UseMargin; }
        set { SetUseMargin(value); }
      }
      public Builder SetUseMargin(double value) {
        PrepareBuilder();
        result.hasUseMargin = true;
        result.useMargin_ = value;
        return this;
      }
      public Builder ClearUseMargin() {
        PrepareBuilder();
        result.hasUseMargin = false;
        result.useMargin_ = 0D;
        return this;
      }
      
      public bool HasFrozenMargin {
        get { return result.hasFrozenMargin; }
      }
      public double FrozenMargin {
        get { return result.FrozenMargin; }
        set { SetFrozenMargin(value); }
      }
      public Builder SetFrozenMargin(double value) {
        PrepareBuilder();
        result.hasFrozenMargin = true;
        result.frozenMargin_ = value;
        return this;
      }
      public Builder ClearFrozenMargin() {
        PrepareBuilder();
        result.hasFrozenMargin = false;
        result.frozenMargin_ = 0D;
        return this;
      }
      
      public bool HasFrozenCash {
        get { return result.hasFrozenCash; }
      }
      public double FrozenCash {
        get { return result.FrozenCash; }
        set { SetFrozenCash(value); }
      }
      public Builder SetFrozenCash(double value) {
        PrepareBuilder();
        result.hasFrozenCash = true;
        result.frozenCash_ = value;
        return this;
      }
      public Builder ClearFrozenCash() {
        PrepareBuilder();
        result.hasFrozenCash = false;
        result.frozenCash_ = 0D;
        return this;
      }
      
      public bool HasFrozenCommission {
        get { return result.hasFrozenCommission; }
      }
      public double FrozenCommission {
        get { return result.FrozenCommission; }
        set { SetFrozenCommission(value); }
      }
      public Builder SetFrozenCommission(double value) {
        PrepareBuilder();
        result.hasFrozenCommission = true;
        result.frozenCommission_ = value;
        return this;
      }
      public Builder ClearFrozenCommission() {
        PrepareBuilder();
        result.hasFrozenCommission = false;
        result.frozenCommission_ = 0D;
        return this;
      }
      
      public bool HasCashIn {
        get { return result.hasCashIn; }
      }
      public double CashIn {
        get { return result.CashIn; }
        set { SetCashIn(value); }
      }
      public Builder SetCashIn(double value) {
        PrepareBuilder();
        result.hasCashIn = true;
        result.cashIn_ = value;
        return this;
      }
      public Builder ClearCashIn() {
        PrepareBuilder();
        result.hasCashIn = false;
        result.cashIn_ = 0D;
        return this;
      }
      
      public bool HasCommission {
        get { return result.hasCommission; }
      }
      public double Commission {
        get { return result.Commission; }
        set { SetCommission(value); }
      }
      public Builder SetCommission(double value) {
        PrepareBuilder();
        result.hasCommission = true;
        result.commission_ = value;
        return this;
      }
      public Builder ClearCommission() {
        PrepareBuilder();
        result.hasCommission = false;
        result.commission_ = 0D;
        return this;
      }
      
      public bool HasCloseProfit {
        get { return result.hasCloseProfit; }
      }
      public double CloseProfit {
        get { return result.CloseProfit; }
        set { SetCloseProfit(value); }
      }
      public Builder SetCloseProfit(double value) {
        PrepareBuilder();
        result.hasCloseProfit = true;
        result.closeProfit_ = value;
        return this;
      }
      public Builder ClearCloseProfit() {
        PrepareBuilder();
        result.hasCloseProfit = false;
        result.closeProfit_ = 0D;
        return this;
      }
      
      public bool HasPositionProfit {
        get { return result.hasPositionProfit; }
      }
      public double PositionProfit {
        get { return result.PositionProfit; }
        set { SetPositionProfit(value); }
      }
      public Builder SetPositionProfit(double value) {
        PrepareBuilder();
        result.hasPositionProfit = true;
        result.positionProfit_ = value;
        return this;
      }
      public Builder ClearPositionProfit() {
        PrepareBuilder();
        result.hasPositionProfit = false;
        result.positionProfit_ = 0D;
        return this;
      }
      
      public bool HasPreSettlementPrice {
        get { return result.hasPreSettlementPrice; }
      }
      public double PreSettlementPrice {
        get { return result.PreSettlementPrice; }
        set { SetPreSettlementPrice(value); }
      }
      public Builder SetPreSettlementPrice(double value) {
        PrepareBuilder();
        result.hasPreSettlementPrice = true;
        result.preSettlementPrice_ = value;
        return this;
      }
      public Builder ClearPreSettlementPrice() {
        PrepareBuilder();
        result.hasPreSettlementPrice = false;
        result.preSettlementPrice_ = 0D;
        return this;
      }
      
      public bool HasSettlementPrice {
        get { return result.hasSettlementPrice; }
      }
      public double SettlementPrice {
        get { return result.SettlementPrice; }
        set { SetSettlementPrice(value); }
      }
      public Builder SetSettlementPrice(double value) {
        PrepareBuilder();
        result.hasSettlementPrice = true;
        result.settlementPrice_ = value;
        return this;
      }
      public Builder ClearSettlementPrice() {
        PrepareBuilder();
        result.hasSettlementPrice = false;
        result.settlementPrice_ = 0D;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
      
      public bool HasOpenCost {
        get { return result.hasOpenCost; }
      }
      public double OpenCost {
        get { return result.OpenCost; }
        set { SetOpenCost(value); }
      }
      public Builder SetOpenCost(double value) {
        PrepareBuilder();
        result.hasOpenCost = true;
        result.openCost_ = value;
        return this;
      }
      public Builder ClearOpenCost() {
        PrepareBuilder();
        result.hasOpenCost = false;
        result.openCost_ = 0D;
        return this;
      }
      
      public bool HasExchangeMargin {
        get { return result.hasExchangeMargin; }
      }
      public double ExchangeMargin {
        get { return result.ExchangeMargin; }
        set { SetExchangeMargin(value); }
      }
      public Builder SetExchangeMargin(double value) {
        PrepareBuilder();
        result.hasExchangeMargin = true;
        result.exchangeMargin_ = value;
        return this;
      }
      public Builder ClearExchangeMargin() {
        PrepareBuilder();
        result.hasExchangeMargin = false;
        result.exchangeMargin_ = 0D;
        return this;
      }
      
      public bool HasCombPosition {
        get { return result.hasCombPosition; }
      }
      public int CombPosition {
        get { return result.CombPosition; }
        set { SetCombPosition(value); }
      }
      public Builder SetCombPosition(int value) {
        PrepareBuilder();
        result.hasCombPosition = true;
        result.combPosition_ = value;
        return this;
      }
      public Builder ClearCombPosition() {
        PrepareBuilder();
        result.hasCombPosition = false;
        result.combPosition_ = 0;
        return this;
      }
      
      public bool HasCombLongFrozen {
        get { return result.hasCombLongFrozen; }
      }
      public int CombLongFrozen {
        get { return result.CombLongFrozen; }
        set { SetCombLongFrozen(value); }
      }
      public Builder SetCombLongFrozen(int value) {
        PrepareBuilder();
        result.hasCombLongFrozen = true;
        result.combLongFrozen_ = value;
        return this;
      }
      public Builder ClearCombLongFrozen() {
        PrepareBuilder();
        result.hasCombLongFrozen = false;
        result.combLongFrozen_ = 0;
        return this;
      }
      
      public bool HasCombShortFrozen {
        get { return result.hasCombShortFrozen; }
      }
      public int CombShortFrozen {
        get { return result.CombShortFrozen; }
        set { SetCombShortFrozen(value); }
      }
      public Builder SetCombShortFrozen(int value) {
        PrepareBuilder();
        result.hasCombShortFrozen = true;
        result.combShortFrozen_ = value;
        return this;
      }
      public Builder ClearCombShortFrozen() {
        PrepareBuilder();
        result.hasCombShortFrozen = false;
        result.combShortFrozen_ = 0;
        return this;
      }
      
      public bool HasCloseProfitByDate {
        get { return result.hasCloseProfitByDate; }
      }
      public double CloseProfitByDate {
        get { return result.CloseProfitByDate; }
        set { SetCloseProfitByDate(value); }
      }
      public Builder SetCloseProfitByDate(double value) {
        PrepareBuilder();
        result.hasCloseProfitByDate = true;
        result.closeProfitByDate_ = value;
        return this;
      }
      public Builder ClearCloseProfitByDate() {
        PrepareBuilder();
        result.hasCloseProfitByDate = false;
        result.closeProfitByDate_ = 0D;
        return this;
      }
      
      public bool HasCloseProfitByTrade {
        get { return result.hasCloseProfitByTrade; }
      }
      public double CloseProfitByTrade {
        get { return result.CloseProfitByTrade; }
        set { SetCloseProfitByTrade(value); }
      }
      public Builder SetCloseProfitByTrade(double value) {
        PrepareBuilder();
        result.hasCloseProfitByTrade = true;
        result.closeProfitByTrade_ = value;
        return this;
      }
      public Builder ClearCloseProfitByTrade() {
        PrepareBuilder();
        result.hasCloseProfitByTrade = false;
        result.closeProfitByTrade_ = 0D;
        return this;
      }
      
      public bool HasTodayPosition {
        get { return result.hasTodayPosition; }
      }
      public int TodayPosition {
        get { return result.TodayPosition; }
        set { SetTodayPosition(value); }
      }
      public Builder SetTodayPosition(int value) {
        PrepareBuilder();
        result.hasTodayPosition = true;
        result.todayPosition_ = value;
        return this;
      }
      public Builder ClearTodayPosition() {
        PrepareBuilder();
        result.hasTodayPosition = false;
        result.todayPosition_ = 0;
        return this;
      }
      
      public bool HasMarginRateByMoney {
        get { return result.hasMarginRateByMoney; }
      }
      public double MarginRateByMoney {
        get { return result.MarginRateByMoney; }
        set { SetMarginRateByMoney(value); }
      }
      public Builder SetMarginRateByMoney(double value) {
        PrepareBuilder();
        result.hasMarginRateByMoney = true;
        result.marginRateByMoney_ = value;
        return this;
      }
      public Builder ClearMarginRateByMoney() {
        PrepareBuilder();
        result.hasMarginRateByMoney = false;
        result.marginRateByMoney_ = 0D;
        return this;
      }
      
      public bool HasMarginRateByVolume {
        get { return result.hasMarginRateByVolume; }
      }
      public double MarginRateByVolume {
        get { return result.MarginRateByVolume; }
        set { SetMarginRateByVolume(value); }
      }
      public Builder SetMarginRateByVolume(double value) {
        PrepareBuilder();
        result.hasMarginRateByVolume = true;
        result.marginRateByVolume_ = value;
        return this;
      }
      public Builder ClearMarginRateByVolume() {
        PrepareBuilder();
        result.hasMarginRateByVolume = false;
        result.marginRateByVolume_ = 0D;
        return this;
      }
    }
    static PBMsgQueryRspPosition() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryReqFund : pb::GeneratedMessage<PBMsgQueryReqFund, PBMsgQueryReqFund.Builder> {
    private PBMsgQueryReqFund() { }
    private static readonly PBMsgQueryReqFund defaultInstance = new PBMsgQueryReqFund().MakeReadOnly();
    private static readonly string[] _pBMsgQueryReqFundFieldNames = new string[] { "BrokerID", "InvestorID" };
    private static readonly uint[] _pBMsgQueryReqFundFieldTags = new uint[] { 18, 26 };
    public static PBMsgQueryReqFund DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryReqFund DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryReqFund ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqFund__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryReqFund, PBMsgQueryReqFund.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryReqFund__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryReqFundFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[1], InvestorID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryReqFund ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryReqFund ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryReqFund MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryReqFund prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryReqFund, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryReqFund cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryReqFund result;
      
      private PBMsgQueryReqFund PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryReqFund original = result;
          result = new PBMsgQueryReqFund();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryReqFund MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryReqFund.Descriptor; }
      }
      
      public override PBMsgQueryReqFund DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryReqFund.DefaultInstance; }
      }
      
      public override PBMsgQueryReqFund BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryReqFund) {
          return MergeFrom((PBMsgQueryReqFund) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryReqFund other) {
        if (other == global::PBMsgTrader.PBMsgQueryReqFund.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryReqFundFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryReqFundFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
    }
    static PBMsgQueryReqFund() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgQueryRspFund : pb::GeneratedMessage<PBMsgQueryRspFund, PBMsgQueryRspFund.Builder> {
    private PBMsgQueryRspFund() { }
    private static readonly PBMsgQueryRspFund defaultInstance = new PBMsgQueryRspFund().MakeReadOnly();
    private static readonly string[] _pBMsgQueryRspFundFieldNames = new string[] { "AccountID", "Available", "Balance", "BrokerID", "CashIn", "CloseProfit", "Commission", "Credit", "CurrMargin", "DeliveryMargin", "Deposit", "EOF", "ExchangeDeliveryMargin", "ExchangeMargin", "FrozenCash", "FrozenCommission", "FrozenMargin", "Interest", "InterestBase", "Mortgage", "PositionProfit", "PreBalance", "PreCredit", "PreDeposit", "PreMargin", "PreMortgage", "Reserve", "ReserveBalance", "SettlementID", "TradingDay", "Withdraw", "WithdrawQuota" };
    private static readonly uint[] _pBMsgQueryRspFundFieldTags = new uint[] { 26, 177, 169, 18, 137, 153, 145, 217, 129, 241, 89, 8, 249, 233, 113, 121, 105, 81, 73, 225, 161, 57, 41, 49, 65, 33, 193, 257, 208, 202, 97, 185 };
    public static PBMsgQueryRspFund DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgQueryRspFund DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgQueryRspFund ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspFund__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgQueryRspFund, PBMsgQueryRspFund.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgQueryRspFund__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int AccountIDFieldNumber = 3;
    private bool hasAccountID;
    private string accountID_ = "";
    public bool HasAccountID {
      get { return hasAccountID; }
    }
    public string AccountID {
      get { return accountID_; }
    }
    
    public const int PreMortgageFieldNumber = 4;
    private bool hasPreMortgage;
    private double preMortgage_;
    public bool HasPreMortgage {
      get { return hasPreMortgage; }
    }
    public double PreMortgage {
      get { return preMortgage_; }
    }
    
    public const int PreCreditFieldNumber = 5;
    private bool hasPreCredit;
    private double preCredit_;
    public bool HasPreCredit {
      get { return hasPreCredit; }
    }
    public double PreCredit {
      get { return preCredit_; }
    }
    
    public const int PreDepositFieldNumber = 6;
    private bool hasPreDeposit;
    private double preDeposit_;
    public bool HasPreDeposit {
      get { return hasPreDeposit; }
    }
    public double PreDeposit {
      get { return preDeposit_; }
    }
    
    public const int PreBalanceFieldNumber = 7;
    private bool hasPreBalance;
    private double preBalance_;
    public bool HasPreBalance {
      get { return hasPreBalance; }
    }
    public double PreBalance {
      get { return preBalance_; }
    }
    
    public const int PreMarginFieldNumber = 8;
    private bool hasPreMargin;
    private double preMargin_;
    public bool HasPreMargin {
      get { return hasPreMargin; }
    }
    public double PreMargin {
      get { return preMargin_; }
    }
    
    public const int InterestBaseFieldNumber = 9;
    private bool hasInterestBase;
    private double interestBase_;
    public bool HasInterestBase {
      get { return hasInterestBase; }
    }
    public double InterestBase {
      get { return interestBase_; }
    }
    
    public const int InterestFieldNumber = 10;
    private bool hasInterest;
    private double interest_;
    public bool HasInterest {
      get { return hasInterest; }
    }
    public double Interest {
      get { return interest_; }
    }
    
    public const int DepositFieldNumber = 11;
    private bool hasDeposit;
    private double deposit_;
    public bool HasDeposit {
      get { return hasDeposit; }
    }
    public double Deposit {
      get { return deposit_; }
    }
    
    public const int WithdrawFieldNumber = 12;
    private bool hasWithdraw;
    private double withdraw_;
    public bool HasWithdraw {
      get { return hasWithdraw; }
    }
    public double Withdraw {
      get { return withdraw_; }
    }
    
    public const int FrozenMarginFieldNumber = 13;
    private bool hasFrozenMargin;
    private double frozenMargin_;
    public bool HasFrozenMargin {
      get { return hasFrozenMargin; }
    }
    public double FrozenMargin {
      get { return frozenMargin_; }
    }
    
    public const int FrozenCashFieldNumber = 14;
    private bool hasFrozenCash;
    private double frozenCash_;
    public bool HasFrozenCash {
      get { return hasFrozenCash; }
    }
    public double FrozenCash {
      get { return frozenCash_; }
    }
    
    public const int FrozenCommissionFieldNumber = 15;
    private bool hasFrozenCommission;
    private double frozenCommission_;
    public bool HasFrozenCommission {
      get { return hasFrozenCommission; }
    }
    public double FrozenCommission {
      get { return frozenCommission_; }
    }
    
    public const int CurrMarginFieldNumber = 16;
    private bool hasCurrMargin;
    private double currMargin_;
    public bool HasCurrMargin {
      get { return hasCurrMargin; }
    }
    public double CurrMargin {
      get { return currMargin_; }
    }
    
    public const int CashInFieldNumber = 17;
    private bool hasCashIn;
    private double cashIn_;
    public bool HasCashIn {
      get { return hasCashIn; }
    }
    public double CashIn {
      get { return cashIn_; }
    }
    
    public const int CommissionFieldNumber = 18;
    private bool hasCommission;
    private double commission_;
    public bool HasCommission {
      get { return hasCommission; }
    }
    public double Commission {
      get { return commission_; }
    }
    
    public const int CloseProfitFieldNumber = 19;
    private bool hasCloseProfit;
    private double closeProfit_;
    public bool HasCloseProfit {
      get { return hasCloseProfit; }
    }
    public double CloseProfit {
      get { return closeProfit_; }
    }
    
    public const int PositionProfitFieldNumber = 20;
    private bool hasPositionProfit;
    private double positionProfit_;
    public bool HasPositionProfit {
      get { return hasPositionProfit; }
    }
    public double PositionProfit {
      get { return positionProfit_; }
    }
    
    public const int BalanceFieldNumber = 21;
    private bool hasBalance;
    private double balance_;
    public bool HasBalance {
      get { return hasBalance; }
    }
    public double Balance {
      get { return balance_; }
    }
    
    public const int AvailableFieldNumber = 22;
    private bool hasAvailable;
    private double available_;
    public bool HasAvailable {
      get { return hasAvailable; }
    }
    public double Available {
      get { return available_; }
    }
    
    public const int WithdrawQuotaFieldNumber = 23;
    private bool hasWithdrawQuota;
    private double withdrawQuota_;
    public bool HasWithdrawQuota {
      get { return hasWithdrawQuota; }
    }
    public double WithdrawQuota {
      get { return withdrawQuota_; }
    }
    
    public const int ReserveFieldNumber = 24;
    private bool hasReserve;
    private double reserve_;
    public bool HasReserve {
      get { return hasReserve; }
    }
    public double Reserve {
      get { return reserve_; }
    }
    
    public const int TradingDayFieldNumber = 25;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 26;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public const int CreditFieldNumber = 27;
    private bool hasCredit;
    private double credit_;
    public bool HasCredit {
      get { return hasCredit; }
    }
    public double Credit {
      get { return credit_; }
    }
    
    public const int MortgageFieldNumber = 28;
    private bool hasMortgage;
    private double mortgage_;
    public bool HasMortgage {
      get { return hasMortgage; }
    }
    public double Mortgage {
      get { return mortgage_; }
    }
    
    public const int ExchangeMarginFieldNumber = 29;
    private bool hasExchangeMargin;
    private double exchangeMargin_;
    public bool HasExchangeMargin {
      get { return hasExchangeMargin; }
    }
    public double ExchangeMargin {
      get { return exchangeMargin_; }
    }
    
    public const int DeliveryMarginFieldNumber = 30;
    private bool hasDeliveryMargin;
    private double deliveryMargin_;
    public bool HasDeliveryMargin {
      get { return hasDeliveryMargin; }
    }
    public double DeliveryMargin {
      get { return deliveryMargin_; }
    }
    
    public const int ExchangeDeliveryMarginFieldNumber = 31;
    private bool hasExchangeDeliveryMargin;
    private double exchangeDeliveryMargin_;
    public bool HasExchangeDeliveryMargin {
      get { return hasExchangeDeliveryMargin; }
    }
    public double ExchangeDeliveryMargin {
      get { return exchangeDeliveryMargin_; }
    }
    
    public const int ReserveBalanceFieldNumber = 32;
    private bool hasReserveBalance;
    private double reserveBalance_;
    public bool HasReserveBalance {
      get { return hasReserveBalance; }
    }
    public double ReserveBalance {
      get { return reserveBalance_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgQueryRspFundFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[11], EOF);
      }
      if (hasBrokerID) {
        output.WriteString(2, field_names[3], BrokerID);
      }
      if (hasAccountID) {
        output.WriteString(3, field_names[0], AccountID);
      }
      if (hasPreMortgage) {
        output.WriteDouble(4, field_names[25], PreMortgage);
      }
      if (hasPreCredit) {
        output.WriteDouble(5, field_names[22], PreCredit);
      }
      if (hasPreDeposit) {
        output.WriteDouble(6, field_names[23], PreDeposit);
      }
      if (hasPreBalance) {
        output.WriteDouble(7, field_names[21], PreBalance);
      }
      if (hasPreMargin) {
        output.WriteDouble(8, field_names[24], PreMargin);
      }
      if (hasInterestBase) {
        output.WriteDouble(9, field_names[18], InterestBase);
      }
      if (hasInterest) {
        output.WriteDouble(10, field_names[17], Interest);
      }
      if (hasDeposit) {
        output.WriteDouble(11, field_names[10], Deposit);
      }
      if (hasWithdraw) {
        output.WriteDouble(12, field_names[30], Withdraw);
      }
      if (hasFrozenMargin) {
        output.WriteDouble(13, field_names[16], FrozenMargin);
      }
      if (hasFrozenCash) {
        output.WriteDouble(14, field_names[14], FrozenCash);
      }
      if (hasFrozenCommission) {
        output.WriteDouble(15, field_names[15], FrozenCommission);
      }
      if (hasCurrMargin) {
        output.WriteDouble(16, field_names[8], CurrMargin);
      }
      if (hasCashIn) {
        output.WriteDouble(17, field_names[4], CashIn);
      }
      if (hasCommission) {
        output.WriteDouble(18, field_names[6], Commission);
      }
      if (hasCloseProfit) {
        output.WriteDouble(19, field_names[5], CloseProfit);
      }
      if (hasPositionProfit) {
        output.WriteDouble(20, field_names[20], PositionProfit);
      }
      if (hasBalance) {
        output.WriteDouble(21, field_names[2], Balance);
      }
      if (hasAvailable) {
        output.WriteDouble(22, field_names[1], Available);
      }
      if (hasWithdrawQuota) {
        output.WriteDouble(23, field_names[31], WithdrawQuota);
      }
      if (hasReserve) {
        output.WriteDouble(24, field_names[26], Reserve);
      }
      if (hasTradingDay) {
        output.WriteString(25, field_names[29], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(26, field_names[28], SettlementID);
      }
      if (hasCredit) {
        output.WriteDouble(27, field_names[7], Credit);
      }
      if (hasMortgage) {
        output.WriteDouble(28, field_names[19], Mortgage);
      }
      if (hasExchangeMargin) {
        output.WriteDouble(29, field_names[13], ExchangeMargin);
      }
      if (hasDeliveryMargin) {
        output.WriteDouble(30, field_names[9], DeliveryMargin);
      }
      if (hasExchangeDeliveryMargin) {
        output.WriteDouble(31, field_names[12], ExchangeDeliveryMargin);
      }
      if (hasReserveBalance) {
        output.WriteDouble(32, field_names[27], ReserveBalance);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasAccountID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AccountID);
        }
        if (hasPreMortgage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, PreMortgage);
        }
        if (hasPreCredit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, PreCredit);
        }
        if (hasPreDeposit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, PreDeposit);
        }
        if (hasPreBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, PreBalance);
        }
        if (hasPreMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, PreMargin);
        }
        if (hasInterestBase) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, InterestBase);
        }
        if (hasInterest) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, Interest);
        }
        if (hasDeposit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Deposit);
        }
        if (hasWithdraw) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, Withdraw);
        }
        if (hasFrozenMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, FrozenMargin);
        }
        if (hasFrozenCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, FrozenCash);
        }
        if (hasFrozenCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, FrozenCommission);
        }
        if (hasCurrMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, CurrMargin);
        }
        if (hasCashIn) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, CashIn);
        }
        if (hasCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, Commission);
        }
        if (hasCloseProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, CloseProfit);
        }
        if (hasPositionProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, PositionProfit);
        }
        if (hasBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, Balance);
        }
        if (hasAvailable) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, Available);
        }
        if (hasWithdrawQuota) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, WithdrawQuota);
        }
        if (hasReserve) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, Reserve);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(25, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, SettlementID);
        }
        if (hasCredit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, Credit);
        }
        if (hasMortgage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, Mortgage);
        }
        if (hasExchangeMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, ExchangeMargin);
        }
        if (hasDeliveryMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, DeliveryMargin);
        }
        if (hasExchangeDeliveryMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, ExchangeDeliveryMargin);
        }
        if (hasReserveBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, ReserveBalance);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgQueryRspFund ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgQueryRspFund ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgQueryRspFund MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgQueryRspFund prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgQueryRspFund, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgQueryRspFund cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgQueryRspFund result;
      
      private PBMsgQueryRspFund PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgQueryRspFund original = result;
          result = new PBMsgQueryRspFund();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgQueryRspFund MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgQueryRspFund.Descriptor; }
      }
      
      public override PBMsgQueryRspFund DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgQueryRspFund.DefaultInstance; }
      }
      
      public override PBMsgQueryRspFund BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgQueryRspFund) {
          return MergeFrom((PBMsgQueryRspFund) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgQueryRspFund other) {
        if (other == global::PBMsgTrader.PBMsgQueryRspFund.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasAccountID) {
          AccountID = other.AccountID;
        }
        if (other.HasPreMortgage) {
          PreMortgage = other.PreMortgage;
        }
        if (other.HasPreCredit) {
          PreCredit = other.PreCredit;
        }
        if (other.HasPreDeposit) {
          PreDeposit = other.PreDeposit;
        }
        if (other.HasPreBalance) {
          PreBalance = other.PreBalance;
        }
        if (other.HasPreMargin) {
          PreMargin = other.PreMargin;
        }
        if (other.HasInterestBase) {
          InterestBase = other.InterestBase;
        }
        if (other.HasInterest) {
          Interest = other.Interest;
        }
        if (other.HasDeposit) {
          Deposit = other.Deposit;
        }
        if (other.HasWithdraw) {
          Withdraw = other.Withdraw;
        }
        if (other.HasFrozenMargin) {
          FrozenMargin = other.FrozenMargin;
        }
        if (other.HasFrozenCash) {
          FrozenCash = other.FrozenCash;
        }
        if (other.HasFrozenCommission) {
          FrozenCommission = other.FrozenCommission;
        }
        if (other.HasCurrMargin) {
          CurrMargin = other.CurrMargin;
        }
        if (other.HasCashIn) {
          CashIn = other.CashIn;
        }
        if (other.HasCommission) {
          Commission = other.Commission;
        }
        if (other.HasCloseProfit) {
          CloseProfit = other.CloseProfit;
        }
        if (other.HasPositionProfit) {
          PositionProfit = other.PositionProfit;
        }
        if (other.HasBalance) {
          Balance = other.Balance;
        }
        if (other.HasAvailable) {
          Available = other.Available;
        }
        if (other.HasWithdrawQuota) {
          WithdrawQuota = other.WithdrawQuota;
        }
        if (other.HasReserve) {
          Reserve = other.Reserve;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        if (other.HasCredit) {
          Credit = other.Credit;
        }
        if (other.HasMortgage) {
          Mortgage = other.Mortgage;
        }
        if (other.HasExchangeMargin) {
          ExchangeMargin = other.ExchangeMargin;
        }
        if (other.HasDeliveryMargin) {
          DeliveryMargin = other.DeliveryMargin;
        }
        if (other.HasExchangeDeliveryMargin) {
          ExchangeDeliveryMargin = other.ExchangeDeliveryMargin;
        }
        if (other.HasReserveBalance) {
          ReserveBalance = other.ReserveBalance;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgQueryRspFundFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgQueryRspFundFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasAccountID = input.ReadString(ref result.accountID_);
              break;
            }
            case 33: {
              result.hasPreMortgage = input.ReadDouble(ref result.preMortgage_);
              break;
            }
            case 41: {
              result.hasPreCredit = input.ReadDouble(ref result.preCredit_);
              break;
            }
            case 49: {
              result.hasPreDeposit = input.ReadDouble(ref result.preDeposit_);
              break;
            }
            case 57: {
              result.hasPreBalance = input.ReadDouble(ref result.preBalance_);
              break;
            }
            case 65: {
              result.hasPreMargin = input.ReadDouble(ref result.preMargin_);
              break;
            }
            case 73: {
              result.hasInterestBase = input.ReadDouble(ref result.interestBase_);
              break;
            }
            case 81: {
              result.hasInterest = input.ReadDouble(ref result.interest_);
              break;
            }
            case 89: {
              result.hasDeposit = input.ReadDouble(ref result.deposit_);
              break;
            }
            case 97: {
              result.hasWithdraw = input.ReadDouble(ref result.withdraw_);
              break;
            }
            case 105: {
              result.hasFrozenMargin = input.ReadDouble(ref result.frozenMargin_);
              break;
            }
            case 113: {
              result.hasFrozenCash = input.ReadDouble(ref result.frozenCash_);
              break;
            }
            case 121: {
              result.hasFrozenCommission = input.ReadDouble(ref result.frozenCommission_);
              break;
            }
            case 129: {
              result.hasCurrMargin = input.ReadDouble(ref result.currMargin_);
              break;
            }
            case 137: {
              result.hasCashIn = input.ReadDouble(ref result.cashIn_);
              break;
            }
            case 145: {
              result.hasCommission = input.ReadDouble(ref result.commission_);
              break;
            }
            case 153: {
              result.hasCloseProfit = input.ReadDouble(ref result.closeProfit_);
              break;
            }
            case 161: {
              result.hasPositionProfit = input.ReadDouble(ref result.positionProfit_);
              break;
            }
            case 169: {
              result.hasBalance = input.ReadDouble(ref result.balance_);
              break;
            }
            case 177: {
              result.hasAvailable = input.ReadDouble(ref result.available_);
              break;
            }
            case 185: {
              result.hasWithdrawQuota = input.ReadDouble(ref result.withdrawQuota_);
              break;
            }
            case 193: {
              result.hasReserve = input.ReadDouble(ref result.reserve_);
              break;
            }
            case 202: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 208: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
            case 217: {
              result.hasCredit = input.ReadDouble(ref result.credit_);
              break;
            }
            case 225: {
              result.hasMortgage = input.ReadDouble(ref result.mortgage_);
              break;
            }
            case 233: {
              result.hasExchangeMargin = input.ReadDouble(ref result.exchangeMargin_);
              break;
            }
            case 241: {
              result.hasDeliveryMargin = input.ReadDouble(ref result.deliveryMargin_);
              break;
            }
            case 249: {
              result.hasExchangeDeliveryMargin = input.ReadDouble(ref result.exchangeDeliveryMargin_);
              break;
            }
            case 257: {
              result.hasReserveBalance = input.ReadDouble(ref result.reserveBalance_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasAccountID {
        get { return result.hasAccountID; }
      }
      public string AccountID {
        get { return result.AccountID; }
        set { SetAccountID(value); }
      }
      public Builder SetAccountID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountID = true;
        result.accountID_ = value;
        return this;
      }
      public Builder ClearAccountID() {
        PrepareBuilder();
        result.hasAccountID = false;
        result.accountID_ = "";
        return this;
      }
      
      public bool HasPreMortgage {
        get { return result.hasPreMortgage; }
      }
      public double PreMortgage {
        get { return result.PreMortgage; }
        set { SetPreMortgage(value); }
      }
      public Builder SetPreMortgage(double value) {
        PrepareBuilder();
        result.hasPreMortgage = true;
        result.preMortgage_ = value;
        return this;
      }
      public Builder ClearPreMortgage() {
        PrepareBuilder();
        result.hasPreMortgage = false;
        result.preMortgage_ = 0D;
        return this;
      }
      
      public bool HasPreCredit {
        get { return result.hasPreCredit; }
      }
      public double PreCredit {
        get { return result.PreCredit; }
        set { SetPreCredit(value); }
      }
      public Builder SetPreCredit(double value) {
        PrepareBuilder();
        result.hasPreCredit = true;
        result.preCredit_ = value;
        return this;
      }
      public Builder ClearPreCredit() {
        PrepareBuilder();
        result.hasPreCredit = false;
        result.preCredit_ = 0D;
        return this;
      }
      
      public bool HasPreDeposit {
        get { return result.hasPreDeposit; }
      }
      public double PreDeposit {
        get { return result.PreDeposit; }
        set { SetPreDeposit(value); }
      }
      public Builder SetPreDeposit(double value) {
        PrepareBuilder();
        result.hasPreDeposit = true;
        result.preDeposit_ = value;
        return this;
      }
      public Builder ClearPreDeposit() {
        PrepareBuilder();
        result.hasPreDeposit = false;
        result.preDeposit_ = 0D;
        return this;
      }
      
      public bool HasPreBalance {
        get { return result.hasPreBalance; }
      }
      public double PreBalance {
        get { return result.PreBalance; }
        set { SetPreBalance(value); }
      }
      public Builder SetPreBalance(double value) {
        PrepareBuilder();
        result.hasPreBalance = true;
        result.preBalance_ = value;
        return this;
      }
      public Builder ClearPreBalance() {
        PrepareBuilder();
        result.hasPreBalance = false;
        result.preBalance_ = 0D;
        return this;
      }
      
      public bool HasPreMargin {
        get { return result.hasPreMargin; }
      }
      public double PreMargin {
        get { return result.PreMargin; }
        set { SetPreMargin(value); }
      }
      public Builder SetPreMargin(double value) {
        PrepareBuilder();
        result.hasPreMargin = true;
        result.preMargin_ = value;
        return this;
      }
      public Builder ClearPreMargin() {
        PrepareBuilder();
        result.hasPreMargin = false;
        result.preMargin_ = 0D;
        return this;
      }
      
      public bool HasInterestBase {
        get { return result.hasInterestBase; }
      }
      public double InterestBase {
        get { return result.InterestBase; }
        set { SetInterestBase(value); }
      }
      public Builder SetInterestBase(double value) {
        PrepareBuilder();
        result.hasInterestBase = true;
        result.interestBase_ = value;
        return this;
      }
      public Builder ClearInterestBase() {
        PrepareBuilder();
        result.hasInterestBase = false;
        result.interestBase_ = 0D;
        return this;
      }
      
      public bool HasInterest {
        get { return result.hasInterest; }
      }
      public double Interest {
        get { return result.Interest; }
        set { SetInterest(value); }
      }
      public Builder SetInterest(double value) {
        PrepareBuilder();
        result.hasInterest = true;
        result.interest_ = value;
        return this;
      }
      public Builder ClearInterest() {
        PrepareBuilder();
        result.hasInterest = false;
        result.interest_ = 0D;
        return this;
      }
      
      public bool HasDeposit {
        get { return result.hasDeposit; }
      }
      public double Deposit {
        get { return result.Deposit; }
        set { SetDeposit(value); }
      }
      public Builder SetDeposit(double value) {
        PrepareBuilder();
        result.hasDeposit = true;
        result.deposit_ = value;
        return this;
      }
      public Builder ClearDeposit() {
        PrepareBuilder();
        result.hasDeposit = false;
        result.deposit_ = 0D;
        return this;
      }
      
      public bool HasWithdraw {
        get { return result.hasWithdraw; }
      }
      public double Withdraw {
        get { return result.Withdraw; }
        set { SetWithdraw(value); }
      }
      public Builder SetWithdraw(double value) {
        PrepareBuilder();
        result.hasWithdraw = true;
        result.withdraw_ = value;
        return this;
      }
      public Builder ClearWithdraw() {
        PrepareBuilder();
        result.hasWithdraw = false;
        result.withdraw_ = 0D;
        return this;
      }
      
      public bool HasFrozenMargin {
        get { return result.hasFrozenMargin; }
      }
      public double FrozenMargin {
        get { return result.FrozenMargin; }
        set { SetFrozenMargin(value); }
      }
      public Builder SetFrozenMargin(double value) {
        PrepareBuilder();
        result.hasFrozenMargin = true;
        result.frozenMargin_ = value;
        return this;
      }
      public Builder ClearFrozenMargin() {
        PrepareBuilder();
        result.hasFrozenMargin = false;
        result.frozenMargin_ = 0D;
        return this;
      }
      
      public bool HasFrozenCash {
        get { return result.hasFrozenCash; }
      }
      public double FrozenCash {
        get { return result.FrozenCash; }
        set { SetFrozenCash(value); }
      }
      public Builder SetFrozenCash(double value) {
        PrepareBuilder();
        result.hasFrozenCash = true;
        result.frozenCash_ = value;
        return this;
      }
      public Builder ClearFrozenCash() {
        PrepareBuilder();
        result.hasFrozenCash = false;
        result.frozenCash_ = 0D;
        return this;
      }
      
      public bool HasFrozenCommission {
        get { return result.hasFrozenCommission; }
      }
      public double FrozenCommission {
        get { return result.FrozenCommission; }
        set { SetFrozenCommission(value); }
      }
      public Builder SetFrozenCommission(double value) {
        PrepareBuilder();
        result.hasFrozenCommission = true;
        result.frozenCommission_ = value;
        return this;
      }
      public Builder ClearFrozenCommission() {
        PrepareBuilder();
        result.hasFrozenCommission = false;
        result.frozenCommission_ = 0D;
        return this;
      }
      
      public bool HasCurrMargin {
        get { return result.hasCurrMargin; }
      }
      public double CurrMargin {
        get { return result.CurrMargin; }
        set { SetCurrMargin(value); }
      }
      public Builder SetCurrMargin(double value) {
        PrepareBuilder();
        result.hasCurrMargin = true;
        result.currMargin_ = value;
        return this;
      }
      public Builder ClearCurrMargin() {
        PrepareBuilder();
        result.hasCurrMargin = false;
        result.currMargin_ = 0D;
        return this;
      }
      
      public bool HasCashIn {
        get { return result.hasCashIn; }
      }
      public double CashIn {
        get { return result.CashIn; }
        set { SetCashIn(value); }
      }
      public Builder SetCashIn(double value) {
        PrepareBuilder();
        result.hasCashIn = true;
        result.cashIn_ = value;
        return this;
      }
      public Builder ClearCashIn() {
        PrepareBuilder();
        result.hasCashIn = false;
        result.cashIn_ = 0D;
        return this;
      }
      
      public bool HasCommission {
        get { return result.hasCommission; }
      }
      public double Commission {
        get { return result.Commission; }
        set { SetCommission(value); }
      }
      public Builder SetCommission(double value) {
        PrepareBuilder();
        result.hasCommission = true;
        result.commission_ = value;
        return this;
      }
      public Builder ClearCommission() {
        PrepareBuilder();
        result.hasCommission = false;
        result.commission_ = 0D;
        return this;
      }
      
      public bool HasCloseProfit {
        get { return result.hasCloseProfit; }
      }
      public double CloseProfit {
        get { return result.CloseProfit; }
        set { SetCloseProfit(value); }
      }
      public Builder SetCloseProfit(double value) {
        PrepareBuilder();
        result.hasCloseProfit = true;
        result.closeProfit_ = value;
        return this;
      }
      public Builder ClearCloseProfit() {
        PrepareBuilder();
        result.hasCloseProfit = false;
        result.closeProfit_ = 0D;
        return this;
      }
      
      public bool HasPositionProfit {
        get { return result.hasPositionProfit; }
      }
      public double PositionProfit {
        get { return result.PositionProfit; }
        set { SetPositionProfit(value); }
      }
      public Builder SetPositionProfit(double value) {
        PrepareBuilder();
        result.hasPositionProfit = true;
        result.positionProfit_ = value;
        return this;
      }
      public Builder ClearPositionProfit() {
        PrepareBuilder();
        result.hasPositionProfit = false;
        result.positionProfit_ = 0D;
        return this;
      }
      
      public bool HasBalance {
        get { return result.hasBalance; }
      }
      public double Balance {
        get { return result.Balance; }
        set { SetBalance(value); }
      }
      public Builder SetBalance(double value) {
        PrepareBuilder();
        result.hasBalance = true;
        result.balance_ = value;
        return this;
      }
      public Builder ClearBalance() {
        PrepareBuilder();
        result.hasBalance = false;
        result.balance_ = 0D;
        return this;
      }
      
      public bool HasAvailable {
        get { return result.hasAvailable; }
      }
      public double Available {
        get { return result.Available; }
        set { SetAvailable(value); }
      }
      public Builder SetAvailable(double value) {
        PrepareBuilder();
        result.hasAvailable = true;
        result.available_ = value;
        return this;
      }
      public Builder ClearAvailable() {
        PrepareBuilder();
        result.hasAvailable = false;
        result.available_ = 0D;
        return this;
      }
      
      public bool HasWithdrawQuota {
        get { return result.hasWithdrawQuota; }
      }
      public double WithdrawQuota {
        get { return result.WithdrawQuota; }
        set { SetWithdrawQuota(value); }
      }
      public Builder SetWithdrawQuota(double value) {
        PrepareBuilder();
        result.hasWithdrawQuota = true;
        result.withdrawQuota_ = value;
        return this;
      }
      public Builder ClearWithdrawQuota() {
        PrepareBuilder();
        result.hasWithdrawQuota = false;
        result.withdrawQuota_ = 0D;
        return this;
      }
      
      public bool HasReserve {
        get { return result.hasReserve; }
      }
      public double Reserve {
        get { return result.Reserve; }
        set { SetReserve(value); }
      }
      public Builder SetReserve(double value) {
        PrepareBuilder();
        result.hasReserve = true;
        result.reserve_ = value;
        return this;
      }
      public Builder ClearReserve() {
        PrepareBuilder();
        result.hasReserve = false;
        result.reserve_ = 0D;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
      
      public bool HasCredit {
        get { return result.hasCredit; }
      }
      public double Credit {
        get { return result.Credit; }
        set { SetCredit(value); }
      }
      public Builder SetCredit(double value) {
        PrepareBuilder();
        result.hasCredit = true;
        result.credit_ = value;
        return this;
      }
      public Builder ClearCredit() {
        PrepareBuilder();
        result.hasCredit = false;
        result.credit_ = 0D;
        return this;
      }
      
      public bool HasMortgage {
        get { return result.hasMortgage; }
      }
      public double Mortgage {
        get { return result.Mortgage; }
        set { SetMortgage(value); }
      }
      public Builder SetMortgage(double value) {
        PrepareBuilder();
        result.hasMortgage = true;
        result.mortgage_ = value;
        return this;
      }
      public Builder ClearMortgage() {
        PrepareBuilder();
        result.hasMortgage = false;
        result.mortgage_ = 0D;
        return this;
      }
      
      public bool HasExchangeMargin {
        get { return result.hasExchangeMargin; }
      }
      public double ExchangeMargin {
        get { return result.ExchangeMargin; }
        set { SetExchangeMargin(value); }
      }
      public Builder SetExchangeMargin(double value) {
        PrepareBuilder();
        result.hasExchangeMargin = true;
        result.exchangeMargin_ = value;
        return this;
      }
      public Builder ClearExchangeMargin() {
        PrepareBuilder();
        result.hasExchangeMargin = false;
        result.exchangeMargin_ = 0D;
        return this;
      }
      
      public bool HasDeliveryMargin {
        get { return result.hasDeliveryMargin; }
      }
      public double DeliveryMargin {
        get { return result.DeliveryMargin; }
        set { SetDeliveryMargin(value); }
      }
      public Builder SetDeliveryMargin(double value) {
        PrepareBuilder();
        result.hasDeliveryMargin = true;
        result.deliveryMargin_ = value;
        return this;
      }
      public Builder ClearDeliveryMargin() {
        PrepareBuilder();
        result.hasDeliveryMargin = false;
        result.deliveryMargin_ = 0D;
        return this;
      }
      
      public bool HasExchangeDeliveryMargin {
        get { return result.hasExchangeDeliveryMargin; }
      }
      public double ExchangeDeliveryMargin {
        get { return result.ExchangeDeliveryMargin; }
        set { SetExchangeDeliveryMargin(value); }
      }
      public Builder SetExchangeDeliveryMargin(double value) {
        PrepareBuilder();
        result.hasExchangeDeliveryMargin = true;
        result.exchangeDeliveryMargin_ = value;
        return this;
      }
      public Builder ClearExchangeDeliveryMargin() {
        PrepareBuilder();
        result.hasExchangeDeliveryMargin = false;
        result.exchangeDeliveryMargin_ = 0D;
        return this;
      }
      
      public bool HasReserveBalance {
        get { return result.hasReserveBalance; }
      }
      public double ReserveBalance {
        get { return result.ReserveBalance; }
        set { SetReserveBalance(value); }
      }
      public Builder SetReserveBalance(double value) {
        PrepareBuilder();
        result.hasReserveBalance = true;
        result.reserveBalance_ = value;
        return this;
      }
      public Builder ClearReserveBalance() {
        PrepareBuilder();
        result.hasReserveBalance = false;
        result.reserveBalance_ = 0D;
        return this;
      }
    }
    static PBMsgQueryRspFund() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgOrderInsert : pb::GeneratedMessage<PBMsgOrderInsert, PBMsgOrderInsert.Builder> {
    private PBMsgOrderInsert() { }
    private static readonly PBMsgOrderInsert defaultInstance = new PBMsgOrderInsert().MakeReadOnly();
    private static readonly string[] _pBMsgOrderInsertFieldNames = new string[] { "BrokerID", "BusinessUnit", "CombHedgeFlag", "CombOffsetFlag", "ContingentCondition", "Direction", "ForceCloseReason", "GTDDate", "InstrumentID", "InvestorID", "IsAutoSuspend", "IsSwapOrder", "LimitPrice", "MinVolume", "OrderPriceType", "OrderRef", "RequestID", "StopPrice", "TimeCondition", "UserForceClose", "UserID", "VolumeCondition", "VolumeTotalOriginal" };
    private static readonly uint[] _pBMsgOrderInsertFieldTags = new uint[] { 18, 170, 82, 74, 138, 66, 154, 114, 34, 26, 160, 192, 89, 128, 58, 42, 176, 145, 106, 184, 50, 122, 96 };
    public static PBMsgOrderInsert DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgOrderInsert DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgOrderInsert ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderInsert__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgOrderInsert, PBMsgOrderInsert.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderInsert__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int OrderRefFieldNumber = 5;
    private bool hasOrderRef;
    private string orderRef_ = "";
    public bool HasOrderRef {
      get { return hasOrderRef; }
    }
    public string OrderRef {
      get { return orderRef_; }
    }
    
    public const int UserIDFieldNumber = 6;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int OrderPriceTypeFieldNumber = 7;
    private bool hasOrderPriceType;
    private string orderPriceType_ = "";
    public bool HasOrderPriceType {
      get { return hasOrderPriceType; }
    }
    public string OrderPriceType {
      get { return orderPriceType_; }
    }
    
    public const int DirectionFieldNumber = 8;
    private bool hasDirection;
    private string direction_ = "";
    public bool HasDirection {
      get { return hasDirection; }
    }
    public string Direction {
      get { return direction_; }
    }
    
    public const int CombOffsetFlagFieldNumber = 9;
    private bool hasCombOffsetFlag;
    private string combOffsetFlag_ = "";
    public bool HasCombOffsetFlag {
      get { return hasCombOffsetFlag; }
    }
    public string CombOffsetFlag {
      get { return combOffsetFlag_; }
    }
    
    public const int CombHedgeFlagFieldNumber = 10;
    private bool hasCombHedgeFlag;
    private string combHedgeFlag_ = "";
    public bool HasCombHedgeFlag {
      get { return hasCombHedgeFlag; }
    }
    public string CombHedgeFlag {
      get { return combHedgeFlag_; }
    }
    
    public const int LimitPriceFieldNumber = 11;
    private bool hasLimitPrice;
    private double limitPrice_;
    public bool HasLimitPrice {
      get { return hasLimitPrice; }
    }
    public double LimitPrice {
      get { return limitPrice_; }
    }
    
    public const int VolumeTotalOriginalFieldNumber = 12;
    private bool hasVolumeTotalOriginal;
    private int volumeTotalOriginal_;
    public bool HasVolumeTotalOriginal {
      get { return hasVolumeTotalOriginal; }
    }
    public int VolumeTotalOriginal {
      get { return volumeTotalOriginal_; }
    }
    
    public const int TimeConditionFieldNumber = 13;
    private bool hasTimeCondition;
    private string timeCondition_ = "";
    public bool HasTimeCondition {
      get { return hasTimeCondition; }
    }
    public string TimeCondition {
      get { return timeCondition_; }
    }
    
    public const int GTDDateFieldNumber = 14;
    private bool hasGTDDate;
    private string gTDDate_ = "";
    public bool HasGTDDate {
      get { return hasGTDDate; }
    }
    public string GTDDate {
      get { return gTDDate_; }
    }
    
    public const int VolumeConditionFieldNumber = 15;
    private bool hasVolumeCondition;
    private string volumeCondition_ = "";
    public bool HasVolumeCondition {
      get { return hasVolumeCondition; }
    }
    public string VolumeCondition {
      get { return volumeCondition_; }
    }
    
    public const int MinVolumeFieldNumber = 16;
    private bool hasMinVolume;
    private int minVolume_;
    public bool HasMinVolume {
      get { return hasMinVolume; }
    }
    public int MinVolume {
      get { return minVolume_; }
    }
    
    public const int ContingentConditionFieldNumber = 17;
    private bool hasContingentCondition;
    private string contingentCondition_ = "";
    public bool HasContingentCondition {
      get { return hasContingentCondition; }
    }
    public string ContingentCondition {
      get { return contingentCondition_; }
    }
    
    public const int StopPriceFieldNumber = 18;
    private bool hasStopPrice;
    private double stopPrice_;
    public bool HasStopPrice {
      get { return hasStopPrice; }
    }
    public double StopPrice {
      get { return stopPrice_; }
    }
    
    public const int ForceCloseReasonFieldNumber = 19;
    private bool hasForceCloseReason;
    private string forceCloseReason_ = "";
    public bool HasForceCloseReason {
      get { return hasForceCloseReason; }
    }
    public string ForceCloseReason {
      get { return forceCloseReason_; }
    }
    
    public const int IsAutoSuspendFieldNumber = 20;
    private bool hasIsAutoSuspend;
    private int isAutoSuspend_;
    public bool HasIsAutoSuspend {
      get { return hasIsAutoSuspend; }
    }
    public int IsAutoSuspend {
      get { return isAutoSuspend_; }
    }
    
    public const int BusinessUnitFieldNumber = 21;
    private bool hasBusinessUnit;
    private string businessUnit_ = "";
    public bool HasBusinessUnit {
      get { return hasBusinessUnit; }
    }
    public string BusinessUnit {
      get { return businessUnit_; }
    }
    
    public const int RequestIDFieldNumber = 22;
    private bool hasRequestID;
    private int requestID_;
    public bool HasRequestID {
      get { return hasRequestID; }
    }
    public int RequestID {
      get { return requestID_; }
    }
    
    public const int UserForceCloseFieldNumber = 23;
    private bool hasUserForceClose;
    private int userForceClose_;
    public bool HasUserForceClose {
      get { return hasUserForceClose; }
    }
    public int UserForceClose {
      get { return userForceClose_; }
    }
    
    public const int IsSwapOrderFieldNumber = 24;
    private bool hasIsSwapOrder;
    private int isSwapOrder_;
    public bool HasIsSwapOrder {
      get { return hasIsSwapOrder; }
    }
    public int IsSwapOrder {
      get { return isSwapOrder_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgOrderInsertFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[9], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[8], InstrumentID);
      }
      if (hasOrderRef) {
        output.WriteString(5, field_names[15], OrderRef);
      }
      if (hasUserID) {
        output.WriteString(6, field_names[20], UserID);
      }
      if (hasOrderPriceType) {
        output.WriteString(7, field_names[14], OrderPriceType);
      }
      if (hasDirection) {
        output.WriteString(8, field_names[5], Direction);
      }
      if (hasCombOffsetFlag) {
        output.WriteString(9, field_names[3], CombOffsetFlag);
      }
      if (hasCombHedgeFlag) {
        output.WriteString(10, field_names[2], CombHedgeFlag);
      }
      if (hasLimitPrice) {
        output.WriteDouble(11, field_names[12], LimitPrice);
      }
      if (hasVolumeTotalOriginal) {
        output.WriteInt32(12, field_names[22], VolumeTotalOriginal);
      }
      if (hasTimeCondition) {
        output.WriteString(13, field_names[18], TimeCondition);
      }
      if (hasGTDDate) {
        output.WriteString(14, field_names[7], GTDDate);
      }
      if (hasVolumeCondition) {
        output.WriteString(15, field_names[21], VolumeCondition);
      }
      if (hasMinVolume) {
        output.WriteInt32(16, field_names[13], MinVolume);
      }
      if (hasContingentCondition) {
        output.WriteString(17, field_names[4], ContingentCondition);
      }
      if (hasStopPrice) {
        output.WriteDouble(18, field_names[17], StopPrice);
      }
      if (hasForceCloseReason) {
        output.WriteString(19, field_names[6], ForceCloseReason);
      }
      if (hasIsAutoSuspend) {
        output.WriteInt32(20, field_names[10], IsAutoSuspend);
      }
      if (hasBusinessUnit) {
        output.WriteString(21, field_names[1], BusinessUnit);
      }
      if (hasRequestID) {
        output.WriteInt32(22, field_names[16], RequestID);
      }
      if (hasUserForceClose) {
        output.WriteInt32(23, field_names[19], UserForceClose);
      }
      if (hasIsSwapOrder) {
        output.WriteInt32(24, field_names[11], IsSwapOrder);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        if (hasOrderRef) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderRef);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserID);
        }
        if (hasOrderPriceType) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OrderPriceType);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Direction);
        }
        if (hasCombOffsetFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(9, CombOffsetFlag);
        }
        if (hasCombHedgeFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CombHedgeFlag);
        }
        if (hasLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, LimitPrice);
        }
        if (hasVolumeTotalOriginal) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, VolumeTotalOriginal);
        }
        if (hasTimeCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(13, TimeCondition);
        }
        if (hasGTDDate) {
          size += pb::CodedOutputStream.ComputeStringSize(14, GTDDate);
        }
        if (hasVolumeCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(15, VolumeCondition);
        }
        if (hasMinVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, MinVolume);
        }
        if (hasContingentCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(17, ContingentCondition);
        }
        if (hasStopPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, StopPrice);
        }
        if (hasForceCloseReason) {
          size += pb::CodedOutputStream.ComputeStringSize(19, ForceCloseReason);
        }
        if (hasIsAutoSuspend) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, IsAutoSuspend);
        }
        if (hasBusinessUnit) {
          size += pb::CodedOutputStream.ComputeStringSize(21, BusinessUnit);
        }
        if (hasRequestID) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, RequestID);
        }
        if (hasUserForceClose) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, UserForceClose);
        }
        if (hasIsSwapOrder) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, IsSwapOrder);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgOrderInsert ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgOrderInsert ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderInsert ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgOrderInsert MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgOrderInsert prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgOrderInsert, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgOrderInsert cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgOrderInsert result;
      
      private PBMsgOrderInsert PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgOrderInsert original = result;
          result = new PBMsgOrderInsert();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgOrderInsert MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgOrderInsert.Descriptor; }
      }
      
      public override PBMsgOrderInsert DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgOrderInsert.DefaultInstance; }
      }
      
      public override PBMsgOrderInsert BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgOrderInsert) {
          return MergeFrom((PBMsgOrderInsert) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgOrderInsert other) {
        if (other == global::PBMsgTrader.PBMsgOrderInsert.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasOrderRef) {
          OrderRef = other.OrderRef;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasOrderPriceType) {
          OrderPriceType = other.OrderPriceType;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasCombOffsetFlag) {
          CombOffsetFlag = other.CombOffsetFlag;
        }
        if (other.HasCombHedgeFlag) {
          CombHedgeFlag = other.CombHedgeFlag;
        }
        if (other.HasLimitPrice) {
          LimitPrice = other.LimitPrice;
        }
        if (other.HasVolumeTotalOriginal) {
          VolumeTotalOriginal = other.VolumeTotalOriginal;
        }
        if (other.HasTimeCondition) {
          TimeCondition = other.TimeCondition;
        }
        if (other.HasGTDDate) {
          GTDDate = other.GTDDate;
        }
        if (other.HasVolumeCondition) {
          VolumeCondition = other.VolumeCondition;
        }
        if (other.HasMinVolume) {
          MinVolume = other.MinVolume;
        }
        if (other.HasContingentCondition) {
          ContingentCondition = other.ContingentCondition;
        }
        if (other.HasStopPrice) {
          StopPrice = other.StopPrice;
        }
        if (other.HasForceCloseReason) {
          ForceCloseReason = other.ForceCloseReason;
        }
        if (other.HasIsAutoSuspend) {
          IsAutoSuspend = other.IsAutoSuspend;
        }
        if (other.HasBusinessUnit) {
          BusinessUnit = other.BusinessUnit;
        }
        if (other.HasRequestID) {
          RequestID = other.RequestID;
        }
        if (other.HasUserForceClose) {
          UserForceClose = other.UserForceClose;
        }
        if (other.HasIsSwapOrder) {
          IsSwapOrder = other.IsSwapOrder;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgOrderInsertFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgOrderInsertFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 42: {
              result.hasOrderRef = input.ReadString(ref result.orderRef_);
              break;
            }
            case 50: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 58: {
              result.hasOrderPriceType = input.ReadString(ref result.orderPriceType_);
              break;
            }
            case 66: {
              result.hasDirection = input.ReadString(ref result.direction_);
              break;
            }
            case 74: {
              result.hasCombOffsetFlag = input.ReadString(ref result.combOffsetFlag_);
              break;
            }
            case 82: {
              result.hasCombHedgeFlag = input.ReadString(ref result.combHedgeFlag_);
              break;
            }
            case 89: {
              result.hasLimitPrice = input.ReadDouble(ref result.limitPrice_);
              break;
            }
            case 96: {
              result.hasVolumeTotalOriginal = input.ReadInt32(ref result.volumeTotalOriginal_);
              break;
            }
            case 106: {
              result.hasTimeCondition = input.ReadString(ref result.timeCondition_);
              break;
            }
            case 114: {
              result.hasGTDDate = input.ReadString(ref result.gTDDate_);
              break;
            }
            case 122: {
              result.hasVolumeCondition = input.ReadString(ref result.volumeCondition_);
              break;
            }
            case 128: {
              result.hasMinVolume = input.ReadInt32(ref result.minVolume_);
              break;
            }
            case 138: {
              result.hasContingentCondition = input.ReadString(ref result.contingentCondition_);
              break;
            }
            case 145: {
              result.hasStopPrice = input.ReadDouble(ref result.stopPrice_);
              break;
            }
            case 154: {
              result.hasForceCloseReason = input.ReadString(ref result.forceCloseReason_);
              break;
            }
            case 160: {
              result.hasIsAutoSuspend = input.ReadInt32(ref result.isAutoSuspend_);
              break;
            }
            case 170: {
              result.hasBusinessUnit = input.ReadString(ref result.businessUnit_);
              break;
            }
            case 176: {
              result.hasRequestID = input.ReadInt32(ref result.requestID_);
              break;
            }
            case 184: {
              result.hasUserForceClose = input.ReadInt32(ref result.userForceClose_);
              break;
            }
            case 192: {
              result.hasIsSwapOrder = input.ReadInt32(ref result.isSwapOrder_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasOrderRef {
        get { return result.hasOrderRef; }
      }
      public string OrderRef {
        get { return result.OrderRef; }
        set { SetOrderRef(value); }
      }
      public Builder SetOrderRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderRef = true;
        result.orderRef_ = value;
        return this;
      }
      public Builder ClearOrderRef() {
        PrepareBuilder();
        result.hasOrderRef = false;
        result.orderRef_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasOrderPriceType {
        get { return result.hasOrderPriceType; }
      }
      public string OrderPriceType {
        get { return result.OrderPriceType; }
        set { SetOrderPriceType(value); }
      }
      public Builder SetOrderPriceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderPriceType = true;
        result.orderPriceType_ = value;
        return this;
      }
      public Builder ClearOrderPriceType() {
        PrepareBuilder();
        result.hasOrderPriceType = false;
        result.orderPriceType_ = "";
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public string Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = "";
        return this;
      }
      
      public bool HasCombOffsetFlag {
        get { return result.hasCombOffsetFlag; }
      }
      public string CombOffsetFlag {
        get { return result.CombOffsetFlag; }
        set { SetCombOffsetFlag(value); }
      }
      public Builder SetCombOffsetFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombOffsetFlag = true;
        result.combOffsetFlag_ = value;
        return this;
      }
      public Builder ClearCombOffsetFlag() {
        PrepareBuilder();
        result.hasCombOffsetFlag = false;
        result.combOffsetFlag_ = "";
        return this;
      }
      
      public bool HasCombHedgeFlag {
        get { return result.hasCombHedgeFlag; }
      }
      public string CombHedgeFlag {
        get { return result.CombHedgeFlag; }
        set { SetCombHedgeFlag(value); }
      }
      public Builder SetCombHedgeFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombHedgeFlag = true;
        result.combHedgeFlag_ = value;
        return this;
      }
      public Builder ClearCombHedgeFlag() {
        PrepareBuilder();
        result.hasCombHedgeFlag = false;
        result.combHedgeFlag_ = "";
        return this;
      }
      
      public bool HasLimitPrice {
        get { return result.hasLimitPrice; }
      }
      public double LimitPrice {
        get { return result.LimitPrice; }
        set { SetLimitPrice(value); }
      }
      public Builder SetLimitPrice(double value) {
        PrepareBuilder();
        result.hasLimitPrice = true;
        result.limitPrice_ = value;
        return this;
      }
      public Builder ClearLimitPrice() {
        PrepareBuilder();
        result.hasLimitPrice = false;
        result.limitPrice_ = 0D;
        return this;
      }
      
      public bool HasVolumeTotalOriginal {
        get { return result.hasVolumeTotalOriginal; }
      }
      public int VolumeTotalOriginal {
        get { return result.VolumeTotalOriginal; }
        set { SetVolumeTotalOriginal(value); }
      }
      public Builder SetVolumeTotalOriginal(int value) {
        PrepareBuilder();
        result.hasVolumeTotalOriginal = true;
        result.volumeTotalOriginal_ = value;
        return this;
      }
      public Builder ClearVolumeTotalOriginal() {
        PrepareBuilder();
        result.hasVolumeTotalOriginal = false;
        result.volumeTotalOriginal_ = 0;
        return this;
      }
      
      public bool HasTimeCondition {
        get { return result.hasTimeCondition; }
      }
      public string TimeCondition {
        get { return result.TimeCondition; }
        set { SetTimeCondition(value); }
      }
      public Builder SetTimeCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeCondition = true;
        result.timeCondition_ = value;
        return this;
      }
      public Builder ClearTimeCondition() {
        PrepareBuilder();
        result.hasTimeCondition = false;
        result.timeCondition_ = "";
        return this;
      }
      
      public bool HasGTDDate {
        get { return result.hasGTDDate; }
      }
      public string GTDDate {
        get { return result.GTDDate; }
        set { SetGTDDate(value); }
      }
      public Builder SetGTDDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGTDDate = true;
        result.gTDDate_ = value;
        return this;
      }
      public Builder ClearGTDDate() {
        PrepareBuilder();
        result.hasGTDDate = false;
        result.gTDDate_ = "";
        return this;
      }
      
      public bool HasVolumeCondition {
        get { return result.hasVolumeCondition; }
      }
      public string VolumeCondition {
        get { return result.VolumeCondition; }
        set { SetVolumeCondition(value); }
      }
      public Builder SetVolumeCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVolumeCondition = true;
        result.volumeCondition_ = value;
        return this;
      }
      public Builder ClearVolumeCondition() {
        PrepareBuilder();
        result.hasVolumeCondition = false;
        result.volumeCondition_ = "";
        return this;
      }
      
      public bool HasMinVolume {
        get { return result.hasMinVolume; }
      }
      public int MinVolume {
        get { return result.MinVolume; }
        set { SetMinVolume(value); }
      }
      public Builder SetMinVolume(int value) {
        PrepareBuilder();
        result.hasMinVolume = true;
        result.minVolume_ = value;
        return this;
      }
      public Builder ClearMinVolume() {
        PrepareBuilder();
        result.hasMinVolume = false;
        result.minVolume_ = 0;
        return this;
      }
      
      public bool HasContingentCondition {
        get { return result.hasContingentCondition; }
      }
      public string ContingentCondition {
        get { return result.ContingentCondition; }
        set { SetContingentCondition(value); }
      }
      public Builder SetContingentCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContingentCondition = true;
        result.contingentCondition_ = value;
        return this;
      }
      public Builder ClearContingentCondition() {
        PrepareBuilder();
        result.hasContingentCondition = false;
        result.contingentCondition_ = "";
        return this;
      }
      
      public bool HasStopPrice {
        get { return result.hasStopPrice; }
      }
      public double StopPrice {
        get { return result.StopPrice; }
        set { SetStopPrice(value); }
      }
      public Builder SetStopPrice(double value) {
        PrepareBuilder();
        result.hasStopPrice = true;
        result.stopPrice_ = value;
        return this;
      }
      public Builder ClearStopPrice() {
        PrepareBuilder();
        result.hasStopPrice = false;
        result.stopPrice_ = 0D;
        return this;
      }
      
      public bool HasForceCloseReason {
        get { return result.hasForceCloseReason; }
      }
      public string ForceCloseReason {
        get { return result.ForceCloseReason; }
        set { SetForceCloseReason(value); }
      }
      public Builder SetForceCloseReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasForceCloseReason = true;
        result.forceCloseReason_ = value;
        return this;
      }
      public Builder ClearForceCloseReason() {
        PrepareBuilder();
        result.hasForceCloseReason = false;
        result.forceCloseReason_ = "";
        return this;
      }
      
      public bool HasIsAutoSuspend {
        get { return result.hasIsAutoSuspend; }
      }
      public int IsAutoSuspend {
        get { return result.IsAutoSuspend; }
        set { SetIsAutoSuspend(value); }
      }
      public Builder SetIsAutoSuspend(int value) {
        PrepareBuilder();
        result.hasIsAutoSuspend = true;
        result.isAutoSuspend_ = value;
        return this;
      }
      public Builder ClearIsAutoSuspend() {
        PrepareBuilder();
        result.hasIsAutoSuspend = false;
        result.isAutoSuspend_ = 0;
        return this;
      }
      
      public bool HasBusinessUnit {
        get { return result.hasBusinessUnit; }
      }
      public string BusinessUnit {
        get { return result.BusinessUnit; }
        set { SetBusinessUnit(value); }
      }
      public Builder SetBusinessUnit(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBusinessUnit = true;
        result.businessUnit_ = value;
        return this;
      }
      public Builder ClearBusinessUnit() {
        PrepareBuilder();
        result.hasBusinessUnit = false;
        result.businessUnit_ = "";
        return this;
      }
      
      public bool HasRequestID {
        get { return result.hasRequestID; }
      }
      public int RequestID {
        get { return result.RequestID; }
        set { SetRequestID(value); }
      }
      public Builder SetRequestID(int value) {
        PrepareBuilder();
        result.hasRequestID = true;
        result.requestID_ = value;
        return this;
      }
      public Builder ClearRequestID() {
        PrepareBuilder();
        result.hasRequestID = false;
        result.requestID_ = 0;
        return this;
      }
      
      public bool HasUserForceClose {
        get { return result.hasUserForceClose; }
      }
      public int UserForceClose {
        get { return result.UserForceClose; }
        set { SetUserForceClose(value); }
      }
      public Builder SetUserForceClose(int value) {
        PrepareBuilder();
        result.hasUserForceClose = true;
        result.userForceClose_ = value;
        return this;
      }
      public Builder ClearUserForceClose() {
        PrepareBuilder();
        result.hasUserForceClose = false;
        result.userForceClose_ = 0;
        return this;
      }
      
      public bool HasIsSwapOrder {
        get { return result.hasIsSwapOrder; }
      }
      public int IsSwapOrder {
        get { return result.IsSwapOrder; }
        set { SetIsSwapOrder(value); }
      }
      public Builder SetIsSwapOrder(int value) {
        PrepareBuilder();
        result.hasIsSwapOrder = true;
        result.isSwapOrder_ = value;
        return this;
      }
      public Builder ClearIsSwapOrder() {
        PrepareBuilder();
        result.hasIsSwapOrder = false;
        result.isSwapOrder_ = 0;
        return this;
      }
    }
    static PBMsgOrderInsert() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgOrderAction : pb::GeneratedMessage<PBMsgOrderAction, PBMsgOrderAction.Builder> {
    private PBMsgOrderAction() { }
    private static readonly PBMsgOrderAction defaultInstance = new PBMsgOrderAction().MakeReadOnly();
    private static readonly string[] _pBMsgOrderActionFieldNames = new string[] { "ActionDate", "ActionFlag", "ActionLocalID", "ActionTime", "BrokerID", "BusinessUnit", "ClientID", "ExchangeID", "FrontID", "InstallID", "InstrumentID", "InvestorID", "LimitPrice", "OrderActionRef", "OrderActionStatus", "OrderLocalID", "OrderRef", "OrderSysID", "ParticipantID", "RequestID", "SessionID", "StatusMsg", "TraderID", "UserID", "VolumeChange" };
    private static readonly uint[] _pBMsgOrderActionFieldTags = new uint[] { 114, 90, 154, 122, 18, 178, 170, 74, 56, 136, 210, 26, 97, 32, 186, 146, 42, 82, 162, 48, 64, 202, 130, 194, 104 };
    public static PBMsgOrderAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgOrderAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgOrderAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgOrderAction, PBMsgOrderAction.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderAction__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int OrderActionRefFieldNumber = 4;
    private bool hasOrderActionRef;
    private int orderActionRef_;
    public bool HasOrderActionRef {
      get { return hasOrderActionRef; }
    }
    public int OrderActionRef {
      get { return orderActionRef_; }
    }
    
    public const int OrderRefFieldNumber = 5;
    private bool hasOrderRef;
    private string orderRef_ = "";
    public bool HasOrderRef {
      get { return hasOrderRef; }
    }
    public string OrderRef {
      get { return orderRef_; }
    }
    
    public const int RequestIDFieldNumber = 6;
    private bool hasRequestID;
    private int requestID_;
    public bool HasRequestID {
      get { return hasRequestID; }
    }
    public int RequestID {
      get { return requestID_; }
    }
    
    public const int FrontIDFieldNumber = 7;
    private bool hasFrontID;
    private int frontID_;
    public bool HasFrontID {
      get { return hasFrontID; }
    }
    public int FrontID {
      get { return frontID_; }
    }
    
    public const int SessionIDFieldNumber = 8;
    private bool hasSessionID;
    private int sessionID_;
    public bool HasSessionID {
      get { return hasSessionID; }
    }
    public int SessionID {
      get { return sessionID_; }
    }
    
    public const int ExchangeIDFieldNumber = 9;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int OrderSysIDFieldNumber = 10;
    private bool hasOrderSysID;
    private string orderSysID_ = "";
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public string OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int ActionFlagFieldNumber = 11;
    private bool hasActionFlag;
    private string actionFlag_ = "";
    public bool HasActionFlag {
      get { return hasActionFlag; }
    }
    public string ActionFlag {
      get { return actionFlag_; }
    }
    
    public const int LimitPriceFieldNumber = 12;
    private bool hasLimitPrice;
    private double limitPrice_;
    public bool HasLimitPrice {
      get { return hasLimitPrice; }
    }
    public double LimitPrice {
      get { return limitPrice_; }
    }
    
    public const int VolumeChangeFieldNumber = 13;
    private bool hasVolumeChange;
    private int volumeChange_;
    public bool HasVolumeChange {
      get { return hasVolumeChange; }
    }
    public int VolumeChange {
      get { return volumeChange_; }
    }
    
    public const int ActionDateFieldNumber = 14;
    private bool hasActionDate;
    private string actionDate_ = "";
    public bool HasActionDate {
      get { return hasActionDate; }
    }
    public string ActionDate {
      get { return actionDate_; }
    }
    
    public const int ActionTimeFieldNumber = 15;
    private bool hasActionTime;
    private string actionTime_ = "";
    public bool HasActionTime {
      get { return hasActionTime; }
    }
    public string ActionTime {
      get { return actionTime_; }
    }
    
    public const int TraderIDFieldNumber = 16;
    private bool hasTraderID;
    private string traderID_ = "";
    public bool HasTraderID {
      get { return hasTraderID; }
    }
    public string TraderID {
      get { return traderID_; }
    }
    
    public const int InstallIDFieldNumber = 17;
    private bool hasInstallID;
    private int installID_;
    public bool HasInstallID {
      get { return hasInstallID; }
    }
    public int InstallID {
      get { return installID_; }
    }
    
    public const int OrderLocalIDFieldNumber = 18;
    private bool hasOrderLocalID;
    private string orderLocalID_ = "";
    public bool HasOrderLocalID {
      get { return hasOrderLocalID; }
    }
    public string OrderLocalID {
      get { return orderLocalID_; }
    }
    
    public const int ActionLocalIDFieldNumber = 19;
    private bool hasActionLocalID;
    private string actionLocalID_ = "";
    public bool HasActionLocalID {
      get { return hasActionLocalID; }
    }
    public string ActionLocalID {
      get { return actionLocalID_; }
    }
    
    public const int ParticipantIDFieldNumber = 20;
    private bool hasParticipantID;
    private string participantID_ = "";
    public bool HasParticipantID {
      get { return hasParticipantID; }
    }
    public string ParticipantID {
      get { return participantID_; }
    }
    
    public const int ClientIDFieldNumber = 21;
    private bool hasClientID;
    private string clientID_ = "";
    public bool HasClientID {
      get { return hasClientID; }
    }
    public string ClientID {
      get { return clientID_; }
    }
    
    public const int BusinessUnitFieldNumber = 22;
    private bool hasBusinessUnit;
    private string businessUnit_ = "";
    public bool HasBusinessUnit {
      get { return hasBusinessUnit; }
    }
    public string BusinessUnit {
      get { return businessUnit_; }
    }
    
    public const int OrderActionStatusFieldNumber = 23;
    private bool hasOrderActionStatus;
    private string orderActionStatus_ = "";
    public bool HasOrderActionStatus {
      get { return hasOrderActionStatus; }
    }
    public string OrderActionStatus {
      get { return orderActionStatus_; }
    }
    
    public const int UserIDFieldNumber = 24;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int StatusMsgFieldNumber = 25;
    private bool hasStatusMsg;
    private pb::ByteString statusMsg_ = pb::ByteString.Empty;
    public bool HasStatusMsg {
      get { return hasStatusMsg; }
    }
    public pb::ByteString StatusMsg {
      get { return statusMsg_; }
    }
    
    public const int InstrumentIDFieldNumber = 26;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgOrderActionFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[4], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[11], InvestorID);
      }
      if (hasOrderActionRef) {
        output.WriteInt32(4, field_names[13], OrderActionRef);
      }
      if (hasOrderRef) {
        output.WriteString(5, field_names[16], OrderRef);
      }
      if (hasRequestID) {
        output.WriteInt32(6, field_names[19], RequestID);
      }
      if (hasFrontID) {
        output.WriteInt32(7, field_names[8], FrontID);
      }
      if (hasSessionID) {
        output.WriteInt32(8, field_names[20], SessionID);
      }
      if (hasExchangeID) {
        output.WriteString(9, field_names[7], ExchangeID);
      }
      if (hasOrderSysID) {
        output.WriteString(10, field_names[17], OrderSysID);
      }
      if (hasActionFlag) {
        output.WriteString(11, field_names[1], ActionFlag);
      }
      if (hasLimitPrice) {
        output.WriteDouble(12, field_names[12], LimitPrice);
      }
      if (hasVolumeChange) {
        output.WriteInt32(13, field_names[24], VolumeChange);
      }
      if (hasActionDate) {
        output.WriteString(14, field_names[0], ActionDate);
      }
      if (hasActionTime) {
        output.WriteString(15, field_names[3], ActionTime);
      }
      if (hasTraderID) {
        output.WriteString(16, field_names[22], TraderID);
      }
      if (hasInstallID) {
        output.WriteInt32(17, field_names[9], InstallID);
      }
      if (hasOrderLocalID) {
        output.WriteString(18, field_names[15], OrderLocalID);
      }
      if (hasActionLocalID) {
        output.WriteString(19, field_names[2], ActionLocalID);
      }
      if (hasParticipantID) {
        output.WriteString(20, field_names[18], ParticipantID);
      }
      if (hasClientID) {
        output.WriteString(21, field_names[6], ClientID);
      }
      if (hasBusinessUnit) {
        output.WriteString(22, field_names[5], BusinessUnit);
      }
      if (hasOrderActionStatus) {
        output.WriteString(23, field_names[14], OrderActionStatus);
      }
      if (hasUserID) {
        output.WriteString(24, field_names[23], UserID);
      }
      if (hasStatusMsg) {
        output.WriteBytes(25, field_names[21], StatusMsg);
      }
      if (hasInstrumentID) {
        output.WriteString(26, field_names[10], InstrumentID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasOrderActionRef) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, OrderActionRef);
        }
        if (hasOrderRef) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderRef);
        }
        if (hasRequestID) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, RequestID);
        }
        if (hasFrontID) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, FrontID);
        }
        if (hasSessionID) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SessionID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ExchangeID);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeStringSize(10, OrderSysID);
        }
        if (hasActionFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ActionFlag);
        }
        if (hasLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, LimitPrice);
        }
        if (hasVolumeChange) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, VolumeChange);
        }
        if (hasActionDate) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ActionDate);
        }
        if (hasActionTime) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ActionTime);
        }
        if (hasTraderID) {
          size += pb::CodedOutputStream.ComputeStringSize(16, TraderID);
        }
        if (hasInstallID) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, InstallID);
        }
        if (hasOrderLocalID) {
          size += pb::CodedOutputStream.ComputeStringSize(18, OrderLocalID);
        }
        if (hasActionLocalID) {
          size += pb::CodedOutputStream.ComputeStringSize(19, ActionLocalID);
        }
        if (hasParticipantID) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ParticipantID);
        }
        if (hasClientID) {
          size += pb::CodedOutputStream.ComputeStringSize(21, ClientID);
        }
        if (hasBusinessUnit) {
          size += pb::CodedOutputStream.ComputeStringSize(22, BusinessUnit);
        }
        if (hasOrderActionStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(23, OrderActionStatus);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(24, UserID);
        }
        if (hasStatusMsg) {
          size += pb::CodedOutputStream.ComputeBytesSize(25, StatusMsg);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(26, InstrumentID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgOrderAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgOrderAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgOrderAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgOrderAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgOrderAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgOrderAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgOrderAction result;
      
      private PBMsgOrderAction PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgOrderAction original = result;
          result = new PBMsgOrderAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgOrderAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgOrderAction.Descriptor; }
      }
      
      public override PBMsgOrderAction DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgOrderAction.DefaultInstance; }
      }
      
      public override PBMsgOrderAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgOrderAction) {
          return MergeFrom((PBMsgOrderAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgOrderAction other) {
        if (other == global::PBMsgTrader.PBMsgOrderAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasOrderActionRef) {
          OrderActionRef = other.OrderActionRef;
        }
        if (other.HasOrderRef) {
          OrderRef = other.OrderRef;
        }
        if (other.HasRequestID) {
          RequestID = other.RequestID;
        }
        if (other.HasFrontID) {
          FrontID = other.FrontID;
        }
        if (other.HasSessionID) {
          SessionID = other.SessionID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasActionFlag) {
          ActionFlag = other.ActionFlag;
        }
        if (other.HasLimitPrice) {
          LimitPrice = other.LimitPrice;
        }
        if (other.HasVolumeChange) {
          VolumeChange = other.VolumeChange;
        }
        if (other.HasActionDate) {
          ActionDate = other.ActionDate;
        }
        if (other.HasActionTime) {
          ActionTime = other.ActionTime;
        }
        if (other.HasTraderID) {
          TraderID = other.TraderID;
        }
        if (other.HasInstallID) {
          InstallID = other.InstallID;
        }
        if (other.HasOrderLocalID) {
          OrderLocalID = other.OrderLocalID;
        }
        if (other.HasActionLocalID) {
          ActionLocalID = other.ActionLocalID;
        }
        if (other.HasParticipantID) {
          ParticipantID = other.ParticipantID;
        }
        if (other.HasClientID) {
          ClientID = other.ClientID;
        }
        if (other.HasBusinessUnit) {
          BusinessUnit = other.BusinessUnit;
        }
        if (other.HasOrderActionStatus) {
          OrderActionStatus = other.OrderActionStatus;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasStatusMsg) {
          StatusMsg = other.StatusMsg;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgOrderActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgOrderActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 32: {
              result.hasOrderActionRef = input.ReadInt32(ref result.orderActionRef_);
              break;
            }
            case 42: {
              result.hasOrderRef = input.ReadString(ref result.orderRef_);
              break;
            }
            case 48: {
              result.hasRequestID = input.ReadInt32(ref result.requestID_);
              break;
            }
            case 56: {
              result.hasFrontID = input.ReadInt32(ref result.frontID_);
              break;
            }
            case 64: {
              result.hasSessionID = input.ReadInt32(ref result.sessionID_);
              break;
            }
            case 74: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 82: {
              result.hasOrderSysID = input.ReadString(ref result.orderSysID_);
              break;
            }
            case 90: {
              result.hasActionFlag = input.ReadString(ref result.actionFlag_);
              break;
            }
            case 97: {
              result.hasLimitPrice = input.ReadDouble(ref result.limitPrice_);
              break;
            }
            case 104: {
              result.hasVolumeChange = input.ReadInt32(ref result.volumeChange_);
              break;
            }
            case 114: {
              result.hasActionDate = input.ReadString(ref result.actionDate_);
              break;
            }
            case 122: {
              result.hasActionTime = input.ReadString(ref result.actionTime_);
              break;
            }
            case 130: {
              result.hasTraderID = input.ReadString(ref result.traderID_);
              break;
            }
            case 136: {
              result.hasInstallID = input.ReadInt32(ref result.installID_);
              break;
            }
            case 146: {
              result.hasOrderLocalID = input.ReadString(ref result.orderLocalID_);
              break;
            }
            case 154: {
              result.hasActionLocalID = input.ReadString(ref result.actionLocalID_);
              break;
            }
            case 162: {
              result.hasParticipantID = input.ReadString(ref result.participantID_);
              break;
            }
            case 170: {
              result.hasClientID = input.ReadString(ref result.clientID_);
              break;
            }
            case 178: {
              result.hasBusinessUnit = input.ReadString(ref result.businessUnit_);
              break;
            }
            case 186: {
              result.hasOrderActionStatus = input.ReadString(ref result.orderActionStatus_);
              break;
            }
            case 194: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 202: {
              result.hasStatusMsg = input.ReadBytes(ref result.statusMsg_);
              break;
            }
            case 210: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasOrderActionRef {
        get { return result.hasOrderActionRef; }
      }
      public int OrderActionRef {
        get { return result.OrderActionRef; }
        set { SetOrderActionRef(value); }
      }
      public Builder SetOrderActionRef(int value) {
        PrepareBuilder();
        result.hasOrderActionRef = true;
        result.orderActionRef_ = value;
        return this;
      }
      public Builder ClearOrderActionRef() {
        PrepareBuilder();
        result.hasOrderActionRef = false;
        result.orderActionRef_ = 0;
        return this;
      }
      
      public bool HasOrderRef {
        get { return result.hasOrderRef; }
      }
      public string OrderRef {
        get { return result.OrderRef; }
        set { SetOrderRef(value); }
      }
      public Builder SetOrderRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderRef = true;
        result.orderRef_ = value;
        return this;
      }
      public Builder ClearOrderRef() {
        PrepareBuilder();
        result.hasOrderRef = false;
        result.orderRef_ = "";
        return this;
      }
      
      public bool HasRequestID {
        get { return result.hasRequestID; }
      }
      public int RequestID {
        get { return result.RequestID; }
        set { SetRequestID(value); }
      }
      public Builder SetRequestID(int value) {
        PrepareBuilder();
        result.hasRequestID = true;
        result.requestID_ = value;
        return this;
      }
      public Builder ClearRequestID() {
        PrepareBuilder();
        result.hasRequestID = false;
        result.requestID_ = 0;
        return this;
      }
      
      public bool HasFrontID {
        get { return result.hasFrontID; }
      }
      public int FrontID {
        get { return result.FrontID; }
        set { SetFrontID(value); }
      }
      public Builder SetFrontID(int value) {
        PrepareBuilder();
        result.hasFrontID = true;
        result.frontID_ = value;
        return this;
      }
      public Builder ClearFrontID() {
        PrepareBuilder();
        result.hasFrontID = false;
        result.frontID_ = 0;
        return this;
      }
      
      public bool HasSessionID {
        get { return result.hasSessionID; }
      }
      public int SessionID {
        get { return result.SessionID; }
        set { SetSessionID(value); }
      }
      public Builder SetSessionID(int value) {
        PrepareBuilder();
        result.hasSessionID = true;
        result.sessionID_ = value;
        return this;
      }
      public Builder ClearSessionID() {
        PrepareBuilder();
        result.hasSessionID = false;
        result.sessionID_ = 0;
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public string OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = "";
        return this;
      }
      
      public bool HasActionFlag {
        get { return result.hasActionFlag; }
      }
      public string ActionFlag {
        get { return result.ActionFlag; }
        set { SetActionFlag(value); }
      }
      public Builder SetActionFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionFlag = true;
        result.actionFlag_ = value;
        return this;
      }
      public Builder ClearActionFlag() {
        PrepareBuilder();
        result.hasActionFlag = false;
        result.actionFlag_ = "";
        return this;
      }
      
      public bool HasLimitPrice {
        get { return result.hasLimitPrice; }
      }
      public double LimitPrice {
        get { return result.LimitPrice; }
        set { SetLimitPrice(value); }
      }
      public Builder SetLimitPrice(double value) {
        PrepareBuilder();
        result.hasLimitPrice = true;
        result.limitPrice_ = value;
        return this;
      }
      public Builder ClearLimitPrice() {
        PrepareBuilder();
        result.hasLimitPrice = false;
        result.limitPrice_ = 0D;
        return this;
      }
      
      public bool HasVolumeChange {
        get { return result.hasVolumeChange; }
      }
      public int VolumeChange {
        get { return result.VolumeChange; }
        set { SetVolumeChange(value); }
      }
      public Builder SetVolumeChange(int value) {
        PrepareBuilder();
        result.hasVolumeChange = true;
        result.volumeChange_ = value;
        return this;
      }
      public Builder ClearVolumeChange() {
        PrepareBuilder();
        result.hasVolumeChange = false;
        result.volumeChange_ = 0;
        return this;
      }
      
      public bool HasActionDate {
        get { return result.hasActionDate; }
      }
      public string ActionDate {
        get { return result.ActionDate; }
        set { SetActionDate(value); }
      }
      public Builder SetActionDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionDate = true;
        result.actionDate_ = value;
        return this;
      }
      public Builder ClearActionDate() {
        PrepareBuilder();
        result.hasActionDate = false;
        result.actionDate_ = "";
        return this;
      }
      
      public bool HasActionTime {
        get { return result.hasActionTime; }
      }
      public string ActionTime {
        get { return result.ActionTime; }
        set { SetActionTime(value); }
      }
      public Builder SetActionTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionTime = true;
        result.actionTime_ = value;
        return this;
      }
      public Builder ClearActionTime() {
        PrepareBuilder();
        result.hasActionTime = false;
        result.actionTime_ = "";
        return this;
      }
      
      public bool HasTraderID {
        get { return result.hasTraderID; }
      }
      public string TraderID {
        get { return result.TraderID; }
        set { SetTraderID(value); }
      }
      public Builder SetTraderID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTraderID = true;
        result.traderID_ = value;
        return this;
      }
      public Builder ClearTraderID() {
        PrepareBuilder();
        result.hasTraderID = false;
        result.traderID_ = "";
        return this;
      }
      
      public bool HasInstallID {
        get { return result.hasInstallID; }
      }
      public int InstallID {
        get { return result.InstallID; }
        set { SetInstallID(value); }
      }
      public Builder SetInstallID(int value) {
        PrepareBuilder();
        result.hasInstallID = true;
        result.installID_ = value;
        return this;
      }
      public Builder ClearInstallID() {
        PrepareBuilder();
        result.hasInstallID = false;
        result.installID_ = 0;
        return this;
      }
      
      public bool HasOrderLocalID {
        get { return result.hasOrderLocalID; }
      }
      public string OrderLocalID {
        get { return result.OrderLocalID; }
        set { SetOrderLocalID(value); }
      }
      public Builder SetOrderLocalID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderLocalID = true;
        result.orderLocalID_ = value;
        return this;
      }
      public Builder ClearOrderLocalID() {
        PrepareBuilder();
        result.hasOrderLocalID = false;
        result.orderLocalID_ = "";
        return this;
      }
      
      public bool HasActionLocalID {
        get { return result.hasActionLocalID; }
      }
      public string ActionLocalID {
        get { return result.ActionLocalID; }
        set { SetActionLocalID(value); }
      }
      public Builder SetActionLocalID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionLocalID = true;
        result.actionLocalID_ = value;
        return this;
      }
      public Builder ClearActionLocalID() {
        PrepareBuilder();
        result.hasActionLocalID = false;
        result.actionLocalID_ = "";
        return this;
      }
      
      public bool HasParticipantID {
        get { return result.hasParticipantID; }
      }
      public string ParticipantID {
        get { return result.ParticipantID; }
        set { SetParticipantID(value); }
      }
      public Builder SetParticipantID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParticipantID = true;
        result.participantID_ = value;
        return this;
      }
      public Builder ClearParticipantID() {
        PrepareBuilder();
        result.hasParticipantID = false;
        result.participantID_ = "";
        return this;
      }
      
      public bool HasClientID {
        get { return result.hasClientID; }
      }
      public string ClientID {
        get { return result.ClientID; }
        set { SetClientID(value); }
      }
      public Builder SetClientID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientID = true;
        result.clientID_ = value;
        return this;
      }
      public Builder ClearClientID() {
        PrepareBuilder();
        result.hasClientID = false;
        result.clientID_ = "";
        return this;
      }
      
      public bool HasBusinessUnit {
        get { return result.hasBusinessUnit; }
      }
      public string BusinessUnit {
        get { return result.BusinessUnit; }
        set { SetBusinessUnit(value); }
      }
      public Builder SetBusinessUnit(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBusinessUnit = true;
        result.businessUnit_ = value;
        return this;
      }
      public Builder ClearBusinessUnit() {
        PrepareBuilder();
        result.hasBusinessUnit = false;
        result.businessUnit_ = "";
        return this;
      }
      
      public bool HasOrderActionStatus {
        get { return result.hasOrderActionStatus; }
      }
      public string OrderActionStatus {
        get { return result.OrderActionStatus; }
        set { SetOrderActionStatus(value); }
      }
      public Builder SetOrderActionStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderActionStatus = true;
        result.orderActionStatus_ = value;
        return this;
      }
      public Builder ClearOrderActionStatus() {
        PrepareBuilder();
        result.hasOrderActionStatus = false;
        result.orderActionStatus_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasStatusMsg {
        get { return result.hasStatusMsg; }
      }
      public pb::ByteString StatusMsg {
        get { return result.StatusMsg; }
        set { SetStatusMsg(value); }
      }
      public Builder SetStatusMsg(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatusMsg = true;
        result.statusMsg_ = value;
        return this;
      }
      public Builder ClearStatusMsg() {
        PrepareBuilder();
        result.hasStatusMsg = false;
        result.statusMsg_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
    }
    static PBMsgOrderAction() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgOrderRtn : pb::GeneratedMessage<PBMsgOrderRtn, PBMsgOrderRtn.Builder> {
    private PBMsgOrderRtn() { }
    private static readonly PBMsgOrderRtn defaultInstance = new PBMsgOrderRtn().MakeReadOnly();
    private static readonly string[] _pBMsgOrderRtnFieldNames = new string[] { "ActiveTime", "ActiveTraderID", "ActiveUserID", "BrokerID", "BrokerOrderSeq", "BusinessUnit", "CancelTime", "ClearingPartID", "ClientID", "CombHedgeFlag", "CombOffsetFlag", "ContingentCondition", "Direction", "EOF", "ExchangeID", "ExchangeInstID", "ForceCloseReason", "FrontID", "GTDDate", "IOrderStatus", "InsertDate", "InsertTime", "InstallID", "InstrumentID", "InvestorID", "IsAutoSuspend", "IsSwapOrder", "LimitPrice", "MinVolume", "NotifySequence", "OrderLocalID", "OrderPriceType", "OrderRef", "OrderSource", "OrderStatus", "OrderSubmitStatus", "OrderSysID", "OrderType", "ParticipantID", "RelativeOrderSysID", "RequestID", "SequenceNo", "SessionID", "SettlementID", "StatusMsg", "StopPrice", "SuspendTime", "TimeCondition", "TraderID", "TradingDay", "UpdateTime", "UserForceClose", "UserID", "UserProductInfo", "VolumeCondition", "VolumeTotal", "VolumeTotalOriginal", "VolumeTraded", "ZCETotalTradedVolume" };
    private static readonly uint[] _pBMsgOrderRtnFieldTags = new uint[] { 338, 370, 434, 18, 440, 170, 362, 378, 210, 82, 74, 138, 66, 8, 194, 218, 154, 392, 114, 472, 322, 330, 232, 34, 26, 160, 464, 89, 128, 248, 186, 58, 42, 282, 290, 242, 274, 298, 202, 450, 176, 384, 400, 264, 418, 145, 346, 106, 226, 258, 354, 424, 50, 410, 122, 312, 96, 304, 456 };
    public static PBMsgOrderRtn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgOrderRtn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgOrderRtn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderRtn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgOrderRtn, PBMsgOrderRtn.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgOrderRtn__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int OrderRefFieldNumber = 5;
    private bool hasOrderRef;
    private string orderRef_ = "";
    public bool HasOrderRef {
      get { return hasOrderRef; }
    }
    public string OrderRef {
      get { return orderRef_; }
    }
    
    public const int UserIDFieldNumber = 6;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int OrderPriceTypeFieldNumber = 7;
    private bool hasOrderPriceType;
    private string orderPriceType_ = "";
    public bool HasOrderPriceType {
      get { return hasOrderPriceType; }
    }
    public string OrderPriceType {
      get { return orderPriceType_; }
    }
    
    public const int DirectionFieldNumber = 8;
    private bool hasDirection;
    private string direction_ = "";
    public bool HasDirection {
      get { return hasDirection; }
    }
    public string Direction {
      get { return direction_; }
    }
    
    public const int CombOffsetFlagFieldNumber = 9;
    private bool hasCombOffsetFlag;
    private string combOffsetFlag_ = "";
    public bool HasCombOffsetFlag {
      get { return hasCombOffsetFlag; }
    }
    public string CombOffsetFlag {
      get { return combOffsetFlag_; }
    }
    
    public const int CombHedgeFlagFieldNumber = 10;
    private bool hasCombHedgeFlag;
    private string combHedgeFlag_ = "";
    public bool HasCombHedgeFlag {
      get { return hasCombHedgeFlag; }
    }
    public string CombHedgeFlag {
      get { return combHedgeFlag_; }
    }
    
    public const int LimitPriceFieldNumber = 11;
    private bool hasLimitPrice;
    private double limitPrice_;
    public bool HasLimitPrice {
      get { return hasLimitPrice; }
    }
    public double LimitPrice {
      get { return limitPrice_; }
    }
    
    public const int VolumeTotalOriginalFieldNumber = 12;
    private bool hasVolumeTotalOriginal;
    private int volumeTotalOriginal_;
    public bool HasVolumeTotalOriginal {
      get { return hasVolumeTotalOriginal; }
    }
    public int VolumeTotalOriginal {
      get { return volumeTotalOriginal_; }
    }
    
    public const int TimeConditionFieldNumber = 13;
    private bool hasTimeCondition;
    private string timeCondition_ = "";
    public bool HasTimeCondition {
      get { return hasTimeCondition; }
    }
    public string TimeCondition {
      get { return timeCondition_; }
    }
    
    public const int GTDDateFieldNumber = 14;
    private bool hasGTDDate;
    private string gTDDate_ = "";
    public bool HasGTDDate {
      get { return hasGTDDate; }
    }
    public string GTDDate {
      get { return gTDDate_; }
    }
    
    public const int VolumeConditionFieldNumber = 15;
    private bool hasVolumeCondition;
    private string volumeCondition_ = "";
    public bool HasVolumeCondition {
      get { return hasVolumeCondition; }
    }
    public string VolumeCondition {
      get { return volumeCondition_; }
    }
    
    public const int MinVolumeFieldNumber = 16;
    private bool hasMinVolume;
    private int minVolume_;
    public bool HasMinVolume {
      get { return hasMinVolume; }
    }
    public int MinVolume {
      get { return minVolume_; }
    }
    
    public const int ContingentConditionFieldNumber = 17;
    private bool hasContingentCondition;
    private string contingentCondition_ = "";
    public bool HasContingentCondition {
      get { return hasContingentCondition; }
    }
    public string ContingentCondition {
      get { return contingentCondition_; }
    }
    
    public const int StopPriceFieldNumber = 18;
    private bool hasStopPrice;
    private double stopPrice_;
    public bool HasStopPrice {
      get { return hasStopPrice; }
    }
    public double StopPrice {
      get { return stopPrice_; }
    }
    
    public const int ForceCloseReasonFieldNumber = 19;
    private bool hasForceCloseReason;
    private string forceCloseReason_ = "";
    public bool HasForceCloseReason {
      get { return hasForceCloseReason; }
    }
    public string ForceCloseReason {
      get { return forceCloseReason_; }
    }
    
    public const int IsAutoSuspendFieldNumber = 20;
    private bool hasIsAutoSuspend;
    private int isAutoSuspend_;
    public bool HasIsAutoSuspend {
      get { return hasIsAutoSuspend; }
    }
    public int IsAutoSuspend {
      get { return isAutoSuspend_; }
    }
    
    public const int BusinessUnitFieldNumber = 21;
    private bool hasBusinessUnit;
    private string businessUnit_ = "";
    public bool HasBusinessUnit {
      get { return hasBusinessUnit; }
    }
    public string BusinessUnit {
      get { return businessUnit_; }
    }
    
    public const int RequestIDFieldNumber = 22;
    private bool hasRequestID;
    private int requestID_;
    public bool HasRequestID {
      get { return hasRequestID; }
    }
    public int RequestID {
      get { return requestID_; }
    }
    
    public const int OrderLocalIDFieldNumber = 23;
    private bool hasOrderLocalID;
    private string orderLocalID_ = "";
    public bool HasOrderLocalID {
      get { return hasOrderLocalID; }
    }
    public string OrderLocalID {
      get { return orderLocalID_; }
    }
    
    public const int ExchangeIDFieldNumber = 24;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int ParticipantIDFieldNumber = 25;
    private bool hasParticipantID;
    private string participantID_ = "";
    public bool HasParticipantID {
      get { return hasParticipantID; }
    }
    public string ParticipantID {
      get { return participantID_; }
    }
    
    public const int ClientIDFieldNumber = 26;
    private bool hasClientID;
    private string clientID_ = "";
    public bool HasClientID {
      get { return hasClientID; }
    }
    public string ClientID {
      get { return clientID_; }
    }
    
    public const int ExchangeInstIDFieldNumber = 27;
    private bool hasExchangeInstID;
    private string exchangeInstID_ = "";
    public bool HasExchangeInstID {
      get { return hasExchangeInstID; }
    }
    public string ExchangeInstID {
      get { return exchangeInstID_; }
    }
    
    public const int TraderIDFieldNumber = 28;
    private bool hasTraderID;
    private string traderID_ = "";
    public bool HasTraderID {
      get { return hasTraderID; }
    }
    public string TraderID {
      get { return traderID_; }
    }
    
    public const int InstallIDFieldNumber = 29;
    private bool hasInstallID;
    private int installID_;
    public bool HasInstallID {
      get { return hasInstallID; }
    }
    public int InstallID {
      get { return installID_; }
    }
    
    public const int OrderSubmitStatusFieldNumber = 30;
    private bool hasOrderSubmitStatus;
    private string orderSubmitStatus_ = "";
    public bool HasOrderSubmitStatus {
      get { return hasOrderSubmitStatus; }
    }
    public string OrderSubmitStatus {
      get { return orderSubmitStatus_; }
    }
    
    public const int NotifySequenceFieldNumber = 31;
    private bool hasNotifySequence;
    private int notifySequence_;
    public bool HasNotifySequence {
      get { return hasNotifySequence; }
    }
    public int NotifySequence {
      get { return notifySequence_; }
    }
    
    public const int TradingDayFieldNumber = 32;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 33;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public const int OrderSysIDFieldNumber = 34;
    private bool hasOrderSysID;
    private string orderSysID_ = "";
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public string OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int OrderSourceFieldNumber = 35;
    private bool hasOrderSource;
    private string orderSource_ = "";
    public bool HasOrderSource {
      get { return hasOrderSource; }
    }
    public string OrderSource {
      get { return orderSource_; }
    }
    
    public const int OrderStatusFieldNumber = 36;
    private bool hasOrderStatus;
    private string orderStatus_ = "";
    public bool HasOrderStatus {
      get { return hasOrderStatus; }
    }
    public string OrderStatus {
      get { return orderStatus_; }
    }
    
    public const int OrderTypeFieldNumber = 37;
    private bool hasOrderType;
    private string orderType_ = "";
    public bool HasOrderType {
      get { return hasOrderType; }
    }
    public string OrderType {
      get { return orderType_; }
    }
    
    public const int VolumeTradedFieldNumber = 38;
    private bool hasVolumeTraded;
    private int volumeTraded_;
    public bool HasVolumeTraded {
      get { return hasVolumeTraded; }
    }
    public int VolumeTraded {
      get { return volumeTraded_; }
    }
    
    public const int VolumeTotalFieldNumber = 39;
    private bool hasVolumeTotal;
    private int volumeTotal_;
    public bool HasVolumeTotal {
      get { return hasVolumeTotal; }
    }
    public int VolumeTotal {
      get { return volumeTotal_; }
    }
    
    public const int InsertDateFieldNumber = 40;
    private bool hasInsertDate;
    private string insertDate_ = "";
    public bool HasInsertDate {
      get { return hasInsertDate; }
    }
    public string InsertDate {
      get { return insertDate_; }
    }
    
    public const int InsertTimeFieldNumber = 41;
    private bool hasInsertTime;
    private string insertTime_ = "";
    public bool HasInsertTime {
      get { return hasInsertTime; }
    }
    public string InsertTime {
      get { return insertTime_; }
    }
    
    public const int ActiveTimeFieldNumber = 42;
    private bool hasActiveTime;
    private string activeTime_ = "";
    public bool HasActiveTime {
      get { return hasActiveTime; }
    }
    public string ActiveTime {
      get { return activeTime_; }
    }
    
    public const int SuspendTimeFieldNumber = 43;
    private bool hasSuspendTime;
    private string suspendTime_ = "";
    public bool HasSuspendTime {
      get { return hasSuspendTime; }
    }
    public string SuspendTime {
      get { return suspendTime_; }
    }
    
    public const int UpdateTimeFieldNumber = 44;
    private bool hasUpdateTime;
    private string updateTime_ = "";
    public bool HasUpdateTime {
      get { return hasUpdateTime; }
    }
    public string UpdateTime {
      get { return updateTime_; }
    }
    
    public const int CancelTimeFieldNumber = 45;
    private bool hasCancelTime;
    private string cancelTime_ = "";
    public bool HasCancelTime {
      get { return hasCancelTime; }
    }
    public string CancelTime {
      get { return cancelTime_; }
    }
    
    public const int ActiveTraderIDFieldNumber = 46;
    private bool hasActiveTraderID;
    private string activeTraderID_ = "";
    public bool HasActiveTraderID {
      get { return hasActiveTraderID; }
    }
    public string ActiveTraderID {
      get { return activeTraderID_; }
    }
    
    public const int ClearingPartIDFieldNumber = 47;
    private bool hasClearingPartID;
    private string clearingPartID_ = "";
    public bool HasClearingPartID {
      get { return hasClearingPartID; }
    }
    public string ClearingPartID {
      get { return clearingPartID_; }
    }
    
    public const int SequenceNoFieldNumber = 48;
    private bool hasSequenceNo;
    private int sequenceNo_;
    public bool HasSequenceNo {
      get { return hasSequenceNo; }
    }
    public int SequenceNo {
      get { return sequenceNo_; }
    }
    
    public const int FrontIDFieldNumber = 49;
    private bool hasFrontID;
    private int frontID_;
    public bool HasFrontID {
      get { return hasFrontID; }
    }
    public int FrontID {
      get { return frontID_; }
    }
    
    public const int SessionIDFieldNumber = 50;
    private bool hasSessionID;
    private int sessionID_;
    public bool HasSessionID {
      get { return hasSessionID; }
    }
    public int SessionID {
      get { return sessionID_; }
    }
    
    public const int UserProductInfoFieldNumber = 51;
    private bool hasUserProductInfo;
    private string userProductInfo_ = "";
    public bool HasUserProductInfo {
      get { return hasUserProductInfo; }
    }
    public string UserProductInfo {
      get { return userProductInfo_; }
    }
    
    public const int StatusMsgFieldNumber = 52;
    private bool hasStatusMsg;
    private pb::ByteString statusMsg_ = pb::ByteString.Empty;
    public bool HasStatusMsg {
      get { return hasStatusMsg; }
    }
    public pb::ByteString StatusMsg {
      get { return statusMsg_; }
    }
    
    public const int UserForceCloseFieldNumber = 53;
    private bool hasUserForceClose;
    private int userForceClose_;
    public bool HasUserForceClose {
      get { return hasUserForceClose; }
    }
    public int UserForceClose {
      get { return userForceClose_; }
    }
    
    public const int ActiveUserIDFieldNumber = 54;
    private bool hasActiveUserID;
    private string activeUserID_ = "";
    public bool HasActiveUserID {
      get { return hasActiveUserID; }
    }
    public string ActiveUserID {
      get { return activeUserID_; }
    }
    
    public const int BrokerOrderSeqFieldNumber = 55;
    private bool hasBrokerOrderSeq;
    private int brokerOrderSeq_;
    public bool HasBrokerOrderSeq {
      get { return hasBrokerOrderSeq; }
    }
    public int BrokerOrderSeq {
      get { return brokerOrderSeq_; }
    }
    
    public const int RelativeOrderSysIDFieldNumber = 56;
    private bool hasRelativeOrderSysID;
    private string relativeOrderSysID_ = "";
    public bool HasRelativeOrderSysID {
      get { return hasRelativeOrderSysID; }
    }
    public string RelativeOrderSysID {
      get { return relativeOrderSysID_; }
    }
    
    public const int ZCETotalTradedVolumeFieldNumber = 57;
    private bool hasZCETotalTradedVolume;
    private int zCETotalTradedVolume_;
    public bool HasZCETotalTradedVolume {
      get { return hasZCETotalTradedVolume; }
    }
    public int ZCETotalTradedVolume {
      get { return zCETotalTradedVolume_; }
    }
    
    public const int IsSwapOrderFieldNumber = 58;
    private bool hasIsSwapOrder;
    private int isSwapOrder_;
    public bool HasIsSwapOrder {
      get { return hasIsSwapOrder; }
    }
    public int IsSwapOrder {
      get { return isSwapOrder_; }
    }
    
    public const int IOrderStatusFieldNumber = 59;
    private bool hasIOrderStatus;
    private int iOrderStatus_;
    public bool HasIOrderStatus {
      get { return hasIOrderStatus; }
    }
    public int IOrderStatus {
      get { return iOrderStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgOrderRtnFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[13], EOF);
      }
      if (hasBrokerID) {
        output.WriteString(2, field_names[3], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[24], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[23], InstrumentID);
      }
      if (hasOrderRef) {
        output.WriteString(5, field_names[32], OrderRef);
      }
      if (hasUserID) {
        output.WriteString(6, field_names[52], UserID);
      }
      if (hasOrderPriceType) {
        output.WriteString(7, field_names[31], OrderPriceType);
      }
      if (hasDirection) {
        output.WriteString(8, field_names[12], Direction);
      }
      if (hasCombOffsetFlag) {
        output.WriteString(9, field_names[10], CombOffsetFlag);
      }
      if (hasCombHedgeFlag) {
        output.WriteString(10, field_names[9], CombHedgeFlag);
      }
      if (hasLimitPrice) {
        output.WriteDouble(11, field_names[27], LimitPrice);
      }
      if (hasVolumeTotalOriginal) {
        output.WriteInt32(12, field_names[56], VolumeTotalOriginal);
      }
      if (hasTimeCondition) {
        output.WriteString(13, field_names[47], TimeCondition);
      }
      if (hasGTDDate) {
        output.WriteString(14, field_names[18], GTDDate);
      }
      if (hasVolumeCondition) {
        output.WriteString(15, field_names[54], VolumeCondition);
      }
      if (hasMinVolume) {
        output.WriteInt32(16, field_names[28], MinVolume);
      }
      if (hasContingentCondition) {
        output.WriteString(17, field_names[11], ContingentCondition);
      }
      if (hasStopPrice) {
        output.WriteDouble(18, field_names[45], StopPrice);
      }
      if (hasForceCloseReason) {
        output.WriteString(19, field_names[16], ForceCloseReason);
      }
      if (hasIsAutoSuspend) {
        output.WriteInt32(20, field_names[25], IsAutoSuspend);
      }
      if (hasBusinessUnit) {
        output.WriteString(21, field_names[5], BusinessUnit);
      }
      if (hasRequestID) {
        output.WriteInt32(22, field_names[40], RequestID);
      }
      if (hasOrderLocalID) {
        output.WriteString(23, field_names[30], OrderLocalID);
      }
      if (hasExchangeID) {
        output.WriteString(24, field_names[14], ExchangeID);
      }
      if (hasParticipantID) {
        output.WriteString(25, field_names[38], ParticipantID);
      }
      if (hasClientID) {
        output.WriteString(26, field_names[8], ClientID);
      }
      if (hasExchangeInstID) {
        output.WriteString(27, field_names[15], ExchangeInstID);
      }
      if (hasTraderID) {
        output.WriteString(28, field_names[48], TraderID);
      }
      if (hasInstallID) {
        output.WriteInt32(29, field_names[22], InstallID);
      }
      if (hasOrderSubmitStatus) {
        output.WriteString(30, field_names[35], OrderSubmitStatus);
      }
      if (hasNotifySequence) {
        output.WriteInt32(31, field_names[29], NotifySequence);
      }
      if (hasTradingDay) {
        output.WriteString(32, field_names[49], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(33, field_names[43], SettlementID);
      }
      if (hasOrderSysID) {
        output.WriteString(34, field_names[36], OrderSysID);
      }
      if (hasOrderSource) {
        output.WriteString(35, field_names[33], OrderSource);
      }
      if (hasOrderStatus) {
        output.WriteString(36, field_names[34], OrderStatus);
      }
      if (hasOrderType) {
        output.WriteString(37, field_names[37], OrderType);
      }
      if (hasVolumeTraded) {
        output.WriteInt32(38, field_names[57], VolumeTraded);
      }
      if (hasVolumeTotal) {
        output.WriteInt32(39, field_names[55], VolumeTotal);
      }
      if (hasInsertDate) {
        output.WriteString(40, field_names[20], InsertDate);
      }
      if (hasInsertTime) {
        output.WriteString(41, field_names[21], InsertTime);
      }
      if (hasActiveTime) {
        output.WriteString(42, field_names[0], ActiveTime);
      }
      if (hasSuspendTime) {
        output.WriteString(43, field_names[46], SuspendTime);
      }
      if (hasUpdateTime) {
        output.WriteString(44, field_names[50], UpdateTime);
      }
      if (hasCancelTime) {
        output.WriteString(45, field_names[6], CancelTime);
      }
      if (hasActiveTraderID) {
        output.WriteString(46, field_names[1], ActiveTraderID);
      }
      if (hasClearingPartID) {
        output.WriteString(47, field_names[7], ClearingPartID);
      }
      if (hasSequenceNo) {
        output.WriteInt32(48, field_names[41], SequenceNo);
      }
      if (hasFrontID) {
        output.WriteInt32(49, field_names[17], FrontID);
      }
      if (hasSessionID) {
        output.WriteInt32(50, field_names[42], SessionID);
      }
      if (hasUserProductInfo) {
        output.WriteString(51, field_names[53], UserProductInfo);
      }
      if (hasStatusMsg) {
        output.WriteBytes(52, field_names[44], StatusMsg);
      }
      if (hasUserForceClose) {
        output.WriteInt32(53, field_names[51], UserForceClose);
      }
      if (hasActiveUserID) {
        output.WriteString(54, field_names[2], ActiveUserID);
      }
      if (hasBrokerOrderSeq) {
        output.WriteInt32(55, field_names[4], BrokerOrderSeq);
      }
      if (hasRelativeOrderSysID) {
        output.WriteString(56, field_names[39], RelativeOrderSysID);
      }
      if (hasZCETotalTradedVolume) {
        output.WriteInt32(57, field_names[58], ZCETotalTradedVolume);
      }
      if (hasIsSwapOrder) {
        output.WriteInt32(58, field_names[26], IsSwapOrder);
      }
      if (hasIOrderStatus) {
        output.WriteInt32(59, field_names[19], IOrderStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        if (hasOrderRef) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderRef);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserID);
        }
        if (hasOrderPriceType) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OrderPriceType);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Direction);
        }
        if (hasCombOffsetFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(9, CombOffsetFlag);
        }
        if (hasCombHedgeFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CombHedgeFlag);
        }
        if (hasLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, LimitPrice);
        }
        if (hasVolumeTotalOriginal) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, VolumeTotalOriginal);
        }
        if (hasTimeCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(13, TimeCondition);
        }
        if (hasGTDDate) {
          size += pb::CodedOutputStream.ComputeStringSize(14, GTDDate);
        }
        if (hasVolumeCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(15, VolumeCondition);
        }
        if (hasMinVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, MinVolume);
        }
        if (hasContingentCondition) {
          size += pb::CodedOutputStream.ComputeStringSize(17, ContingentCondition);
        }
        if (hasStopPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, StopPrice);
        }
        if (hasForceCloseReason) {
          size += pb::CodedOutputStream.ComputeStringSize(19, ForceCloseReason);
        }
        if (hasIsAutoSuspend) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, IsAutoSuspend);
        }
        if (hasBusinessUnit) {
          size += pb::CodedOutputStream.ComputeStringSize(21, BusinessUnit);
        }
        if (hasRequestID) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, RequestID);
        }
        if (hasOrderLocalID) {
          size += pb::CodedOutputStream.ComputeStringSize(23, OrderLocalID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(24, ExchangeID);
        }
        if (hasParticipantID) {
          size += pb::CodedOutputStream.ComputeStringSize(25, ParticipantID);
        }
        if (hasClientID) {
          size += pb::CodedOutputStream.ComputeStringSize(26, ClientID);
        }
        if (hasExchangeInstID) {
          size += pb::CodedOutputStream.ComputeStringSize(27, ExchangeInstID);
        }
        if (hasTraderID) {
          size += pb::CodedOutputStream.ComputeStringSize(28, TraderID);
        }
        if (hasInstallID) {
          size += pb::CodedOutputStream.ComputeInt32Size(29, InstallID);
        }
        if (hasOrderSubmitStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(30, OrderSubmitStatus);
        }
        if (hasNotifySequence) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, NotifySequence);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(32, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(33, SettlementID);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeStringSize(34, OrderSysID);
        }
        if (hasOrderSource) {
          size += pb::CodedOutputStream.ComputeStringSize(35, OrderSource);
        }
        if (hasOrderStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(36, OrderStatus);
        }
        if (hasOrderType) {
          size += pb::CodedOutputStream.ComputeStringSize(37, OrderType);
        }
        if (hasVolumeTraded) {
          size += pb::CodedOutputStream.ComputeInt32Size(38, VolumeTraded);
        }
        if (hasVolumeTotal) {
          size += pb::CodedOutputStream.ComputeInt32Size(39, VolumeTotal);
        }
        if (hasInsertDate) {
          size += pb::CodedOutputStream.ComputeStringSize(40, InsertDate);
        }
        if (hasInsertTime) {
          size += pb::CodedOutputStream.ComputeStringSize(41, InsertTime);
        }
        if (hasActiveTime) {
          size += pb::CodedOutputStream.ComputeStringSize(42, ActiveTime);
        }
        if (hasSuspendTime) {
          size += pb::CodedOutputStream.ComputeStringSize(43, SuspendTime);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(44, UpdateTime);
        }
        if (hasCancelTime) {
          size += pb::CodedOutputStream.ComputeStringSize(45, CancelTime);
        }
        if (hasActiveTraderID) {
          size += pb::CodedOutputStream.ComputeStringSize(46, ActiveTraderID);
        }
        if (hasClearingPartID) {
          size += pb::CodedOutputStream.ComputeStringSize(47, ClearingPartID);
        }
        if (hasSequenceNo) {
          size += pb::CodedOutputStream.ComputeInt32Size(48, SequenceNo);
        }
        if (hasFrontID) {
          size += pb::CodedOutputStream.ComputeInt32Size(49, FrontID);
        }
        if (hasSessionID) {
          size += pb::CodedOutputStream.ComputeInt32Size(50, SessionID);
        }
        if (hasUserProductInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(51, UserProductInfo);
        }
        if (hasStatusMsg) {
          size += pb::CodedOutputStream.ComputeBytesSize(52, StatusMsg);
        }
        if (hasUserForceClose) {
          size += pb::CodedOutputStream.ComputeInt32Size(53, UserForceClose);
        }
        if (hasActiveUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(54, ActiveUserID);
        }
        if (hasBrokerOrderSeq) {
          size += pb::CodedOutputStream.ComputeInt32Size(55, BrokerOrderSeq);
        }
        if (hasRelativeOrderSysID) {
          size += pb::CodedOutputStream.ComputeStringSize(56, RelativeOrderSysID);
        }
        if (hasZCETotalTradedVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(57, ZCETotalTradedVolume);
        }
        if (hasIsSwapOrder) {
          size += pb::CodedOutputStream.ComputeInt32Size(58, IsSwapOrder);
        }
        if (hasIOrderStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(59, IOrderStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgOrderRtn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgOrderRtn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgOrderRtn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgOrderRtn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgOrderRtn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgOrderRtn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgOrderRtn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgOrderRtn result;
      
      private PBMsgOrderRtn PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgOrderRtn original = result;
          result = new PBMsgOrderRtn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgOrderRtn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgOrderRtn.Descriptor; }
      }
      
      public override PBMsgOrderRtn DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgOrderRtn.DefaultInstance; }
      }
      
      public override PBMsgOrderRtn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgOrderRtn) {
          return MergeFrom((PBMsgOrderRtn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgOrderRtn other) {
        if (other == global::PBMsgTrader.PBMsgOrderRtn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasOrderRef) {
          OrderRef = other.OrderRef;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasOrderPriceType) {
          OrderPriceType = other.OrderPriceType;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasCombOffsetFlag) {
          CombOffsetFlag = other.CombOffsetFlag;
        }
        if (other.HasCombHedgeFlag) {
          CombHedgeFlag = other.CombHedgeFlag;
        }
        if (other.HasLimitPrice) {
          LimitPrice = other.LimitPrice;
        }
        if (other.HasVolumeTotalOriginal) {
          VolumeTotalOriginal = other.VolumeTotalOriginal;
        }
        if (other.HasTimeCondition) {
          TimeCondition = other.TimeCondition;
        }
        if (other.HasGTDDate) {
          GTDDate = other.GTDDate;
        }
        if (other.HasVolumeCondition) {
          VolumeCondition = other.VolumeCondition;
        }
        if (other.HasMinVolume) {
          MinVolume = other.MinVolume;
        }
        if (other.HasContingentCondition) {
          ContingentCondition = other.ContingentCondition;
        }
        if (other.HasStopPrice) {
          StopPrice = other.StopPrice;
        }
        if (other.HasForceCloseReason) {
          ForceCloseReason = other.ForceCloseReason;
        }
        if (other.HasIsAutoSuspend) {
          IsAutoSuspend = other.IsAutoSuspend;
        }
        if (other.HasBusinessUnit) {
          BusinessUnit = other.BusinessUnit;
        }
        if (other.HasRequestID) {
          RequestID = other.RequestID;
        }
        if (other.HasOrderLocalID) {
          OrderLocalID = other.OrderLocalID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasParticipantID) {
          ParticipantID = other.ParticipantID;
        }
        if (other.HasClientID) {
          ClientID = other.ClientID;
        }
        if (other.HasExchangeInstID) {
          ExchangeInstID = other.ExchangeInstID;
        }
        if (other.HasTraderID) {
          TraderID = other.TraderID;
        }
        if (other.HasInstallID) {
          InstallID = other.InstallID;
        }
        if (other.HasOrderSubmitStatus) {
          OrderSubmitStatus = other.OrderSubmitStatus;
        }
        if (other.HasNotifySequence) {
          NotifySequence = other.NotifySequence;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasOrderSource) {
          OrderSource = other.OrderSource;
        }
        if (other.HasOrderStatus) {
          OrderStatus = other.OrderStatus;
        }
        if (other.HasOrderType) {
          OrderType = other.OrderType;
        }
        if (other.HasVolumeTraded) {
          VolumeTraded = other.VolumeTraded;
        }
        if (other.HasVolumeTotal) {
          VolumeTotal = other.VolumeTotal;
        }
        if (other.HasInsertDate) {
          InsertDate = other.InsertDate;
        }
        if (other.HasInsertTime) {
          InsertTime = other.InsertTime;
        }
        if (other.HasActiveTime) {
          ActiveTime = other.ActiveTime;
        }
        if (other.HasSuspendTime) {
          SuspendTime = other.SuspendTime;
        }
        if (other.HasUpdateTime) {
          UpdateTime = other.UpdateTime;
        }
        if (other.HasCancelTime) {
          CancelTime = other.CancelTime;
        }
        if (other.HasActiveTraderID) {
          ActiveTraderID = other.ActiveTraderID;
        }
        if (other.HasClearingPartID) {
          ClearingPartID = other.ClearingPartID;
        }
        if (other.HasSequenceNo) {
          SequenceNo = other.SequenceNo;
        }
        if (other.HasFrontID) {
          FrontID = other.FrontID;
        }
        if (other.HasSessionID) {
          SessionID = other.SessionID;
        }
        if (other.HasUserProductInfo) {
          UserProductInfo = other.UserProductInfo;
        }
        if (other.HasStatusMsg) {
          StatusMsg = other.StatusMsg;
        }
        if (other.HasUserForceClose) {
          UserForceClose = other.UserForceClose;
        }
        if (other.HasActiveUserID) {
          ActiveUserID = other.ActiveUserID;
        }
        if (other.HasBrokerOrderSeq) {
          BrokerOrderSeq = other.BrokerOrderSeq;
        }
        if (other.HasRelativeOrderSysID) {
          RelativeOrderSysID = other.RelativeOrderSysID;
        }
        if (other.HasZCETotalTradedVolume) {
          ZCETotalTradedVolume = other.ZCETotalTradedVolume;
        }
        if (other.HasIsSwapOrder) {
          IsSwapOrder = other.IsSwapOrder;
        }
        if (other.HasIOrderStatus) {
          IOrderStatus = other.IOrderStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgOrderRtnFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgOrderRtnFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 42: {
              result.hasOrderRef = input.ReadString(ref result.orderRef_);
              break;
            }
            case 50: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 58: {
              result.hasOrderPriceType = input.ReadString(ref result.orderPriceType_);
              break;
            }
            case 66: {
              result.hasDirection = input.ReadString(ref result.direction_);
              break;
            }
            case 74: {
              result.hasCombOffsetFlag = input.ReadString(ref result.combOffsetFlag_);
              break;
            }
            case 82: {
              result.hasCombHedgeFlag = input.ReadString(ref result.combHedgeFlag_);
              break;
            }
            case 89: {
              result.hasLimitPrice = input.ReadDouble(ref result.limitPrice_);
              break;
            }
            case 96: {
              result.hasVolumeTotalOriginal = input.ReadInt32(ref result.volumeTotalOriginal_);
              break;
            }
            case 106: {
              result.hasTimeCondition = input.ReadString(ref result.timeCondition_);
              break;
            }
            case 114: {
              result.hasGTDDate = input.ReadString(ref result.gTDDate_);
              break;
            }
            case 122: {
              result.hasVolumeCondition = input.ReadString(ref result.volumeCondition_);
              break;
            }
            case 128: {
              result.hasMinVolume = input.ReadInt32(ref result.minVolume_);
              break;
            }
            case 138: {
              result.hasContingentCondition = input.ReadString(ref result.contingentCondition_);
              break;
            }
            case 145: {
              result.hasStopPrice = input.ReadDouble(ref result.stopPrice_);
              break;
            }
            case 154: {
              result.hasForceCloseReason = input.ReadString(ref result.forceCloseReason_);
              break;
            }
            case 160: {
              result.hasIsAutoSuspend = input.ReadInt32(ref result.isAutoSuspend_);
              break;
            }
            case 170: {
              result.hasBusinessUnit = input.ReadString(ref result.businessUnit_);
              break;
            }
            case 176: {
              result.hasRequestID = input.ReadInt32(ref result.requestID_);
              break;
            }
            case 186: {
              result.hasOrderLocalID = input.ReadString(ref result.orderLocalID_);
              break;
            }
            case 194: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 202: {
              result.hasParticipantID = input.ReadString(ref result.participantID_);
              break;
            }
            case 210: {
              result.hasClientID = input.ReadString(ref result.clientID_);
              break;
            }
            case 218: {
              result.hasExchangeInstID = input.ReadString(ref result.exchangeInstID_);
              break;
            }
            case 226: {
              result.hasTraderID = input.ReadString(ref result.traderID_);
              break;
            }
            case 232: {
              result.hasInstallID = input.ReadInt32(ref result.installID_);
              break;
            }
            case 242: {
              result.hasOrderSubmitStatus = input.ReadString(ref result.orderSubmitStatus_);
              break;
            }
            case 248: {
              result.hasNotifySequence = input.ReadInt32(ref result.notifySequence_);
              break;
            }
            case 258: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 264: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
            case 274: {
              result.hasOrderSysID = input.ReadString(ref result.orderSysID_);
              break;
            }
            case 282: {
              result.hasOrderSource = input.ReadString(ref result.orderSource_);
              break;
            }
            case 290: {
              result.hasOrderStatus = input.ReadString(ref result.orderStatus_);
              break;
            }
            case 298: {
              result.hasOrderType = input.ReadString(ref result.orderType_);
              break;
            }
            case 304: {
              result.hasVolumeTraded = input.ReadInt32(ref result.volumeTraded_);
              break;
            }
            case 312: {
              result.hasVolumeTotal = input.ReadInt32(ref result.volumeTotal_);
              break;
            }
            case 322: {
              result.hasInsertDate = input.ReadString(ref result.insertDate_);
              break;
            }
            case 330: {
              result.hasInsertTime = input.ReadString(ref result.insertTime_);
              break;
            }
            case 338: {
              result.hasActiveTime = input.ReadString(ref result.activeTime_);
              break;
            }
            case 346: {
              result.hasSuspendTime = input.ReadString(ref result.suspendTime_);
              break;
            }
            case 354: {
              result.hasUpdateTime = input.ReadString(ref result.updateTime_);
              break;
            }
            case 362: {
              result.hasCancelTime = input.ReadString(ref result.cancelTime_);
              break;
            }
            case 370: {
              result.hasActiveTraderID = input.ReadString(ref result.activeTraderID_);
              break;
            }
            case 378: {
              result.hasClearingPartID = input.ReadString(ref result.clearingPartID_);
              break;
            }
            case 384: {
              result.hasSequenceNo = input.ReadInt32(ref result.sequenceNo_);
              break;
            }
            case 392: {
              result.hasFrontID = input.ReadInt32(ref result.frontID_);
              break;
            }
            case 400: {
              result.hasSessionID = input.ReadInt32(ref result.sessionID_);
              break;
            }
            case 410: {
              result.hasUserProductInfo = input.ReadString(ref result.userProductInfo_);
              break;
            }
            case 418: {
              result.hasStatusMsg = input.ReadBytes(ref result.statusMsg_);
              break;
            }
            case 424: {
              result.hasUserForceClose = input.ReadInt32(ref result.userForceClose_);
              break;
            }
            case 434: {
              result.hasActiveUserID = input.ReadString(ref result.activeUserID_);
              break;
            }
            case 440: {
              result.hasBrokerOrderSeq = input.ReadInt32(ref result.brokerOrderSeq_);
              break;
            }
            case 450: {
              result.hasRelativeOrderSysID = input.ReadString(ref result.relativeOrderSysID_);
              break;
            }
            case 456: {
              result.hasZCETotalTradedVolume = input.ReadInt32(ref result.zCETotalTradedVolume_);
              break;
            }
            case 464: {
              result.hasIsSwapOrder = input.ReadInt32(ref result.isSwapOrder_);
              break;
            }
            case 472: {
              result.hasIOrderStatus = input.ReadInt32(ref result.iOrderStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasOrderRef {
        get { return result.hasOrderRef; }
      }
      public string OrderRef {
        get { return result.OrderRef; }
        set { SetOrderRef(value); }
      }
      public Builder SetOrderRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderRef = true;
        result.orderRef_ = value;
        return this;
      }
      public Builder ClearOrderRef() {
        PrepareBuilder();
        result.hasOrderRef = false;
        result.orderRef_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasOrderPriceType {
        get { return result.hasOrderPriceType; }
      }
      public string OrderPriceType {
        get { return result.OrderPriceType; }
        set { SetOrderPriceType(value); }
      }
      public Builder SetOrderPriceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderPriceType = true;
        result.orderPriceType_ = value;
        return this;
      }
      public Builder ClearOrderPriceType() {
        PrepareBuilder();
        result.hasOrderPriceType = false;
        result.orderPriceType_ = "";
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public string Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = "";
        return this;
      }
      
      public bool HasCombOffsetFlag {
        get { return result.hasCombOffsetFlag; }
      }
      public string CombOffsetFlag {
        get { return result.CombOffsetFlag; }
        set { SetCombOffsetFlag(value); }
      }
      public Builder SetCombOffsetFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombOffsetFlag = true;
        result.combOffsetFlag_ = value;
        return this;
      }
      public Builder ClearCombOffsetFlag() {
        PrepareBuilder();
        result.hasCombOffsetFlag = false;
        result.combOffsetFlag_ = "";
        return this;
      }
      
      public bool HasCombHedgeFlag {
        get { return result.hasCombHedgeFlag; }
      }
      public string CombHedgeFlag {
        get { return result.CombHedgeFlag; }
        set { SetCombHedgeFlag(value); }
      }
      public Builder SetCombHedgeFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombHedgeFlag = true;
        result.combHedgeFlag_ = value;
        return this;
      }
      public Builder ClearCombHedgeFlag() {
        PrepareBuilder();
        result.hasCombHedgeFlag = false;
        result.combHedgeFlag_ = "";
        return this;
      }
      
      public bool HasLimitPrice {
        get { return result.hasLimitPrice; }
      }
      public double LimitPrice {
        get { return result.LimitPrice; }
        set { SetLimitPrice(value); }
      }
      public Builder SetLimitPrice(double value) {
        PrepareBuilder();
        result.hasLimitPrice = true;
        result.limitPrice_ = value;
        return this;
      }
      public Builder ClearLimitPrice() {
        PrepareBuilder();
        result.hasLimitPrice = false;
        result.limitPrice_ = 0D;
        return this;
      }
      
      public bool HasVolumeTotalOriginal {
        get { return result.hasVolumeTotalOriginal; }
      }
      public int VolumeTotalOriginal {
        get { return result.VolumeTotalOriginal; }
        set { SetVolumeTotalOriginal(value); }
      }
      public Builder SetVolumeTotalOriginal(int value) {
        PrepareBuilder();
        result.hasVolumeTotalOriginal = true;
        result.volumeTotalOriginal_ = value;
        return this;
      }
      public Builder ClearVolumeTotalOriginal() {
        PrepareBuilder();
        result.hasVolumeTotalOriginal = false;
        result.volumeTotalOriginal_ = 0;
        return this;
      }
      
      public bool HasTimeCondition {
        get { return result.hasTimeCondition; }
      }
      public string TimeCondition {
        get { return result.TimeCondition; }
        set { SetTimeCondition(value); }
      }
      public Builder SetTimeCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeCondition = true;
        result.timeCondition_ = value;
        return this;
      }
      public Builder ClearTimeCondition() {
        PrepareBuilder();
        result.hasTimeCondition = false;
        result.timeCondition_ = "";
        return this;
      }
      
      public bool HasGTDDate {
        get { return result.hasGTDDate; }
      }
      public string GTDDate {
        get { return result.GTDDate; }
        set { SetGTDDate(value); }
      }
      public Builder SetGTDDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGTDDate = true;
        result.gTDDate_ = value;
        return this;
      }
      public Builder ClearGTDDate() {
        PrepareBuilder();
        result.hasGTDDate = false;
        result.gTDDate_ = "";
        return this;
      }
      
      public bool HasVolumeCondition {
        get { return result.hasVolumeCondition; }
      }
      public string VolumeCondition {
        get { return result.VolumeCondition; }
        set { SetVolumeCondition(value); }
      }
      public Builder SetVolumeCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVolumeCondition = true;
        result.volumeCondition_ = value;
        return this;
      }
      public Builder ClearVolumeCondition() {
        PrepareBuilder();
        result.hasVolumeCondition = false;
        result.volumeCondition_ = "";
        return this;
      }
      
      public bool HasMinVolume {
        get { return result.hasMinVolume; }
      }
      public int MinVolume {
        get { return result.MinVolume; }
        set { SetMinVolume(value); }
      }
      public Builder SetMinVolume(int value) {
        PrepareBuilder();
        result.hasMinVolume = true;
        result.minVolume_ = value;
        return this;
      }
      public Builder ClearMinVolume() {
        PrepareBuilder();
        result.hasMinVolume = false;
        result.minVolume_ = 0;
        return this;
      }
      
      public bool HasContingentCondition {
        get { return result.hasContingentCondition; }
      }
      public string ContingentCondition {
        get { return result.ContingentCondition; }
        set { SetContingentCondition(value); }
      }
      public Builder SetContingentCondition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContingentCondition = true;
        result.contingentCondition_ = value;
        return this;
      }
      public Builder ClearContingentCondition() {
        PrepareBuilder();
        result.hasContingentCondition = false;
        result.contingentCondition_ = "";
        return this;
      }
      
      public bool HasStopPrice {
        get { return result.hasStopPrice; }
      }
      public double StopPrice {
        get { return result.StopPrice; }
        set { SetStopPrice(value); }
      }
      public Builder SetStopPrice(double value) {
        PrepareBuilder();
        result.hasStopPrice = true;
        result.stopPrice_ = value;
        return this;
      }
      public Builder ClearStopPrice() {
        PrepareBuilder();
        result.hasStopPrice = false;
        result.stopPrice_ = 0D;
        return this;
      }
      
      public bool HasForceCloseReason {
        get { return result.hasForceCloseReason; }
      }
      public string ForceCloseReason {
        get { return result.ForceCloseReason; }
        set { SetForceCloseReason(value); }
      }
      public Builder SetForceCloseReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasForceCloseReason = true;
        result.forceCloseReason_ = value;
        return this;
      }
      public Builder ClearForceCloseReason() {
        PrepareBuilder();
        result.hasForceCloseReason = false;
        result.forceCloseReason_ = "";
        return this;
      }
      
      public bool HasIsAutoSuspend {
        get { return result.hasIsAutoSuspend; }
      }
      public int IsAutoSuspend {
        get { return result.IsAutoSuspend; }
        set { SetIsAutoSuspend(value); }
      }
      public Builder SetIsAutoSuspend(int value) {
        PrepareBuilder();
        result.hasIsAutoSuspend = true;
        result.isAutoSuspend_ = value;
        return this;
      }
      public Builder ClearIsAutoSuspend() {
        PrepareBuilder();
        result.hasIsAutoSuspend = false;
        result.isAutoSuspend_ = 0;
        return this;
      }
      
      public bool HasBusinessUnit {
        get { return result.hasBusinessUnit; }
      }
      public string BusinessUnit {
        get { return result.BusinessUnit; }
        set { SetBusinessUnit(value); }
      }
      public Builder SetBusinessUnit(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBusinessUnit = true;
        result.businessUnit_ = value;
        return this;
      }
      public Builder ClearBusinessUnit() {
        PrepareBuilder();
        result.hasBusinessUnit = false;
        result.businessUnit_ = "";
        return this;
      }
      
      public bool HasRequestID {
        get { return result.hasRequestID; }
      }
      public int RequestID {
        get { return result.RequestID; }
        set { SetRequestID(value); }
      }
      public Builder SetRequestID(int value) {
        PrepareBuilder();
        result.hasRequestID = true;
        result.requestID_ = value;
        return this;
      }
      public Builder ClearRequestID() {
        PrepareBuilder();
        result.hasRequestID = false;
        result.requestID_ = 0;
        return this;
      }
      
      public bool HasOrderLocalID {
        get { return result.hasOrderLocalID; }
      }
      public string OrderLocalID {
        get { return result.OrderLocalID; }
        set { SetOrderLocalID(value); }
      }
      public Builder SetOrderLocalID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderLocalID = true;
        result.orderLocalID_ = value;
        return this;
      }
      public Builder ClearOrderLocalID() {
        PrepareBuilder();
        result.hasOrderLocalID = false;
        result.orderLocalID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasParticipantID {
        get { return result.hasParticipantID; }
      }
      public string ParticipantID {
        get { return result.ParticipantID; }
        set { SetParticipantID(value); }
      }
      public Builder SetParticipantID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParticipantID = true;
        result.participantID_ = value;
        return this;
      }
      public Builder ClearParticipantID() {
        PrepareBuilder();
        result.hasParticipantID = false;
        result.participantID_ = "";
        return this;
      }
      
      public bool HasClientID {
        get { return result.hasClientID; }
      }
      public string ClientID {
        get { return result.ClientID; }
        set { SetClientID(value); }
      }
      public Builder SetClientID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientID = true;
        result.clientID_ = value;
        return this;
      }
      public Builder ClearClientID() {
        PrepareBuilder();
        result.hasClientID = false;
        result.clientID_ = "";
        return this;
      }
      
      public bool HasExchangeInstID {
        get { return result.hasExchangeInstID; }
      }
      public string ExchangeInstID {
        get { return result.ExchangeInstID; }
        set { SetExchangeInstID(value); }
      }
      public Builder SetExchangeInstID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeInstID = true;
        result.exchangeInstID_ = value;
        return this;
      }
      public Builder ClearExchangeInstID() {
        PrepareBuilder();
        result.hasExchangeInstID = false;
        result.exchangeInstID_ = "";
        return this;
      }
      
      public bool HasTraderID {
        get { return result.hasTraderID; }
      }
      public string TraderID {
        get { return result.TraderID; }
        set { SetTraderID(value); }
      }
      public Builder SetTraderID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTraderID = true;
        result.traderID_ = value;
        return this;
      }
      public Builder ClearTraderID() {
        PrepareBuilder();
        result.hasTraderID = false;
        result.traderID_ = "";
        return this;
      }
      
      public bool HasInstallID {
        get { return result.hasInstallID; }
      }
      public int InstallID {
        get { return result.InstallID; }
        set { SetInstallID(value); }
      }
      public Builder SetInstallID(int value) {
        PrepareBuilder();
        result.hasInstallID = true;
        result.installID_ = value;
        return this;
      }
      public Builder ClearInstallID() {
        PrepareBuilder();
        result.hasInstallID = false;
        result.installID_ = 0;
        return this;
      }
      
      public bool HasOrderSubmitStatus {
        get { return result.hasOrderSubmitStatus; }
      }
      public string OrderSubmitStatus {
        get { return result.OrderSubmitStatus; }
        set { SetOrderSubmitStatus(value); }
      }
      public Builder SetOrderSubmitStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSubmitStatus = true;
        result.orderSubmitStatus_ = value;
        return this;
      }
      public Builder ClearOrderSubmitStatus() {
        PrepareBuilder();
        result.hasOrderSubmitStatus = false;
        result.orderSubmitStatus_ = "";
        return this;
      }
      
      public bool HasNotifySequence {
        get { return result.hasNotifySequence; }
      }
      public int NotifySequence {
        get { return result.NotifySequence; }
        set { SetNotifySequence(value); }
      }
      public Builder SetNotifySequence(int value) {
        PrepareBuilder();
        result.hasNotifySequence = true;
        result.notifySequence_ = value;
        return this;
      }
      public Builder ClearNotifySequence() {
        PrepareBuilder();
        result.hasNotifySequence = false;
        result.notifySequence_ = 0;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public string OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = "";
        return this;
      }
      
      public bool HasOrderSource {
        get { return result.hasOrderSource; }
      }
      public string OrderSource {
        get { return result.OrderSource; }
        set { SetOrderSource(value); }
      }
      public Builder SetOrderSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSource = true;
        result.orderSource_ = value;
        return this;
      }
      public Builder ClearOrderSource() {
        PrepareBuilder();
        result.hasOrderSource = false;
        result.orderSource_ = "";
        return this;
      }
      
      public bool HasOrderStatus {
        get { return result.hasOrderStatus; }
      }
      public string OrderStatus {
        get { return result.OrderStatus; }
        set { SetOrderStatus(value); }
      }
      public Builder SetOrderStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderStatus = true;
        result.orderStatus_ = value;
        return this;
      }
      public Builder ClearOrderStatus() {
        PrepareBuilder();
        result.hasOrderStatus = false;
        result.orderStatus_ = "";
        return this;
      }
      
      public bool HasOrderType {
        get { return result.hasOrderType; }
      }
      public string OrderType {
        get { return result.OrderType; }
        set { SetOrderType(value); }
      }
      public Builder SetOrderType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderType = true;
        result.orderType_ = value;
        return this;
      }
      public Builder ClearOrderType() {
        PrepareBuilder();
        result.hasOrderType = false;
        result.orderType_ = "";
        return this;
      }
      
      public bool HasVolumeTraded {
        get { return result.hasVolumeTraded; }
      }
      public int VolumeTraded {
        get { return result.VolumeTraded; }
        set { SetVolumeTraded(value); }
      }
      public Builder SetVolumeTraded(int value) {
        PrepareBuilder();
        result.hasVolumeTraded = true;
        result.volumeTraded_ = value;
        return this;
      }
      public Builder ClearVolumeTraded() {
        PrepareBuilder();
        result.hasVolumeTraded = false;
        result.volumeTraded_ = 0;
        return this;
      }
      
      public bool HasVolumeTotal {
        get { return result.hasVolumeTotal; }
      }
      public int VolumeTotal {
        get { return result.VolumeTotal; }
        set { SetVolumeTotal(value); }
      }
      public Builder SetVolumeTotal(int value) {
        PrepareBuilder();
        result.hasVolumeTotal = true;
        result.volumeTotal_ = value;
        return this;
      }
      public Builder ClearVolumeTotal() {
        PrepareBuilder();
        result.hasVolumeTotal = false;
        result.volumeTotal_ = 0;
        return this;
      }
      
      public bool HasInsertDate {
        get { return result.hasInsertDate; }
      }
      public string InsertDate {
        get { return result.InsertDate; }
        set { SetInsertDate(value); }
      }
      public Builder SetInsertDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInsertDate = true;
        result.insertDate_ = value;
        return this;
      }
      public Builder ClearInsertDate() {
        PrepareBuilder();
        result.hasInsertDate = false;
        result.insertDate_ = "";
        return this;
      }
      
      public bool HasInsertTime {
        get { return result.hasInsertTime; }
      }
      public string InsertTime {
        get { return result.InsertTime; }
        set { SetInsertTime(value); }
      }
      public Builder SetInsertTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInsertTime = true;
        result.insertTime_ = value;
        return this;
      }
      public Builder ClearInsertTime() {
        PrepareBuilder();
        result.hasInsertTime = false;
        result.insertTime_ = "";
        return this;
      }
      
      public bool HasActiveTime {
        get { return result.hasActiveTime; }
      }
      public string ActiveTime {
        get { return result.ActiveTime; }
        set { SetActiveTime(value); }
      }
      public Builder SetActiveTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveTime = true;
        result.activeTime_ = value;
        return this;
      }
      public Builder ClearActiveTime() {
        PrepareBuilder();
        result.hasActiveTime = false;
        result.activeTime_ = "";
        return this;
      }
      
      public bool HasSuspendTime {
        get { return result.hasSuspendTime; }
      }
      public string SuspendTime {
        get { return result.SuspendTime; }
        set { SetSuspendTime(value); }
      }
      public Builder SetSuspendTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuspendTime = true;
        result.suspendTime_ = value;
        return this;
      }
      public Builder ClearSuspendTime() {
        PrepareBuilder();
        result.hasSuspendTime = false;
        result.suspendTime_ = "";
        return this;
      }
      
      public bool HasUpdateTime {
        get { return result.hasUpdateTime; }
      }
      public string UpdateTime {
        get { return result.UpdateTime; }
        set { SetUpdateTime(value); }
      }
      public Builder SetUpdateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdateTime = true;
        result.updateTime_ = value;
        return this;
      }
      public Builder ClearUpdateTime() {
        PrepareBuilder();
        result.hasUpdateTime = false;
        result.updateTime_ = "";
        return this;
      }
      
      public bool HasCancelTime {
        get { return result.hasCancelTime; }
      }
      public string CancelTime {
        get { return result.CancelTime; }
        set { SetCancelTime(value); }
      }
      public Builder SetCancelTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCancelTime = true;
        result.cancelTime_ = value;
        return this;
      }
      public Builder ClearCancelTime() {
        PrepareBuilder();
        result.hasCancelTime = false;
        result.cancelTime_ = "";
        return this;
      }
      
      public bool HasActiveTraderID {
        get { return result.hasActiveTraderID; }
      }
      public string ActiveTraderID {
        get { return result.ActiveTraderID; }
        set { SetActiveTraderID(value); }
      }
      public Builder SetActiveTraderID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveTraderID = true;
        result.activeTraderID_ = value;
        return this;
      }
      public Builder ClearActiveTraderID() {
        PrepareBuilder();
        result.hasActiveTraderID = false;
        result.activeTraderID_ = "";
        return this;
      }
      
      public bool HasClearingPartID {
        get { return result.hasClearingPartID; }
      }
      public string ClearingPartID {
        get { return result.ClearingPartID; }
        set { SetClearingPartID(value); }
      }
      public Builder SetClearingPartID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClearingPartID = true;
        result.clearingPartID_ = value;
        return this;
      }
      public Builder ClearClearingPartID() {
        PrepareBuilder();
        result.hasClearingPartID = false;
        result.clearingPartID_ = "";
        return this;
      }
      
      public bool HasSequenceNo {
        get { return result.hasSequenceNo; }
      }
      public int SequenceNo {
        get { return result.SequenceNo; }
        set { SetSequenceNo(value); }
      }
      public Builder SetSequenceNo(int value) {
        PrepareBuilder();
        result.hasSequenceNo = true;
        result.sequenceNo_ = value;
        return this;
      }
      public Builder ClearSequenceNo() {
        PrepareBuilder();
        result.hasSequenceNo = false;
        result.sequenceNo_ = 0;
        return this;
      }
      
      public bool HasFrontID {
        get { return result.hasFrontID; }
      }
      public int FrontID {
        get { return result.FrontID; }
        set { SetFrontID(value); }
      }
      public Builder SetFrontID(int value) {
        PrepareBuilder();
        result.hasFrontID = true;
        result.frontID_ = value;
        return this;
      }
      public Builder ClearFrontID() {
        PrepareBuilder();
        result.hasFrontID = false;
        result.frontID_ = 0;
        return this;
      }
      
      public bool HasSessionID {
        get { return result.hasSessionID; }
      }
      public int SessionID {
        get { return result.SessionID; }
        set { SetSessionID(value); }
      }
      public Builder SetSessionID(int value) {
        PrepareBuilder();
        result.hasSessionID = true;
        result.sessionID_ = value;
        return this;
      }
      public Builder ClearSessionID() {
        PrepareBuilder();
        result.hasSessionID = false;
        result.sessionID_ = 0;
        return this;
      }
      
      public bool HasUserProductInfo {
        get { return result.hasUserProductInfo; }
      }
      public string UserProductInfo {
        get { return result.UserProductInfo; }
        set { SetUserProductInfo(value); }
      }
      public Builder SetUserProductInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserProductInfo = true;
        result.userProductInfo_ = value;
        return this;
      }
      public Builder ClearUserProductInfo() {
        PrepareBuilder();
        result.hasUserProductInfo = false;
        result.userProductInfo_ = "";
        return this;
      }
      
      public bool HasStatusMsg {
        get { return result.hasStatusMsg; }
      }
      public pb::ByteString StatusMsg {
        get { return result.StatusMsg; }
        set { SetStatusMsg(value); }
      }
      public Builder SetStatusMsg(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatusMsg = true;
        result.statusMsg_ = value;
        return this;
      }
      public Builder ClearStatusMsg() {
        PrepareBuilder();
        result.hasStatusMsg = false;
        result.statusMsg_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasUserForceClose {
        get { return result.hasUserForceClose; }
      }
      public int UserForceClose {
        get { return result.UserForceClose; }
        set { SetUserForceClose(value); }
      }
      public Builder SetUserForceClose(int value) {
        PrepareBuilder();
        result.hasUserForceClose = true;
        result.userForceClose_ = value;
        return this;
      }
      public Builder ClearUserForceClose() {
        PrepareBuilder();
        result.hasUserForceClose = false;
        result.userForceClose_ = 0;
        return this;
      }
      
      public bool HasActiveUserID {
        get { return result.hasActiveUserID; }
      }
      public string ActiveUserID {
        get { return result.ActiveUserID; }
        set { SetActiveUserID(value); }
      }
      public Builder SetActiveUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveUserID = true;
        result.activeUserID_ = value;
        return this;
      }
      public Builder ClearActiveUserID() {
        PrepareBuilder();
        result.hasActiveUserID = false;
        result.activeUserID_ = "";
        return this;
      }
      
      public bool HasBrokerOrderSeq {
        get { return result.hasBrokerOrderSeq; }
      }
      public int BrokerOrderSeq {
        get { return result.BrokerOrderSeq; }
        set { SetBrokerOrderSeq(value); }
      }
      public Builder SetBrokerOrderSeq(int value) {
        PrepareBuilder();
        result.hasBrokerOrderSeq = true;
        result.brokerOrderSeq_ = value;
        return this;
      }
      public Builder ClearBrokerOrderSeq() {
        PrepareBuilder();
        result.hasBrokerOrderSeq = false;
        result.brokerOrderSeq_ = 0;
        return this;
      }
      
      public bool HasRelativeOrderSysID {
        get { return result.hasRelativeOrderSysID; }
      }
      public string RelativeOrderSysID {
        get { return result.RelativeOrderSysID; }
        set { SetRelativeOrderSysID(value); }
      }
      public Builder SetRelativeOrderSysID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRelativeOrderSysID = true;
        result.relativeOrderSysID_ = value;
        return this;
      }
      public Builder ClearRelativeOrderSysID() {
        PrepareBuilder();
        result.hasRelativeOrderSysID = false;
        result.relativeOrderSysID_ = "";
        return this;
      }
      
      public bool HasZCETotalTradedVolume {
        get { return result.hasZCETotalTradedVolume; }
      }
      public int ZCETotalTradedVolume {
        get { return result.ZCETotalTradedVolume; }
        set { SetZCETotalTradedVolume(value); }
      }
      public Builder SetZCETotalTradedVolume(int value) {
        PrepareBuilder();
        result.hasZCETotalTradedVolume = true;
        result.zCETotalTradedVolume_ = value;
        return this;
      }
      public Builder ClearZCETotalTradedVolume() {
        PrepareBuilder();
        result.hasZCETotalTradedVolume = false;
        result.zCETotalTradedVolume_ = 0;
        return this;
      }
      
      public bool HasIsSwapOrder {
        get { return result.hasIsSwapOrder; }
      }
      public int IsSwapOrder {
        get { return result.IsSwapOrder; }
        set { SetIsSwapOrder(value); }
      }
      public Builder SetIsSwapOrder(int value) {
        PrepareBuilder();
        result.hasIsSwapOrder = true;
        result.isSwapOrder_ = value;
        return this;
      }
      public Builder ClearIsSwapOrder() {
        PrepareBuilder();
        result.hasIsSwapOrder = false;
        result.isSwapOrder_ = 0;
        return this;
      }
      
      public bool HasIOrderStatus {
        get { return result.hasIOrderStatus; }
      }
      public int IOrderStatus {
        get { return result.IOrderStatus; }
        set { SetIOrderStatus(value); }
      }
      public Builder SetIOrderStatus(int value) {
        PrepareBuilder();
        result.hasIOrderStatus = true;
        result.iOrderStatus_ = value;
        return this;
      }
      public Builder ClearIOrderStatus() {
        PrepareBuilder();
        result.hasIOrderStatus = false;
        result.iOrderStatus_ = 0;
        return this;
      }
    }
    static PBMsgOrderRtn() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgTradeRtn : pb::GeneratedMessage<PBMsgTradeRtn, PBMsgTradeRtn.Builder> {
    private PBMsgTradeRtn() { }
    private static readonly PBMsgTradeRtn defaultInstance = new PBMsgTradeRtn().MakeReadOnly();
    private static readonly string[] _pBMsgTradeRtnFieldNames = new string[] { "BrokerID", "BrokerOrderSeq", "BusinessUnit", "ClearingPartID", "ClientID", "Direction", "EOF", "ExchangeID", "ExchangeInstID", "HedgeFlag", "InstrumentID", "InvestorID", "OffsetFlag", "OrderLocalID", "OrderRef", "OrderSysID", "ParticipantID", "Price", "PriceSource", "SequenceNo", "SettlementID", "TradeDate", "TradeID", "TradeSource", "TradeTime", "TradeType", "TraderID", "TradingDay", "TradingRole", "UserID", "Volume" };
    private static readonly uint[] _pBMsgTradeRtnFieldTags = new uint[] { 18, 240, 210, 202, 98, 74, 8, 58, 114, 130, 34, 26, 122, 194, 42, 82, 90, 137, 178, 216, 232, 154, 66, 250, 162, 170, 186, 226, 106, 50, 144 };
    public static PBMsgTradeRtn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgTradeRtn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgTradeRtn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgTradeRtn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgTradeRtn, PBMsgTradeRtn.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgTradeRtn__FieldAccessorTable; }
    }
    
    public const int EOFFieldNumber = 1;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int InstrumentIDFieldNumber = 4;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int OrderRefFieldNumber = 5;
    private bool hasOrderRef;
    private string orderRef_ = "";
    public bool HasOrderRef {
      get { return hasOrderRef; }
    }
    public string OrderRef {
      get { return orderRef_; }
    }
    
    public const int UserIDFieldNumber = 6;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int ExchangeIDFieldNumber = 7;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int TradeIDFieldNumber = 8;
    private bool hasTradeID;
    private string tradeID_ = "";
    public bool HasTradeID {
      get { return hasTradeID; }
    }
    public string TradeID {
      get { return tradeID_; }
    }
    
    public const int DirectionFieldNumber = 9;
    private bool hasDirection;
    private string direction_ = "";
    public bool HasDirection {
      get { return hasDirection; }
    }
    public string Direction {
      get { return direction_; }
    }
    
    public const int OrderSysIDFieldNumber = 10;
    private bool hasOrderSysID;
    private string orderSysID_ = "";
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public string OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int ParticipantIDFieldNumber = 11;
    private bool hasParticipantID;
    private string participantID_ = "";
    public bool HasParticipantID {
      get { return hasParticipantID; }
    }
    public string ParticipantID {
      get { return participantID_; }
    }
    
    public const int ClientIDFieldNumber = 12;
    private bool hasClientID;
    private string clientID_ = "";
    public bool HasClientID {
      get { return hasClientID; }
    }
    public string ClientID {
      get { return clientID_; }
    }
    
    public const int TradingRoleFieldNumber = 13;
    private bool hasTradingRole;
    private string tradingRole_ = "";
    public bool HasTradingRole {
      get { return hasTradingRole; }
    }
    public string TradingRole {
      get { return tradingRole_; }
    }
    
    public const int ExchangeInstIDFieldNumber = 14;
    private bool hasExchangeInstID;
    private string exchangeInstID_ = "";
    public bool HasExchangeInstID {
      get { return hasExchangeInstID; }
    }
    public string ExchangeInstID {
      get { return exchangeInstID_; }
    }
    
    public const int OffsetFlagFieldNumber = 15;
    private bool hasOffsetFlag;
    private string offsetFlag_ = "";
    public bool HasOffsetFlag {
      get { return hasOffsetFlag; }
    }
    public string OffsetFlag {
      get { return offsetFlag_; }
    }
    
    public const int HedgeFlagFieldNumber = 16;
    private bool hasHedgeFlag;
    private string hedgeFlag_ = "";
    public bool HasHedgeFlag {
      get { return hasHedgeFlag; }
    }
    public string HedgeFlag {
      get { return hedgeFlag_; }
    }
    
    public const int PriceFieldNumber = 17;
    private bool hasPrice;
    private double price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public const int VolumeFieldNumber = 18;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int TradeDateFieldNumber = 19;
    private bool hasTradeDate;
    private string tradeDate_ = "";
    public bool HasTradeDate {
      get { return hasTradeDate; }
    }
    public string TradeDate {
      get { return tradeDate_; }
    }
    
    public const int TradeTimeFieldNumber = 20;
    private bool hasTradeTime;
    private string tradeTime_ = "";
    public bool HasTradeTime {
      get { return hasTradeTime; }
    }
    public string TradeTime {
      get { return tradeTime_; }
    }
    
    public const int TradeTypeFieldNumber = 21;
    private bool hasTradeType;
    private string tradeType_ = "";
    public bool HasTradeType {
      get { return hasTradeType; }
    }
    public string TradeType {
      get { return tradeType_; }
    }
    
    public const int PriceSourceFieldNumber = 22;
    private bool hasPriceSource;
    private string priceSource_ = "";
    public bool HasPriceSource {
      get { return hasPriceSource; }
    }
    public string PriceSource {
      get { return priceSource_; }
    }
    
    public const int TraderIDFieldNumber = 23;
    private bool hasTraderID;
    private string traderID_ = "";
    public bool HasTraderID {
      get { return hasTraderID; }
    }
    public string TraderID {
      get { return traderID_; }
    }
    
    public const int OrderLocalIDFieldNumber = 24;
    private bool hasOrderLocalID;
    private string orderLocalID_ = "";
    public bool HasOrderLocalID {
      get { return hasOrderLocalID; }
    }
    public string OrderLocalID {
      get { return orderLocalID_; }
    }
    
    public const int ClearingPartIDFieldNumber = 25;
    private bool hasClearingPartID;
    private string clearingPartID_ = "";
    public bool HasClearingPartID {
      get { return hasClearingPartID; }
    }
    public string ClearingPartID {
      get { return clearingPartID_; }
    }
    
    public const int BusinessUnitFieldNumber = 26;
    private bool hasBusinessUnit;
    private string businessUnit_ = "";
    public bool HasBusinessUnit {
      get { return hasBusinessUnit; }
    }
    public string BusinessUnit {
      get { return businessUnit_; }
    }
    
    public const int SequenceNoFieldNumber = 27;
    private bool hasSequenceNo;
    private int sequenceNo_;
    public bool HasSequenceNo {
      get { return hasSequenceNo; }
    }
    public int SequenceNo {
      get { return sequenceNo_; }
    }
    
    public const int TradingDayFieldNumber = 28;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 29;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public const int BrokerOrderSeqFieldNumber = 30;
    private bool hasBrokerOrderSeq;
    private int brokerOrderSeq_;
    public bool HasBrokerOrderSeq {
      get { return hasBrokerOrderSeq; }
    }
    public int BrokerOrderSeq {
      get { return brokerOrderSeq_; }
    }
    
    public const int TradeSourceFieldNumber = 31;
    private bool hasTradeSource;
    private string tradeSource_ = "";
    public bool HasTradeSource {
      get { return hasTradeSource; }
    }
    public string TradeSource {
      get { return tradeSource_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgTradeRtnFieldNames;
      if (hasEOF) {
        output.WriteInt32(1, field_names[6], EOF);
      }
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[11], InvestorID);
      }
      if (hasInstrumentID) {
        output.WriteString(4, field_names[10], InstrumentID);
      }
      if (hasOrderRef) {
        output.WriteString(5, field_names[14], OrderRef);
      }
      if (hasUserID) {
        output.WriteString(6, field_names[29], UserID);
      }
      if (hasExchangeID) {
        output.WriteString(7, field_names[7], ExchangeID);
      }
      if (hasTradeID) {
        output.WriteString(8, field_names[22], TradeID);
      }
      if (hasDirection) {
        output.WriteString(9, field_names[5], Direction);
      }
      if (hasOrderSysID) {
        output.WriteString(10, field_names[15], OrderSysID);
      }
      if (hasParticipantID) {
        output.WriteString(11, field_names[16], ParticipantID);
      }
      if (hasClientID) {
        output.WriteString(12, field_names[4], ClientID);
      }
      if (hasTradingRole) {
        output.WriteString(13, field_names[28], TradingRole);
      }
      if (hasExchangeInstID) {
        output.WriteString(14, field_names[8], ExchangeInstID);
      }
      if (hasOffsetFlag) {
        output.WriteString(15, field_names[12], OffsetFlag);
      }
      if (hasHedgeFlag) {
        output.WriteString(16, field_names[9], HedgeFlag);
      }
      if (hasPrice) {
        output.WriteDouble(17, field_names[17], Price);
      }
      if (hasVolume) {
        output.WriteInt32(18, field_names[30], Volume);
      }
      if (hasTradeDate) {
        output.WriteString(19, field_names[21], TradeDate);
      }
      if (hasTradeTime) {
        output.WriteString(20, field_names[24], TradeTime);
      }
      if (hasTradeType) {
        output.WriteString(21, field_names[25], TradeType);
      }
      if (hasPriceSource) {
        output.WriteString(22, field_names[18], PriceSource);
      }
      if (hasTraderID) {
        output.WriteString(23, field_names[26], TraderID);
      }
      if (hasOrderLocalID) {
        output.WriteString(24, field_names[13], OrderLocalID);
      }
      if (hasClearingPartID) {
        output.WriteString(25, field_names[3], ClearingPartID);
      }
      if (hasBusinessUnit) {
        output.WriteString(26, field_names[2], BusinessUnit);
      }
      if (hasSequenceNo) {
        output.WriteInt32(27, field_names[19], SequenceNo);
      }
      if (hasTradingDay) {
        output.WriteString(28, field_names[27], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(29, field_names[20], SettlementID);
      }
      if (hasBrokerOrderSeq) {
        output.WriteInt32(30, field_names[1], BrokerOrderSeq);
      }
      if (hasTradeSource) {
        output.WriteString(31, field_names[23], TradeSource);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EOF);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InstrumentID);
        }
        if (hasOrderRef) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderRef);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ExchangeID);
        }
        if (hasTradeID) {
          size += pb::CodedOutputStream.ComputeStringSize(8, TradeID);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Direction);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeStringSize(10, OrderSysID);
        }
        if (hasParticipantID) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ParticipantID);
        }
        if (hasClientID) {
          size += pb::CodedOutputStream.ComputeStringSize(12, ClientID);
        }
        if (hasTradingRole) {
          size += pb::CodedOutputStream.ComputeStringSize(13, TradingRole);
        }
        if (hasExchangeInstID) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ExchangeInstID);
        }
        if (hasOffsetFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(15, OffsetFlag);
        }
        if (hasHedgeFlag) {
          size += pb::CodedOutputStream.ComputeStringSize(16, HedgeFlag);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, Price);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, Volume);
        }
        if (hasTradeDate) {
          size += pb::CodedOutputStream.ComputeStringSize(19, TradeDate);
        }
        if (hasTradeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(20, TradeTime);
        }
        if (hasTradeType) {
          size += pb::CodedOutputStream.ComputeStringSize(21, TradeType);
        }
        if (hasPriceSource) {
          size += pb::CodedOutputStream.ComputeStringSize(22, PriceSource);
        }
        if (hasTraderID) {
          size += pb::CodedOutputStream.ComputeStringSize(23, TraderID);
        }
        if (hasOrderLocalID) {
          size += pb::CodedOutputStream.ComputeStringSize(24, OrderLocalID);
        }
        if (hasClearingPartID) {
          size += pb::CodedOutputStream.ComputeStringSize(25, ClearingPartID);
        }
        if (hasBusinessUnit) {
          size += pb::CodedOutputStream.ComputeStringSize(26, BusinessUnit);
        }
        if (hasSequenceNo) {
          size += pb::CodedOutputStream.ComputeInt32Size(27, SequenceNo);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(28, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(29, SettlementID);
        }
        if (hasBrokerOrderSeq) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, BrokerOrderSeq);
        }
        if (hasTradeSource) {
          size += pb::CodedOutputStream.ComputeStringSize(31, TradeSource);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgTradeRtn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgTradeRtn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgTradeRtn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgTradeRtn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgTradeRtn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgTradeRtn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgTradeRtn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgTradeRtn result;
      
      private PBMsgTradeRtn PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgTradeRtn original = result;
          result = new PBMsgTradeRtn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgTradeRtn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgTradeRtn.Descriptor; }
      }
      
      public override PBMsgTradeRtn DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgTradeRtn.DefaultInstance; }
      }
      
      public override PBMsgTradeRtn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgTradeRtn) {
          return MergeFrom((PBMsgTradeRtn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgTradeRtn other) {
        if (other == global::PBMsgTrader.PBMsgTradeRtn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasOrderRef) {
          OrderRef = other.OrderRef;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasTradeID) {
          TradeID = other.TradeID;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasParticipantID) {
          ParticipantID = other.ParticipantID;
        }
        if (other.HasClientID) {
          ClientID = other.ClientID;
        }
        if (other.HasTradingRole) {
          TradingRole = other.TradingRole;
        }
        if (other.HasExchangeInstID) {
          ExchangeInstID = other.ExchangeInstID;
        }
        if (other.HasOffsetFlag) {
          OffsetFlag = other.OffsetFlag;
        }
        if (other.HasHedgeFlag) {
          HedgeFlag = other.HedgeFlag;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasTradeDate) {
          TradeDate = other.TradeDate;
        }
        if (other.HasTradeTime) {
          TradeTime = other.TradeTime;
        }
        if (other.HasTradeType) {
          TradeType = other.TradeType;
        }
        if (other.HasPriceSource) {
          PriceSource = other.PriceSource;
        }
        if (other.HasTraderID) {
          TraderID = other.TraderID;
        }
        if (other.HasOrderLocalID) {
          OrderLocalID = other.OrderLocalID;
        }
        if (other.HasClearingPartID) {
          ClearingPartID = other.ClearingPartID;
        }
        if (other.HasBusinessUnit) {
          BusinessUnit = other.BusinessUnit;
        }
        if (other.HasSequenceNo) {
          SequenceNo = other.SequenceNo;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        if (other.HasBrokerOrderSeq) {
          BrokerOrderSeq = other.BrokerOrderSeq;
        }
        if (other.HasTradeSource) {
          TradeSource = other.TradeSource;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgTradeRtnFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgTradeRtnFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 42: {
              result.hasOrderRef = input.ReadString(ref result.orderRef_);
              break;
            }
            case 50: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 58: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 66: {
              result.hasTradeID = input.ReadString(ref result.tradeID_);
              break;
            }
            case 74: {
              result.hasDirection = input.ReadString(ref result.direction_);
              break;
            }
            case 82: {
              result.hasOrderSysID = input.ReadString(ref result.orderSysID_);
              break;
            }
            case 90: {
              result.hasParticipantID = input.ReadString(ref result.participantID_);
              break;
            }
            case 98: {
              result.hasClientID = input.ReadString(ref result.clientID_);
              break;
            }
            case 106: {
              result.hasTradingRole = input.ReadString(ref result.tradingRole_);
              break;
            }
            case 114: {
              result.hasExchangeInstID = input.ReadString(ref result.exchangeInstID_);
              break;
            }
            case 122: {
              result.hasOffsetFlag = input.ReadString(ref result.offsetFlag_);
              break;
            }
            case 130: {
              result.hasHedgeFlag = input.ReadString(ref result.hedgeFlag_);
              break;
            }
            case 137: {
              result.hasPrice = input.ReadDouble(ref result.price_);
              break;
            }
            case 144: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 154: {
              result.hasTradeDate = input.ReadString(ref result.tradeDate_);
              break;
            }
            case 162: {
              result.hasTradeTime = input.ReadString(ref result.tradeTime_);
              break;
            }
            case 170: {
              result.hasTradeType = input.ReadString(ref result.tradeType_);
              break;
            }
            case 178: {
              result.hasPriceSource = input.ReadString(ref result.priceSource_);
              break;
            }
            case 186: {
              result.hasTraderID = input.ReadString(ref result.traderID_);
              break;
            }
            case 194: {
              result.hasOrderLocalID = input.ReadString(ref result.orderLocalID_);
              break;
            }
            case 202: {
              result.hasClearingPartID = input.ReadString(ref result.clearingPartID_);
              break;
            }
            case 210: {
              result.hasBusinessUnit = input.ReadString(ref result.businessUnit_);
              break;
            }
            case 216: {
              result.hasSequenceNo = input.ReadInt32(ref result.sequenceNo_);
              break;
            }
            case 226: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 232: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
            case 240: {
              result.hasBrokerOrderSeq = input.ReadInt32(ref result.brokerOrderSeq_);
              break;
            }
            case 250: {
              result.hasTradeSource = input.ReadString(ref result.tradeSource_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasOrderRef {
        get { return result.hasOrderRef; }
      }
      public string OrderRef {
        get { return result.OrderRef; }
        set { SetOrderRef(value); }
      }
      public Builder SetOrderRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderRef = true;
        result.orderRef_ = value;
        return this;
      }
      public Builder ClearOrderRef() {
        PrepareBuilder();
        result.hasOrderRef = false;
        result.orderRef_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasTradeID {
        get { return result.hasTradeID; }
      }
      public string TradeID {
        get { return result.TradeID; }
        set { SetTradeID(value); }
      }
      public Builder SetTradeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeID = true;
        result.tradeID_ = value;
        return this;
      }
      public Builder ClearTradeID() {
        PrepareBuilder();
        result.hasTradeID = false;
        result.tradeID_ = "";
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public string Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = "";
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public string OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = "";
        return this;
      }
      
      public bool HasParticipantID {
        get { return result.hasParticipantID; }
      }
      public string ParticipantID {
        get { return result.ParticipantID; }
        set { SetParticipantID(value); }
      }
      public Builder SetParticipantID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParticipantID = true;
        result.participantID_ = value;
        return this;
      }
      public Builder ClearParticipantID() {
        PrepareBuilder();
        result.hasParticipantID = false;
        result.participantID_ = "";
        return this;
      }
      
      public bool HasClientID {
        get { return result.hasClientID; }
      }
      public string ClientID {
        get { return result.ClientID; }
        set { SetClientID(value); }
      }
      public Builder SetClientID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientID = true;
        result.clientID_ = value;
        return this;
      }
      public Builder ClearClientID() {
        PrepareBuilder();
        result.hasClientID = false;
        result.clientID_ = "";
        return this;
      }
      
      public bool HasTradingRole {
        get { return result.hasTradingRole; }
      }
      public string TradingRole {
        get { return result.TradingRole; }
        set { SetTradingRole(value); }
      }
      public Builder SetTradingRole(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingRole = true;
        result.tradingRole_ = value;
        return this;
      }
      public Builder ClearTradingRole() {
        PrepareBuilder();
        result.hasTradingRole = false;
        result.tradingRole_ = "";
        return this;
      }
      
      public bool HasExchangeInstID {
        get { return result.hasExchangeInstID; }
      }
      public string ExchangeInstID {
        get { return result.ExchangeInstID; }
        set { SetExchangeInstID(value); }
      }
      public Builder SetExchangeInstID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeInstID = true;
        result.exchangeInstID_ = value;
        return this;
      }
      public Builder ClearExchangeInstID() {
        PrepareBuilder();
        result.hasExchangeInstID = false;
        result.exchangeInstID_ = "";
        return this;
      }
      
      public bool HasOffsetFlag {
        get { return result.hasOffsetFlag; }
      }
      public string OffsetFlag {
        get { return result.OffsetFlag; }
        set { SetOffsetFlag(value); }
      }
      public Builder SetOffsetFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOffsetFlag = true;
        result.offsetFlag_ = value;
        return this;
      }
      public Builder ClearOffsetFlag() {
        PrepareBuilder();
        result.hasOffsetFlag = false;
        result.offsetFlag_ = "";
        return this;
      }
      
      public bool HasHedgeFlag {
        get { return result.hasHedgeFlag; }
      }
      public string HedgeFlag {
        get { return result.HedgeFlag; }
        set { SetHedgeFlag(value); }
      }
      public Builder SetHedgeFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHedgeFlag = true;
        result.hedgeFlag_ = value;
        return this;
      }
      public Builder ClearHedgeFlag() {
        PrepareBuilder();
        result.hasHedgeFlag = false;
        result.hedgeFlag_ = "";
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasTradeDate {
        get { return result.hasTradeDate; }
      }
      public string TradeDate {
        get { return result.TradeDate; }
        set { SetTradeDate(value); }
      }
      public Builder SetTradeDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeDate = true;
        result.tradeDate_ = value;
        return this;
      }
      public Builder ClearTradeDate() {
        PrepareBuilder();
        result.hasTradeDate = false;
        result.tradeDate_ = "";
        return this;
      }
      
      public bool HasTradeTime {
        get { return result.hasTradeTime; }
      }
      public string TradeTime {
        get { return result.TradeTime; }
        set { SetTradeTime(value); }
      }
      public Builder SetTradeTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeTime = true;
        result.tradeTime_ = value;
        return this;
      }
      public Builder ClearTradeTime() {
        PrepareBuilder();
        result.hasTradeTime = false;
        result.tradeTime_ = "";
        return this;
      }
      
      public bool HasTradeType {
        get { return result.hasTradeType; }
      }
      public string TradeType {
        get { return result.TradeType; }
        set { SetTradeType(value); }
      }
      public Builder SetTradeType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeType = true;
        result.tradeType_ = value;
        return this;
      }
      public Builder ClearTradeType() {
        PrepareBuilder();
        result.hasTradeType = false;
        result.tradeType_ = "";
        return this;
      }
      
      public bool HasPriceSource {
        get { return result.hasPriceSource; }
      }
      public string PriceSource {
        get { return result.PriceSource; }
        set { SetPriceSource(value); }
      }
      public Builder SetPriceSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPriceSource = true;
        result.priceSource_ = value;
        return this;
      }
      public Builder ClearPriceSource() {
        PrepareBuilder();
        result.hasPriceSource = false;
        result.priceSource_ = "";
        return this;
      }
      
      public bool HasTraderID {
        get { return result.hasTraderID; }
      }
      public string TraderID {
        get { return result.TraderID; }
        set { SetTraderID(value); }
      }
      public Builder SetTraderID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTraderID = true;
        result.traderID_ = value;
        return this;
      }
      public Builder ClearTraderID() {
        PrepareBuilder();
        result.hasTraderID = false;
        result.traderID_ = "";
        return this;
      }
      
      public bool HasOrderLocalID {
        get { return result.hasOrderLocalID; }
      }
      public string OrderLocalID {
        get { return result.OrderLocalID; }
        set { SetOrderLocalID(value); }
      }
      public Builder SetOrderLocalID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderLocalID = true;
        result.orderLocalID_ = value;
        return this;
      }
      public Builder ClearOrderLocalID() {
        PrepareBuilder();
        result.hasOrderLocalID = false;
        result.orderLocalID_ = "";
        return this;
      }
      
      public bool HasClearingPartID {
        get { return result.hasClearingPartID; }
      }
      public string ClearingPartID {
        get { return result.ClearingPartID; }
        set { SetClearingPartID(value); }
      }
      public Builder SetClearingPartID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClearingPartID = true;
        result.clearingPartID_ = value;
        return this;
      }
      public Builder ClearClearingPartID() {
        PrepareBuilder();
        result.hasClearingPartID = false;
        result.clearingPartID_ = "";
        return this;
      }
      
      public bool HasBusinessUnit {
        get { return result.hasBusinessUnit; }
      }
      public string BusinessUnit {
        get { return result.BusinessUnit; }
        set { SetBusinessUnit(value); }
      }
      public Builder SetBusinessUnit(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBusinessUnit = true;
        result.businessUnit_ = value;
        return this;
      }
      public Builder ClearBusinessUnit() {
        PrepareBuilder();
        result.hasBusinessUnit = false;
        result.businessUnit_ = "";
        return this;
      }
      
      public bool HasSequenceNo {
        get { return result.hasSequenceNo; }
      }
      public int SequenceNo {
        get { return result.SequenceNo; }
        set { SetSequenceNo(value); }
      }
      public Builder SetSequenceNo(int value) {
        PrepareBuilder();
        result.hasSequenceNo = true;
        result.sequenceNo_ = value;
        return this;
      }
      public Builder ClearSequenceNo() {
        PrepareBuilder();
        result.hasSequenceNo = false;
        result.sequenceNo_ = 0;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
      
      public bool HasBrokerOrderSeq {
        get { return result.hasBrokerOrderSeq; }
      }
      public int BrokerOrderSeq {
        get { return result.BrokerOrderSeq; }
        set { SetBrokerOrderSeq(value); }
      }
      public Builder SetBrokerOrderSeq(int value) {
        PrepareBuilder();
        result.hasBrokerOrderSeq = true;
        result.brokerOrderSeq_ = value;
        return this;
      }
      public Builder ClearBrokerOrderSeq() {
        PrepareBuilder();
        result.hasBrokerOrderSeq = false;
        result.brokerOrderSeq_ = 0;
        return this;
      }
      
      public bool HasTradeSource {
        get { return result.hasTradeSource; }
      }
      public string TradeSource {
        get { return result.TradeSource; }
        set { SetTradeSource(value); }
      }
      public Builder SetTradeSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeSource = true;
        result.tradeSource_ = value;
        return this;
      }
      public Builder ClearTradeSource() {
        PrepareBuilder();
        result.hasTradeSource = false;
        result.tradeSource_ = "";
        return this;
      }
    }
    static PBMsgTradeRtn() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgSettlementInfoConfirm : pb::GeneratedMessage<PBMsgSettlementInfoConfirm, PBMsgSettlementInfoConfirm.Builder> {
    private PBMsgSettlementInfoConfirm() { }
    private static readonly PBMsgSettlementInfoConfirm defaultInstance = new PBMsgSettlementInfoConfirm().MakeReadOnly();
    private static readonly string[] _pBMsgSettlementInfoConfirmFieldNames = new string[] { "BrokerID", "ConfirmDate", "ConfirmTime", "InvestorID" };
    private static readonly uint[] _pBMsgSettlementInfoConfirmFieldTags = new uint[] { 18, 34, 42, 26 };
    public static PBMsgSettlementInfoConfirm DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgSettlementInfoConfirm DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgSettlementInfoConfirm ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgSettlementInfoConfirm, PBMsgSettlementInfoConfirm.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgSettlementInfoConfirm__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int ConfirmDateFieldNumber = 4;
    private bool hasConfirmDate;
    private string confirmDate_ = "";
    public bool HasConfirmDate {
      get { return hasConfirmDate; }
    }
    public string ConfirmDate {
      get { return confirmDate_; }
    }
    
    public const int ConfirmTimeFieldNumber = 5;
    private bool hasConfirmTime;
    private string confirmTime_ = "";
    public bool HasConfirmTime {
      get { return hasConfirmTime; }
    }
    public string ConfirmTime {
      get { return confirmTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgSettlementInfoConfirmFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[3], InvestorID);
      }
      if (hasConfirmDate) {
        output.WriteString(4, field_names[1], ConfirmDate);
      }
      if (hasConfirmTime) {
        output.WriteString(5, field_names[2], ConfirmTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasConfirmDate) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ConfirmDate);
        }
        if (hasConfirmTime) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ConfirmTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgSettlementInfoConfirm ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgSettlementInfoConfirm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgSettlementInfoConfirm MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgSettlementInfoConfirm prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgSettlementInfoConfirm, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgSettlementInfoConfirm cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgSettlementInfoConfirm result;
      
      private PBMsgSettlementInfoConfirm PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgSettlementInfoConfirm original = result;
          result = new PBMsgSettlementInfoConfirm();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgSettlementInfoConfirm MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgSettlementInfoConfirm.Descriptor; }
      }
      
      public override PBMsgSettlementInfoConfirm DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgSettlementInfoConfirm.DefaultInstance; }
      }
      
      public override PBMsgSettlementInfoConfirm BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgSettlementInfoConfirm) {
          return MergeFrom((PBMsgSettlementInfoConfirm) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgSettlementInfoConfirm other) {
        if (other == global::PBMsgTrader.PBMsgSettlementInfoConfirm.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasConfirmDate) {
          ConfirmDate = other.ConfirmDate;
        }
        if (other.HasConfirmTime) {
          ConfirmTime = other.ConfirmTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgSettlementInfoConfirmFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgSettlementInfoConfirmFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasConfirmDate = input.ReadString(ref result.confirmDate_);
              break;
            }
            case 42: {
              result.hasConfirmTime = input.ReadString(ref result.confirmTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasConfirmDate {
        get { return result.hasConfirmDate; }
      }
      public string ConfirmDate {
        get { return result.ConfirmDate; }
        set { SetConfirmDate(value); }
      }
      public Builder SetConfirmDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConfirmDate = true;
        result.confirmDate_ = value;
        return this;
      }
      public Builder ClearConfirmDate() {
        PrepareBuilder();
        result.hasConfirmDate = false;
        result.confirmDate_ = "";
        return this;
      }
      
      public bool HasConfirmTime {
        get { return result.hasConfirmTime; }
      }
      public string ConfirmTime {
        get { return result.ConfirmTime; }
        set { SetConfirmTime(value); }
      }
      public Builder SetConfirmTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConfirmTime = true;
        result.confirmTime_ = value;
        return this;
      }
      public Builder ClearConfirmTime() {
        PrepareBuilder();
        result.hasConfirmTime = false;
        result.confirmTime_ = "";
        return this;
      }
    }
    static PBMsgSettlementInfoConfirm() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgReqConnect : pb::GeneratedMessage<PBMsgReqConnect, PBMsgReqConnect.Builder> {
    private PBMsgReqConnect() { }
    private static readonly PBMsgReqConnect defaultInstance = new PBMsgReqConnect().MakeReadOnly();
    private static readonly string[] _pBMsgReqConnectFieldNames = new string[] { "BrokerID", "InvestorID", "TradeFront" };
    private static readonly uint[] _pBMsgReqConnectFieldTags = new uint[] { 18, 26, 34 };
    public static PBMsgReqConnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgReqConnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgReqConnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgReqConnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgReqConnect, PBMsgReqConnect.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgReqConnect__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int TradeFrontFieldNumber = 4;
    private bool hasTradeFront;
    private string tradeFront_ = "";
    public bool HasTradeFront {
      get { return hasTradeFront; }
    }
    public string TradeFront {
      get { return tradeFront_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgReqConnectFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[1], InvestorID);
      }
      if (hasTradeFront) {
        output.WriteString(4, field_names[2], TradeFront);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasTradeFront) {
          size += pb::CodedOutputStream.ComputeStringSize(4, TradeFront);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgReqConnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgReqConnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgReqConnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgReqConnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgReqConnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgReqConnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgReqConnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgReqConnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgReqConnect result;
      
      private PBMsgReqConnect PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgReqConnect original = result;
          result = new PBMsgReqConnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgReqConnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgReqConnect.Descriptor; }
      }
      
      public override PBMsgReqConnect DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgReqConnect.DefaultInstance; }
      }
      
      public override PBMsgReqConnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgReqConnect) {
          return MergeFrom((PBMsgReqConnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgReqConnect other) {
        if (other == global::PBMsgTrader.PBMsgReqConnect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasTradeFront) {
          TradeFront = other.TradeFront;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgReqConnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgReqConnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasTradeFront = input.ReadString(ref result.tradeFront_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasTradeFront {
        get { return result.hasTradeFront; }
      }
      public string TradeFront {
        get { return result.TradeFront; }
        set { SetTradeFront(value); }
      }
      public Builder SetTradeFront(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeFront = true;
        result.tradeFront_ = value;
        return this;
      }
      public Builder ClearTradeFront() {
        PrepareBuilder();
        result.hasTradeFront = false;
        result.tradeFront_ = "";
        return this;
      }
    }
    static PBMsgReqConnect() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgRspConnect : pb::GeneratedMessage<PBMsgRspConnect, PBMsgRspConnect.Builder> {
    private PBMsgRspConnect() { }
    private static readonly PBMsgRspConnect defaultInstance = new PBMsgRspConnect().MakeReadOnly();
    private static readonly string[] _pBMsgRspConnectFieldNames = new string[] { "BrokerID", "InvestorID", "ReqURI", "RspURI", "TradeFront" };
    private static readonly uint[] _pBMsgRspConnectFieldTags = new uint[] { 18, 26, 42, 50, 34 };
    public static PBMsgRspConnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgRspConnect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgRspConnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgRspConnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgRspConnect, PBMsgRspConnect.Builder> InternalFieldAccessors {
      get { return global::PBMsgTrader.Generated.PBMsgTrader.internal__static_PBMsgTrader_PBMsgRspConnect__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int TradeFrontFieldNumber = 4;
    private bool hasTradeFront;
    private string tradeFront_ = "";
    public bool HasTradeFront {
      get { return hasTradeFront; }
    }
    public string TradeFront {
      get { return tradeFront_; }
    }
    
    public const int ReqURIFieldNumber = 5;
    private bool hasReqURI;
    private string reqURI_ = "";
    public bool HasReqURI {
      get { return hasReqURI; }
    }
    public string ReqURI {
      get { return reqURI_; }
    }
    
    public const int RspURIFieldNumber = 6;
    private bool hasRspURI;
    private string rspURI_ = "";
    public bool HasRspURI {
      get { return hasRspURI; }
    }
    public string RspURI {
      get { return rspURI_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgRspConnectFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[1], InvestorID);
      }
      if (hasTradeFront) {
        output.WriteString(4, field_names[4], TradeFront);
      }
      if (hasReqURI) {
        output.WriteString(5, field_names[2], ReqURI);
      }
      if (hasRspURI) {
        output.WriteString(6, field_names[3], RspURI);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasTradeFront) {
          size += pb::CodedOutputStream.ComputeStringSize(4, TradeFront);
        }
        if (hasReqURI) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ReqURI);
        }
        if (hasRspURI) {
          size += pb::CodedOutputStream.ComputeStringSize(6, RspURI);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgRspConnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgRspConnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgRspConnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgRspConnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgRspConnect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgRspConnect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgRspConnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgRspConnect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgRspConnect result;
      
      private PBMsgRspConnect PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgRspConnect original = result;
          result = new PBMsgRspConnect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgRspConnect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBMsgTrader.PBMsgRspConnect.Descriptor; }
      }
      
      public override PBMsgRspConnect DefaultInstanceForType {
        get { return global::PBMsgTrader.PBMsgRspConnect.DefaultInstance; }
      }
      
      public override PBMsgRspConnect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgRspConnect) {
          return MergeFrom((PBMsgRspConnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgRspConnect other) {
        if (other == global::PBMsgTrader.PBMsgRspConnect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasTradeFront) {
          TradeFront = other.TradeFront;
        }
        if (other.HasReqURI) {
          ReqURI = other.ReqURI;
        }
        if (other.HasRspURI) {
          RspURI = other.RspURI;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgRspConnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgRspConnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasTradeFront = input.ReadString(ref result.tradeFront_);
              break;
            }
            case 42: {
              result.hasReqURI = input.ReadString(ref result.reqURI_);
              break;
            }
            case 50: {
              result.hasRspURI = input.ReadString(ref result.rspURI_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasTradeFront {
        get { return result.hasTradeFront; }
      }
      public string TradeFront {
        get { return result.TradeFront; }
        set { SetTradeFront(value); }
      }
      public Builder SetTradeFront(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeFront = true;
        result.tradeFront_ = value;
        return this;
      }
      public Builder ClearTradeFront() {
        PrepareBuilder();
        result.hasTradeFront = false;
        result.tradeFront_ = "";
        return this;
      }
      
      public bool HasReqURI {
        get { return result.hasReqURI; }
      }
      public string ReqURI {
        get { return result.ReqURI; }
        set { SetReqURI(value); }
      }
      public Builder SetReqURI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReqURI = true;
        result.reqURI_ = value;
        return this;
      }
      public Builder ClearReqURI() {
        PrepareBuilder();
        result.hasReqURI = false;
        result.reqURI_ = "";
        return this;
      }
      
      public bool HasRspURI {
        get { return result.hasRspURI; }
      }
      public string RspURI {
        get { return result.RspURI; }
        set { SetRspURI(value); }
      }
      public Builder SetRspURI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRspURI = true;
        result.rspURI_ = value;
        return this;
      }
      public Builder ClearRspURI() {
        PrepareBuilder();
        result.hasRspURI = false;
        result.rspURI_ = "";
        return this;
      }
    }
    static PBMsgRspConnect() {
      object.ReferenceEquals(global::PBMsgTrader.Generated.PBMsgTrader.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
