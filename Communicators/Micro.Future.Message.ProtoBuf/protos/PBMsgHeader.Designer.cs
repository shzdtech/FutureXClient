// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PBWrapMsgHeader {
  
  namespace Generated {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class PBMsgHeader {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgHeader_PBMsgHeader__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgHeader.PBMsgHeader, global::PBWrapMsgHeader.PBMsgHeader.Builder> internal__static_PBWrapMsgHeader_PBMsgHeader__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static PBMsgHeader() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFQQk1zZ0hlYWRlci5wcm90bxIPUEJXcmFwTXNnSGVhZGVyIjgKC1BCTXNn" + 
            "SGVhZGVyEhEKCW1lc3NhZ2VJZBgBIAIoBRIWCg5tZXNzYWdlU2VydmljZRgC" + 
            "IAIoCUIiCg9Qcm90b0J1Zk1lc3NhZ2VCD1BCV3JhcE1zZ0hlYWRlcg==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_PBWrapMsgHeader_PBMsgHeader__Descriptor = Descriptor.MessageTypes[0];
          internal__static_PBWrapMsgHeader_PBMsgHeader__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgHeader.PBMsgHeader, global::PBWrapMsgHeader.PBMsgHeader.Builder>(internal__static_PBWrapMsgHeader_PBMsgHeader__Descriptor,
                  new string[] { "MessageId", "MessageService", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgHeader : pb::GeneratedMessage<PBMsgHeader, PBMsgHeader.Builder> {
    private PBMsgHeader() { }
    private static readonly PBMsgHeader defaultInstance = new PBMsgHeader().MakeReadOnly();
    private static readonly string[] _pBMsgHeaderFieldNames = new string[] { "messageId", "messageService" };
    private static readonly uint[] _pBMsgHeaderFieldTags = new uint[] { 8, 18 };
    public static PBMsgHeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgHeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgHeader.Generated.PBMsgHeader.internal__static_PBWrapMsgHeader_PBMsgHeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgHeader, PBMsgHeader.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgHeader.Generated.PBMsgHeader.internal__static_PBWrapMsgHeader_PBMsgHeader__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgHeaderFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[0], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[1], MessageService);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgHeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgHeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgHeader result;
      
      private PBMsgHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgHeader original = result;
          result = new PBMsgHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgHeader.PBMsgHeader.Descriptor; }
      }
      
      public override PBMsgHeader DefaultInstanceForType {
        get { return global::PBWrapMsgHeader.PBMsgHeader.DefaultInstance; }
      }
      
      public override PBMsgHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgHeader) {
          return MergeFrom((PBMsgHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgHeader other) {
        if (other == global::PBWrapMsgHeader.PBMsgHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgHeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
    }
    static PBMsgHeader() {
      object.ReferenceEquals(global::PBWrapMsgHeader.Generated.PBMsgHeader.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
