// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Micro.Future.Message.Business {
  
  namespace Generated {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Simpletable {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_NamedStringVector__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedStringVector, global::Micro.Future.Message.Business.NamedStringVector.Builder> internal__static_Micro_Future_Message_Business_NamedStringVector__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_NamedIntVector__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedIntVector, global::Micro.Future.Message.Business.NamedIntVector.Builder> internal__static_Micro_Future_Message_Business_NamedIntVector__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_NamedDoubleVector__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedDoubleVector, global::Micro.Future.Message.Business.NamedDoubleVector.Builder> internal__static_Micro_Future_Message_Business_NamedDoubleVector__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_SimpleIntTable__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleIntTable, global::Micro.Future.Message.Business.SimpleIntTable.Builder> internal__static_Micro_Future_Message_Business_SimpleIntTable__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_SimpleStringTable__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleStringTable, global::Micro.Future.Message.Business.SimpleStringTable.Builder> internal__static_Micro_Future_Message_Business_SimpleStringTable__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_SimpleDoubleTable__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleDoubleTable, global::Micro.Future.Message.Business.SimpleDoubleTable.Builder> internal__static_Micro_Future_Message_Business_SimpleDoubleTable__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_ComplexTable__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.ComplexTable, global::Micro.Future.Message.Business.ComplexTable.Builder> internal__static_Micro_Future_Message_Business_ComplexTable__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_StringResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.StringResponse, global::Micro.Future.Message.Business.StringResponse.Builder> internal__static_Micro_Future_Message_Business_StringResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_IntResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.IntResponse, global::Micro.Future.Message.Business.IntResponse.Builder> internal__static_Micro_Future_Message_Business_IntResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_DoubleResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.DoubleResponse, global::Micro.Future.Message.Business.DoubleResponse.Builder> internal__static_Micro_Future_Message_Business_DoubleResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Simpletable() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFzaW1wbGV0YWJsZS5wcm90bxIdTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVz" + 
            "aW5lc3MiMAoRTmFtZWRTdHJpbmdWZWN0b3ISDAoEbmFtZRgBIAIoCRINCgVl" + 
            "bnRyeRgCIAMoCSItCg5OYW1lZEludFZlY3RvchIMCgRuYW1lGAEgAigJEg0K" + 
            "BWVudHJ5GAIgAygFIjAKEU5hbWVkRG91YmxlVmVjdG9yEgwKBG5hbWUYASAC" + 
            "KAkSDQoFZW50cnkYAiADKAEiUAoOU2ltcGxlSW50VGFibGUSPgoHY29sdW1u" + 
            "cxgBIAMoCzItLk1pY3JvLkZ1dHVyZS5NZXNzYWdlLkJ1c2luZXNzLk5hbWVk" + 
            "SW50VmVjdG9yIlYKEVNpbXBsZVN0cmluZ1RhYmxlEkEKB2NvbHVtbnMYASAD" + 
            "KAsyMC5NaWNyby5GdXR1cmUuTWVzc2FnZS5CdXNpbmVzcy5OYW1lZFN0cmlu" + 
            "Z1ZlY3RvciJWChFTaW1wbGVEb3VibGVUYWJsZRJBCgdjb2x1bW5zGAEgAygL" + 
            "MjAuTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVzaW5lc3MuTmFtZWREb3VibGVW" + 
            "ZWN0b3IinQIKDENvbXBsZXhUYWJsZRI/CghpbnRUYWJsZRgBIAEoCzItLk1p" + 
            "Y3JvLkZ1dHVyZS5NZXNzYWdlLkJ1c2luZXNzLlNpbXBsZUludFRhYmxlEkUK" + 
            "C2RvdWJsZVRhYmxlGAIgASgLMjAuTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVz" + 
            "aW5lc3MuU2ltcGxlRG91YmxlVGFibGUSRQoLc3RyaW5nVGFibGUYAyABKAsy" + 
            "MC5NaWNyby5GdXR1cmUuTWVzc2FnZS5CdXNpbmVzcy5TaW1wbGVTdHJpbmdU" + 
            "YWJsZRI+CgluZXN0VGFibGUYBCABKAsyKy5NaWNyby5GdXR1cmUuTWVzc2Fn" + 
            "ZS5CdXNpbmVzcy5Db21wbGV4VGFibGUiLAoOU3RyaW5nUmVzcG9uc2USDQoF" + 
            "VmFsdWUYASACKAkSCwoDRU9GGAIgAigFIikKC0ludFJlc3BvbnNlEg0KBVZh" + 
            "bHVlGAEgAigFEgsKA0VPRhgCIAIoBSIsCg5Eb3VibGVSZXNwb25zZRINCgVW" + 
            "YWx1ZRgBIAIoARILCgNFT0YYAiACKAU=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Micro_Future_Message_Business_NamedStringVector__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Micro_Future_Message_Business_NamedStringVector__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedStringVector, global::Micro.Future.Message.Business.NamedStringVector.Builder>(internal__static_Micro_Future_Message_Business_NamedStringVector__Descriptor,
                  new string[] { "Name", "Entry", });
          internal__static_Micro_Future_Message_Business_NamedIntVector__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Micro_Future_Message_Business_NamedIntVector__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedIntVector, global::Micro.Future.Message.Business.NamedIntVector.Builder>(internal__static_Micro_Future_Message_Business_NamedIntVector__Descriptor,
                  new string[] { "Name", "Entry", });
          internal__static_Micro_Future_Message_Business_NamedDoubleVector__Descriptor = Descriptor.MessageTypes[2];
          internal__static_Micro_Future_Message_Business_NamedDoubleVector__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.NamedDoubleVector, global::Micro.Future.Message.Business.NamedDoubleVector.Builder>(internal__static_Micro_Future_Message_Business_NamedDoubleVector__Descriptor,
                  new string[] { "Name", "Entry", });
          internal__static_Micro_Future_Message_Business_SimpleIntTable__Descriptor = Descriptor.MessageTypes[3];
          internal__static_Micro_Future_Message_Business_SimpleIntTable__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleIntTable, global::Micro.Future.Message.Business.SimpleIntTable.Builder>(internal__static_Micro_Future_Message_Business_SimpleIntTable__Descriptor,
                  new string[] { "Columns", });
          internal__static_Micro_Future_Message_Business_SimpleStringTable__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Micro_Future_Message_Business_SimpleStringTable__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleStringTable, global::Micro.Future.Message.Business.SimpleStringTable.Builder>(internal__static_Micro_Future_Message_Business_SimpleStringTable__Descriptor,
                  new string[] { "Columns", });
          internal__static_Micro_Future_Message_Business_SimpleDoubleTable__Descriptor = Descriptor.MessageTypes[5];
          internal__static_Micro_Future_Message_Business_SimpleDoubleTable__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.SimpleDoubleTable, global::Micro.Future.Message.Business.SimpleDoubleTable.Builder>(internal__static_Micro_Future_Message_Business_SimpleDoubleTable__Descriptor,
                  new string[] { "Columns", });
          internal__static_Micro_Future_Message_Business_ComplexTable__Descriptor = Descriptor.MessageTypes[6];
          internal__static_Micro_Future_Message_Business_ComplexTable__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.ComplexTable, global::Micro.Future.Message.Business.ComplexTable.Builder>(internal__static_Micro_Future_Message_Business_ComplexTable__Descriptor,
                  new string[] { "IntTable", "DoubleTable", "StringTable", "NestTable", });
          internal__static_Micro_Future_Message_Business_StringResponse__Descriptor = Descriptor.MessageTypes[7];
          internal__static_Micro_Future_Message_Business_StringResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.StringResponse, global::Micro.Future.Message.Business.StringResponse.Builder>(internal__static_Micro_Future_Message_Business_StringResponse__Descriptor,
                  new string[] { "Value", "EOF", });
          internal__static_Micro_Future_Message_Business_IntResponse__Descriptor = Descriptor.MessageTypes[8];
          internal__static_Micro_Future_Message_Business_IntResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.IntResponse, global::Micro.Future.Message.Business.IntResponse.Builder>(internal__static_Micro_Future_Message_Business_IntResponse__Descriptor,
                  new string[] { "Value", "EOF", });
          internal__static_Micro_Future_Message_Business_DoubleResponse__Descriptor = Descriptor.MessageTypes[9];
          internal__static_Micro_Future_Message_Business_DoubleResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.DoubleResponse, global::Micro.Future.Message.Business.DoubleResponse.Builder>(internal__static_Micro_Future_Message_Business_DoubleResponse__Descriptor,
                  new string[] { "Value", "EOF", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NamedStringVector : pb::GeneratedMessage<NamedStringVector, NamedStringVector.Builder> {
    private NamedStringVector() { }
    private static readonly NamedStringVector defaultInstance = new NamedStringVector().MakeReadOnly();
    private static readonly string[] _namedStringVectorFieldNames = new string[] { "entry", "name" };
    private static readonly uint[] _namedStringVectorFieldTags = new uint[] { 18, 10 };
    public static NamedStringVector DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NamedStringVector DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NamedStringVector ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedStringVector__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NamedStringVector, NamedStringVector.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedStringVector__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int EntryFieldNumber = 2;
    private pbc::PopsicleList<string> entry_ = new pbc::PopsicleList<string>();
    public scg::IList<string> EntryList {
      get { return pbc::Lists.AsReadOnly(entry_); }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public string GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _namedStringVectorFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (entry_.Count > 0) {
        output.WriteStringArray(2, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        {
          int dataSize = 0;
          foreach (string element in EntryList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * entry_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NamedStringVector ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NamedStringVector ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NamedStringVector ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NamedStringVector ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedStringVector ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NamedStringVector MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NamedStringVector prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NamedStringVector, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NamedStringVector cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NamedStringVector result;
      
      private NamedStringVector PrepareBuilder() {
        if (resultIsReadOnly) {
          NamedStringVector original = result;
          result = new NamedStringVector();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NamedStringVector MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.NamedStringVector.Descriptor; }
      }
      
      public override NamedStringVector DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.NamedStringVector.DefaultInstance; }
      }
      
      public override NamedStringVector BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NamedStringVector) {
          return MergeFrom((NamedStringVector) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NamedStringVector other) {
        if (other == global::Micro.Future.Message.Business.NamedStringVector.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_namedStringVectorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _namedStringVectorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.entry_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public string GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder AddEntry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static NamedStringVector() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NamedIntVector : pb::GeneratedMessage<NamedIntVector, NamedIntVector.Builder> {
    private NamedIntVector() { }
    private static readonly NamedIntVector defaultInstance = new NamedIntVector().MakeReadOnly();
    private static readonly string[] _namedIntVectorFieldNames = new string[] { "entry", "name" };
    private static readonly uint[] _namedIntVectorFieldTags = new uint[] { 16, 10 };
    public static NamedIntVector DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NamedIntVector DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NamedIntVector ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedIntVector__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NamedIntVector, NamedIntVector.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedIntVector__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int EntryFieldNumber = 2;
    private pbc::PopsicleList<int> entry_ = new pbc::PopsicleList<int>();
    public scg::IList<int> EntryList {
      get { return pbc::Lists.AsReadOnly(entry_); }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public int GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _namedIntVectorFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (entry_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        {
          int dataSize = 0;
          foreach (int element in EntryList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * entry_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NamedIntVector ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NamedIntVector ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NamedIntVector ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NamedIntVector ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedIntVector ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NamedIntVector MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NamedIntVector prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NamedIntVector, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NamedIntVector cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NamedIntVector result;
      
      private NamedIntVector PrepareBuilder() {
        if (resultIsReadOnly) {
          NamedIntVector original = result;
          result = new NamedIntVector();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NamedIntVector MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.NamedIntVector.Descriptor; }
      }
      
      public override NamedIntVector DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.NamedIntVector.DefaultInstance; }
      }
      
      public override NamedIntVector BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NamedIntVector) {
          return MergeFrom((NamedIntVector) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NamedIntVector other) {
        if (other == global::Micro.Future.Message.Business.NamedIntVector.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_namedIntVectorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _namedIntVectorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.entry_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public int GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, int value) {
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder AddEntry(int value) {
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static NamedIntVector() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NamedDoubleVector : pb::GeneratedMessage<NamedDoubleVector, NamedDoubleVector.Builder> {
    private NamedDoubleVector() { }
    private static readonly NamedDoubleVector defaultInstance = new NamedDoubleVector().MakeReadOnly();
    private static readonly string[] _namedDoubleVectorFieldNames = new string[] { "entry", "name" };
    private static readonly uint[] _namedDoubleVectorFieldTags = new uint[] { 17, 10 };
    public static NamedDoubleVector DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NamedDoubleVector DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NamedDoubleVector ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedDoubleVector__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NamedDoubleVector, NamedDoubleVector.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_NamedDoubleVector__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int EntryFieldNumber = 2;
    private pbc::PopsicleList<double> entry_ = new pbc::PopsicleList<double>();
    public scg::IList<double> EntryList {
      get { return pbc::Lists.AsReadOnly(entry_); }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public double GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _namedDoubleVectorFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (entry_.Count > 0) {
        output.WriteDoubleArray(2, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        {
          int dataSize = 0;
          dataSize = 8 * entry_.Count;
          size += dataSize;
          size += 1 * entry_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NamedDoubleVector ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NamedDoubleVector ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NamedDoubleVector ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NamedDoubleVector ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NamedDoubleVector MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NamedDoubleVector prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NamedDoubleVector, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NamedDoubleVector cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NamedDoubleVector result;
      
      private NamedDoubleVector PrepareBuilder() {
        if (resultIsReadOnly) {
          NamedDoubleVector original = result;
          result = new NamedDoubleVector();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NamedDoubleVector MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.NamedDoubleVector.Descriptor; }
      }
      
      public override NamedDoubleVector DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.NamedDoubleVector.DefaultInstance; }
      }
      
      public override NamedDoubleVector BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NamedDoubleVector) {
          return MergeFrom((NamedDoubleVector) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NamedDoubleVector other) {
        if (other == global::Micro.Future.Message.Business.NamedDoubleVector.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_namedDoubleVectorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _namedDoubleVectorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18:
            case 17: {
              input.ReadDoubleArray(tag, field_name, result.entry_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<double> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public double GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, double value) {
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder AddEntry(double value) {
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static NamedDoubleVector() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleIntTable : pb::GeneratedMessage<SimpleIntTable, SimpleIntTable.Builder> {
    private SimpleIntTable() { }
    private static readonly SimpleIntTable defaultInstance = new SimpleIntTable().MakeReadOnly();
    private static readonly string[] _simpleIntTableFieldNames = new string[] { "columns" };
    private static readonly uint[] _simpleIntTableFieldTags = new uint[] { 10 };
    public static SimpleIntTable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SimpleIntTable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SimpleIntTable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleIntTable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SimpleIntTable, SimpleIntTable.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleIntTable__FieldAccessorTable; }
    }
    
    public const int ColumnsFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.NamedIntVector> columns_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.NamedIntVector>();
    public scg::IList<global::Micro.Future.Message.Business.NamedIntVector> ColumnsList {
      get { return columns_; }
    }
    public int ColumnsCount {
      get { return columns_.Count; }
    }
    public global::Micro.Future.Message.Business.NamedIntVector GetColumns(int index) {
      return columns_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.NamedIntVector element in ColumnsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _simpleIntTableFieldNames;
      if (columns_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], columns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.NamedIntVector element in ColumnsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SimpleIntTable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SimpleIntTable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SimpleIntTable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleIntTable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SimpleIntTable MakeReadOnly() {
      columns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SimpleIntTable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SimpleIntTable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SimpleIntTable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SimpleIntTable result;
      
      private SimpleIntTable PrepareBuilder() {
        if (resultIsReadOnly) {
          SimpleIntTable original = result;
          result = new SimpleIntTable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SimpleIntTable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.SimpleIntTable.Descriptor; }
      }
      
      public override SimpleIntTable DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.SimpleIntTable.DefaultInstance; }
      }
      
      public override SimpleIntTable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SimpleIntTable) {
          return MergeFrom((SimpleIntTable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SimpleIntTable other) {
        if (other == global::Micro.Future.Message.Business.SimpleIntTable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.columns_.Count != 0) {
          result.columns_.Add(other.columns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_simpleIntTableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _simpleIntTableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.columns_, global::Micro.Future.Message.Business.NamedIntVector.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.NamedIntVector> ColumnsList {
        get { return PrepareBuilder().columns_; }
      }
      public int ColumnsCount {
        get { return result.ColumnsCount; }
      }
      public global::Micro.Future.Message.Business.NamedIntVector GetColumns(int index) {
        return result.GetColumns(index);
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedIntVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_[index] = value;
        return this;
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedIntVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedIntVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_.Add(value);
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedIntVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeColumns(scg::IEnumerable<global::Micro.Future.Message.Business.NamedIntVector> values) {
        PrepareBuilder();
        result.columns_.Add(values);
        return this;
      }
      public Builder ClearColumns() {
        PrepareBuilder();
        result.columns_.Clear();
        return this;
      }
    }
    static SimpleIntTable() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleStringTable : pb::GeneratedMessage<SimpleStringTable, SimpleStringTable.Builder> {
    private SimpleStringTable() { }
    private static readonly SimpleStringTable defaultInstance = new SimpleStringTable().MakeReadOnly();
    private static readonly string[] _simpleStringTableFieldNames = new string[] { "columns" };
    private static readonly uint[] _simpleStringTableFieldTags = new uint[] { 10 };
    public static SimpleStringTable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SimpleStringTable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SimpleStringTable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleStringTable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SimpleStringTable, SimpleStringTable.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleStringTable__FieldAccessorTable; }
    }
    
    public const int ColumnsFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.NamedStringVector> columns_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.NamedStringVector>();
    public scg::IList<global::Micro.Future.Message.Business.NamedStringVector> ColumnsList {
      get { return columns_; }
    }
    public int ColumnsCount {
      get { return columns_.Count; }
    }
    public global::Micro.Future.Message.Business.NamedStringVector GetColumns(int index) {
      return columns_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.NamedStringVector element in ColumnsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _simpleStringTableFieldNames;
      if (columns_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], columns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.NamedStringVector element in ColumnsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SimpleStringTable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SimpleStringTable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SimpleStringTable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleStringTable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SimpleStringTable MakeReadOnly() {
      columns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SimpleStringTable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SimpleStringTable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SimpleStringTable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SimpleStringTable result;
      
      private SimpleStringTable PrepareBuilder() {
        if (resultIsReadOnly) {
          SimpleStringTable original = result;
          result = new SimpleStringTable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SimpleStringTable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.SimpleStringTable.Descriptor; }
      }
      
      public override SimpleStringTable DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.SimpleStringTable.DefaultInstance; }
      }
      
      public override SimpleStringTable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SimpleStringTable) {
          return MergeFrom((SimpleStringTable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SimpleStringTable other) {
        if (other == global::Micro.Future.Message.Business.SimpleStringTable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.columns_.Count != 0) {
          result.columns_.Add(other.columns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_simpleStringTableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _simpleStringTableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.columns_, global::Micro.Future.Message.Business.NamedStringVector.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.NamedStringVector> ColumnsList {
        get { return PrepareBuilder().columns_; }
      }
      public int ColumnsCount {
        get { return result.ColumnsCount; }
      }
      public global::Micro.Future.Message.Business.NamedStringVector GetColumns(int index) {
        return result.GetColumns(index);
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedStringVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_[index] = value;
        return this;
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedStringVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedStringVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_.Add(value);
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedStringVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeColumns(scg::IEnumerable<global::Micro.Future.Message.Business.NamedStringVector> values) {
        PrepareBuilder();
        result.columns_.Add(values);
        return this;
      }
      public Builder ClearColumns() {
        PrepareBuilder();
        result.columns_.Clear();
        return this;
      }
    }
    static SimpleStringTable() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleDoubleTable : pb::GeneratedMessage<SimpleDoubleTable, SimpleDoubleTable.Builder> {
    private SimpleDoubleTable() { }
    private static readonly SimpleDoubleTable defaultInstance = new SimpleDoubleTable().MakeReadOnly();
    private static readonly string[] _simpleDoubleTableFieldNames = new string[] { "columns" };
    private static readonly uint[] _simpleDoubleTableFieldTags = new uint[] { 10 };
    public static SimpleDoubleTable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SimpleDoubleTable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SimpleDoubleTable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleDoubleTable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SimpleDoubleTable, SimpleDoubleTable.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_SimpleDoubleTable__FieldAccessorTable; }
    }
    
    public const int ColumnsFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.NamedDoubleVector> columns_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.NamedDoubleVector>();
    public scg::IList<global::Micro.Future.Message.Business.NamedDoubleVector> ColumnsList {
      get { return columns_; }
    }
    public int ColumnsCount {
      get { return columns_.Count; }
    }
    public global::Micro.Future.Message.Business.NamedDoubleVector GetColumns(int index) {
      return columns_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.NamedDoubleVector element in ColumnsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _simpleDoubleTableFieldNames;
      if (columns_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], columns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.NamedDoubleVector element in ColumnsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SimpleDoubleTable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SimpleDoubleTable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SimpleDoubleTable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SimpleDoubleTable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SimpleDoubleTable MakeReadOnly() {
      columns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SimpleDoubleTable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SimpleDoubleTable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SimpleDoubleTable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SimpleDoubleTable result;
      
      private SimpleDoubleTable PrepareBuilder() {
        if (resultIsReadOnly) {
          SimpleDoubleTable original = result;
          result = new SimpleDoubleTable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SimpleDoubleTable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.SimpleDoubleTable.Descriptor; }
      }
      
      public override SimpleDoubleTable DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.SimpleDoubleTable.DefaultInstance; }
      }
      
      public override SimpleDoubleTable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SimpleDoubleTable) {
          return MergeFrom((SimpleDoubleTable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SimpleDoubleTable other) {
        if (other == global::Micro.Future.Message.Business.SimpleDoubleTable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.columns_.Count != 0) {
          result.columns_.Add(other.columns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_simpleDoubleTableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _simpleDoubleTableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.columns_, global::Micro.Future.Message.Business.NamedDoubleVector.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.NamedDoubleVector> ColumnsList {
        get { return PrepareBuilder().columns_; }
      }
      public int ColumnsCount {
        get { return result.ColumnsCount; }
      }
      public global::Micro.Future.Message.Business.NamedDoubleVector GetColumns(int index) {
        return result.GetColumns(index);
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedDoubleVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_[index] = value;
        return this;
      }
      public Builder SetColumns(int index, global::Micro.Future.Message.Business.NamedDoubleVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedDoubleVector value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_.Add(value);
        return this;
      }
      public Builder AddColumns(global::Micro.Future.Message.Business.NamedDoubleVector.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.columns_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeColumns(scg::IEnumerable<global::Micro.Future.Message.Business.NamedDoubleVector> values) {
        PrepareBuilder();
        result.columns_.Add(values);
        return this;
      }
      public Builder ClearColumns() {
        PrepareBuilder();
        result.columns_.Clear();
        return this;
      }
    }
    static SimpleDoubleTable() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ComplexTable : pb::GeneratedMessage<ComplexTable, ComplexTable.Builder> {
    private ComplexTable() { }
    private static readonly ComplexTable defaultInstance = new ComplexTable().MakeReadOnly();
    private static readonly string[] _complexTableFieldNames = new string[] { "doubleTable", "intTable", "nestTable", "stringTable" };
    private static readonly uint[] _complexTableFieldTags = new uint[] { 18, 10, 34, 26 };
    public static ComplexTable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ComplexTable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ComplexTable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_ComplexTable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ComplexTable, ComplexTable.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_ComplexTable__FieldAccessorTable; }
    }
    
    public const int IntTableFieldNumber = 1;
    private bool hasIntTable;
    private global::Micro.Future.Message.Business.SimpleIntTable intTable_;
    public bool HasIntTable {
      get { return hasIntTable; }
    }
    public global::Micro.Future.Message.Business.SimpleIntTable IntTable {
      get { return intTable_ ?? global::Micro.Future.Message.Business.SimpleIntTable.DefaultInstance; }
    }
    
    public const int DoubleTableFieldNumber = 2;
    private bool hasDoubleTable;
    private global::Micro.Future.Message.Business.SimpleDoubleTable doubleTable_;
    public bool HasDoubleTable {
      get { return hasDoubleTable; }
    }
    public global::Micro.Future.Message.Business.SimpleDoubleTable DoubleTable {
      get { return doubleTable_ ?? global::Micro.Future.Message.Business.SimpleDoubleTable.DefaultInstance; }
    }
    
    public const int StringTableFieldNumber = 3;
    private bool hasStringTable;
    private global::Micro.Future.Message.Business.SimpleStringTable stringTable_;
    public bool HasStringTable {
      get { return hasStringTable; }
    }
    public global::Micro.Future.Message.Business.SimpleStringTable StringTable {
      get { return stringTable_ ?? global::Micro.Future.Message.Business.SimpleStringTable.DefaultInstance; }
    }
    
    public const int NestTableFieldNumber = 4;
    private bool hasNestTable;
    private global::Micro.Future.Message.Business.ComplexTable nestTable_;
    public bool HasNestTable {
      get { return hasNestTable; }
    }
    public global::Micro.Future.Message.Business.ComplexTable NestTable {
      get { return nestTable_ ?? global::Micro.Future.Message.Business.ComplexTable.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIntTable) {
          if (!IntTable.IsInitialized) return false;
        }
        if (HasDoubleTable) {
          if (!DoubleTable.IsInitialized) return false;
        }
        if (HasStringTable) {
          if (!StringTable.IsInitialized) return false;
        }
        if (HasNestTable) {
          if (!NestTable.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _complexTableFieldNames;
      if (hasIntTable) {
        output.WriteMessage(1, field_names[1], IntTable);
      }
      if (hasDoubleTable) {
        output.WriteMessage(2, field_names[0], DoubleTable);
      }
      if (hasStringTable) {
        output.WriteMessage(3, field_names[3], StringTable);
      }
      if (hasNestTable) {
        output.WriteMessage(4, field_names[2], NestTable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIntTable) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, IntTable);
        }
        if (hasDoubleTable) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, DoubleTable);
        }
        if (hasStringTable) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, StringTable);
        }
        if (hasNestTable) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, NestTable);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ComplexTable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ComplexTable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ComplexTable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ComplexTable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ComplexTable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ComplexTable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ComplexTable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ComplexTable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ComplexTable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ComplexTable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ComplexTable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ComplexTable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ComplexTable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ComplexTable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ComplexTable result;
      
      private ComplexTable PrepareBuilder() {
        if (resultIsReadOnly) {
          ComplexTable original = result;
          result = new ComplexTable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ComplexTable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.ComplexTable.Descriptor; }
      }
      
      public override ComplexTable DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.ComplexTable.DefaultInstance; }
      }
      
      public override ComplexTable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ComplexTable) {
          return MergeFrom((ComplexTable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ComplexTable other) {
        if (other == global::Micro.Future.Message.Business.ComplexTable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIntTable) {
          MergeIntTable(other.IntTable);
        }
        if (other.HasDoubleTable) {
          MergeDoubleTable(other.DoubleTable);
        }
        if (other.HasStringTable) {
          MergeStringTable(other.StringTable);
        }
        if (other.HasNestTable) {
          MergeNestTable(other.NestTable);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_complexTableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _complexTableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Micro.Future.Message.Business.SimpleIntTable.Builder subBuilder = global::Micro.Future.Message.Business.SimpleIntTable.CreateBuilder();
              if (result.hasIntTable) {
                subBuilder.MergeFrom(IntTable);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              IntTable = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Micro.Future.Message.Business.SimpleDoubleTable.Builder subBuilder = global::Micro.Future.Message.Business.SimpleDoubleTable.CreateBuilder();
              if (result.hasDoubleTable) {
                subBuilder.MergeFrom(DoubleTable);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DoubleTable = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Micro.Future.Message.Business.SimpleStringTable.Builder subBuilder = global::Micro.Future.Message.Business.SimpleStringTable.CreateBuilder();
              if (result.hasStringTable) {
                subBuilder.MergeFrom(StringTable);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StringTable = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Micro.Future.Message.Business.ComplexTable.Builder subBuilder = global::Micro.Future.Message.Business.ComplexTable.CreateBuilder();
              if (result.hasNestTable) {
                subBuilder.MergeFrom(NestTable);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NestTable = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIntTable {
       get { return result.hasIntTable; }
      }
      public global::Micro.Future.Message.Business.SimpleIntTable IntTable {
        get { return result.IntTable; }
        set { SetIntTable(value); }
      }
      public Builder SetIntTable(global::Micro.Future.Message.Business.SimpleIntTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIntTable = true;
        result.intTable_ = value;
        return this;
      }
      public Builder SetIntTable(global::Micro.Future.Message.Business.SimpleIntTable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIntTable = true;
        result.intTable_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIntTable(global::Micro.Future.Message.Business.SimpleIntTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIntTable &&
            result.intTable_ != global::Micro.Future.Message.Business.SimpleIntTable.DefaultInstance) {
            result.intTable_ = global::Micro.Future.Message.Business.SimpleIntTable.CreateBuilder(result.intTable_).MergeFrom(value).BuildPartial();
        } else {
          result.intTable_ = value;
        }
        result.hasIntTable = true;
        return this;
      }
      public Builder ClearIntTable() {
        PrepareBuilder();
        result.hasIntTable = false;
        result.intTable_ = null;
        return this;
      }
      
      public bool HasDoubleTable {
       get { return result.hasDoubleTable; }
      }
      public global::Micro.Future.Message.Business.SimpleDoubleTable DoubleTable {
        get { return result.DoubleTable; }
        set { SetDoubleTable(value); }
      }
      public Builder SetDoubleTable(global::Micro.Future.Message.Business.SimpleDoubleTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDoubleTable = true;
        result.doubleTable_ = value;
        return this;
      }
      public Builder SetDoubleTable(global::Micro.Future.Message.Business.SimpleDoubleTable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDoubleTable = true;
        result.doubleTable_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDoubleTable(global::Micro.Future.Message.Business.SimpleDoubleTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDoubleTable &&
            result.doubleTable_ != global::Micro.Future.Message.Business.SimpleDoubleTable.DefaultInstance) {
            result.doubleTable_ = global::Micro.Future.Message.Business.SimpleDoubleTable.CreateBuilder(result.doubleTable_).MergeFrom(value).BuildPartial();
        } else {
          result.doubleTable_ = value;
        }
        result.hasDoubleTable = true;
        return this;
      }
      public Builder ClearDoubleTable() {
        PrepareBuilder();
        result.hasDoubleTable = false;
        result.doubleTable_ = null;
        return this;
      }
      
      public bool HasStringTable {
       get { return result.hasStringTable; }
      }
      public global::Micro.Future.Message.Business.SimpleStringTable StringTable {
        get { return result.StringTable; }
        set { SetStringTable(value); }
      }
      public Builder SetStringTable(global::Micro.Future.Message.Business.SimpleStringTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStringTable = true;
        result.stringTable_ = value;
        return this;
      }
      public Builder SetStringTable(global::Micro.Future.Message.Business.SimpleStringTable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStringTable = true;
        result.stringTable_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStringTable(global::Micro.Future.Message.Business.SimpleStringTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStringTable &&
            result.stringTable_ != global::Micro.Future.Message.Business.SimpleStringTable.DefaultInstance) {
            result.stringTable_ = global::Micro.Future.Message.Business.SimpleStringTable.CreateBuilder(result.stringTable_).MergeFrom(value).BuildPartial();
        } else {
          result.stringTable_ = value;
        }
        result.hasStringTable = true;
        return this;
      }
      public Builder ClearStringTable() {
        PrepareBuilder();
        result.hasStringTable = false;
        result.stringTable_ = null;
        return this;
      }
      
      public bool HasNestTable {
       get { return result.hasNestTable; }
      }
      public global::Micro.Future.Message.Business.ComplexTable NestTable {
        get { return result.NestTable; }
        set { SetNestTable(value); }
      }
      public Builder SetNestTable(global::Micro.Future.Message.Business.ComplexTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNestTable = true;
        result.nestTable_ = value;
        return this;
      }
      public Builder SetNestTable(global::Micro.Future.Message.Business.ComplexTable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNestTable = true;
        result.nestTable_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNestTable(global::Micro.Future.Message.Business.ComplexTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNestTable &&
            result.nestTable_ != global::Micro.Future.Message.Business.ComplexTable.DefaultInstance) {
            result.nestTable_ = global::Micro.Future.Message.Business.ComplexTable.CreateBuilder(result.nestTable_).MergeFrom(value).BuildPartial();
        } else {
          result.nestTable_ = value;
        }
        result.hasNestTable = true;
        return this;
      }
      public Builder ClearNestTable() {
        PrepareBuilder();
        result.hasNestTable = false;
        result.nestTable_ = null;
        return this;
      }
    }
    static ComplexTable() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StringResponse : pb::GeneratedMessage<StringResponse, StringResponse.Builder> {
    private StringResponse() { }
    private static readonly StringResponse defaultInstance = new StringResponse().MakeReadOnly();
    private static readonly string[] _stringResponseFieldNames = new string[] { "EOF", "Value" };
    private static readonly uint[] _stringResponseFieldTags = new uint[] { 16, 10 };
    public static StringResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StringResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StringResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_StringResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StringResponse, StringResponse.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_StringResponse__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public const int EOFFieldNumber = 2;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasValue) return false;
        if (!hasEOF) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stringResponseFieldNames;
      if (hasValue) {
        output.WriteString(1, field_names[1], Value);
      }
      if (hasEOF) {
        output.WriteInt32(2, field_names[0], EOF);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Value);
        }
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, EOF);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StringResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StringResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StringResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StringResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StringResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StringResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StringResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StringResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StringResponse result;
      
      private StringResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          StringResponse original = result;
          result = new StringResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StringResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.StringResponse.Descriptor; }
      }
      
      public override StringResponse DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.StringResponse.DefaultInstance; }
      }
      
      public override StringResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StringResponse) {
          return MergeFrom((StringResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StringResponse other) {
        if (other == global::Micro.Future.Message.Business.StringResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stringResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stringResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 16: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
    }
    static StringResponse() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IntResponse : pb::GeneratedMessage<IntResponse, IntResponse.Builder> {
    private IntResponse() { }
    private static readonly IntResponse defaultInstance = new IntResponse().MakeReadOnly();
    private static readonly string[] _intResponseFieldNames = new string[] { "EOF", "Value" };
    private static readonly uint[] _intResponseFieldTags = new uint[] { 16, 8 };
    public static IntResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IntResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IntResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_IntResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IntResponse, IntResponse.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_IntResponse__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public const int EOFFieldNumber = 2;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasValue) return false;
        if (!hasEOF) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _intResponseFieldNames;
      if (hasValue) {
        output.WriteInt32(1, field_names[1], Value);
      }
      if (hasEOF) {
        output.WriteInt32(2, field_names[0], EOF);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Value);
        }
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, EOF);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static IntResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IntResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IntResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IntResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IntResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IntResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IntResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IntResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IntResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IntResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IntResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IntResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IntResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IntResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IntResponse result;
      
      private IntResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          IntResponse original = result;
          result = new IntResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IntResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.IntResponse.Descriptor; }
      }
      
      public override IntResponse DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.IntResponse.DefaultInstance; }
      }
      
      public override IntResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IntResponse) {
          return MergeFrom((IntResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IntResponse other) {
        if (other == global::Micro.Future.Message.Business.IntResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_intResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _intResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
            case 16: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
    }
    static IntResponse() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DoubleResponse : pb::GeneratedMessage<DoubleResponse, DoubleResponse.Builder> {
    private DoubleResponse() { }
    private static readonly DoubleResponse defaultInstance = new DoubleResponse().MakeReadOnly();
    private static readonly string[] _doubleResponseFieldNames = new string[] { "EOF", "Value" };
    private static readonly uint[] _doubleResponseFieldTags = new uint[] { 16, 9 };
    public static DoubleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DoubleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DoubleResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_DoubleResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DoubleResponse, DoubleResponse.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Simpletable.internal__static_Micro_Future_Message_Business_DoubleResponse__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private bool hasValue;
    private double value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public double Value {
      get { return value_; }
    }
    
    public const int EOFFieldNumber = 2;
    private bool hasEOF;
    private int eOF_;
    public bool HasEOF {
      get { return hasEOF; }
    }
    public int EOF {
      get { return eOF_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasValue) return false;
        if (!hasEOF) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _doubleResponseFieldNames;
      if (hasValue) {
        output.WriteDouble(1, field_names[1], Value);
      }
      if (hasEOF) {
        output.WriteInt32(2, field_names[0], EOF);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Value);
        }
        if (hasEOF) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, EOF);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DoubleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DoubleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DoubleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DoubleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DoubleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DoubleResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DoubleResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DoubleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DoubleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DoubleResponse result;
      
      private DoubleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DoubleResponse original = result;
          result = new DoubleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DoubleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.DoubleResponse.Descriptor; }
      }
      
      public override DoubleResponse DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.DoubleResponse.DefaultInstance; }
      }
      
      public override DoubleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DoubleResponse) {
          return MergeFrom((DoubleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DoubleResponse other) {
        if (other == global::Micro.Future.Message.Business.DoubleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasEOF) {
          EOF = other.EOF;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_doubleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _doubleResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasValue = input.ReadDouble(ref result.value_);
              break;
            }
            case 16: {
              result.hasEOF = input.ReadInt32(ref result.eOF_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public double Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(double value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0D;
        return this;
      }
      
      public bool HasEOF {
        get { return result.hasEOF; }
      }
      public int EOF {
        get { return result.EOF; }
        set { SetEOF(value); }
      }
      public Builder SetEOF(int value) {
        PrepareBuilder();
        result.hasEOF = true;
        result.eOF_ = value;
        return this;
      }
      public Builder ClearEOF() {
        PrepareBuilder();
        result.hasEOF = false;
        result.eOF_ = 0;
        return this;
      }
    }
    static DoubleResponse() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Simpletable.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
