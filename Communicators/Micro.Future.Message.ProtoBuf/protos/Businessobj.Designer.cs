// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Micro.Future.Message.Business {
  
  namespace Generated {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Businessobj {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBUserInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBUserInfo, global::Micro.Future.Message.Business.PBUserInfo.Builder> internal__static_Micro_Future_Message_Business_PBUserInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBUserInfoList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBUserInfoList, global::Micro.Future.Message.Business.PBUserInfoList.Builder> internal__static_Micro_Future_Message_Business_PBUserInfoList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBParam__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBParam, global::Micro.Future.Message.Business.PBParam.Builder> internal__static_Micro_Future_Message_Business_PBParam__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBMarketData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBMarketData, global::Micro.Future.Message.Business.PBMarketData.Builder> internal__static_Micro_Future_Message_Business_PBMarketData__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBMarketDataList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBMarketDataList, global::Micro.Future.Message.Business.PBMarketDataList.Builder> internal__static_Micro_Future_Message_Business_PBMarketDataList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBPricingData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPricingData, global::Micro.Future.Message.Business.PBPricingData.Builder> internal__static_Micro_Future_Message_Business_PBPricingData__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBPricingDataList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPricingDataList, global::Micro.Future.Message.Business.PBPricingDataList.Builder> internal__static_Micro_Future_Message_Business_PBPricingDataList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBStrategyWeight__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategyWeight, global::Micro.Future.Message.Business.PBStrategyWeight.Builder> internal__static_Micro_Future_Message_Business_PBStrategyWeight__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBStrategy__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategy, global::Micro.Future.Message.Business.PBStrategy.Builder> internal__static_Micro_Future_Message_Business_PBStrategy__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBStrategyList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategyList, global::Micro.Future.Message.Business.PBStrategyList.Builder> internal__static_Micro_Future_Message_Business_PBStrategyList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBContractParam__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBContractParam, global::Micro.Future.Message.Business.PBContractParam.Builder> internal__static_Micro_Future_Message_Business_PBContractParam__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBContractParamList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBContractParamList, global::Micro.Future.Message.Business.PBContractParamList.Builder> internal__static_Micro_Future_Message_Business_PBContractParamList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBOTCUserParam__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOTCUserParam, global::Micro.Future.Message.Business.PBOTCUserParam.Builder> internal__static_Micro_Future_Message_Business_PBOTCUserParam__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBOTCUserParamList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOTCUserParamList, global::Micro.Future.Message.Business.PBOTCUserParamList.Builder> internal__static_Micro_Future_Message_Business_PBOTCUserParamList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBOrderInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOrderInfo, global::Micro.Future.Message.Business.PBOrderInfo.Builder> internal__static_Micro_Future_Message_Business_PBOrderInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBTradeNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBTradeNotification, global::Micro.Future.Message.Business.PBTradeNotification.Builder> internal__static_Micro_Future_Message_Business_PBTradeNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBPosition__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPosition, global::Micro.Future.Message.Business.PBPosition.Builder> internal__static_Micro_Future_Message_Business_PBPosition__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Micro_Future_Message_Business_PBAccountInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBAccountInfo, global::Micro.Future.Message.Business.PBAccountInfo.Builder> internal__static_Micro_Future_Message_Business_PBAccountInfo__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Businessobj() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFidXNpbmVzc29iai5wcm90bxIdTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVz" + 
            "aW5lc3MipAEKClBCVXNlckluZm8SDgoGdXNlcklkGAEgAigJEhAKCHBhc3N3" + 
            "b3JkGAIgASgJEhAKCGJyb2tlcklkGAMgASgJEgwKBG5hbWUYBCABKAkSDwoH" + 
            "Y29tcGFueRgFIAEoCRINCgVlbWFpbBgGIAEoCRISCgpjb250YWN0TnVtGAcg" + 
            "ASgJEgwKBHJvbGUYCCABKAUSEgoKcGVybWlzc2lvbhgJIAEoBSJNCg5QQlVz" + 
            "ZXJJbmZvTGlzdBI7Cgh1c2VySW5mbxgBIAMoCzIpLk1pY3JvLkZ1dHVyZS5N" + 
            "ZXNzYWdlLkJ1c2luZXNzLlBCVXNlckluZm8iJgoHUEJQYXJhbRIMCgRuYW1l" + 
            "GAEgAigJEg0KBXZhbHVlGAIgAigBIucCCgxQQk1hcmtldERhdGESDgoGc3lt" + 
            "Ym9sGAEgAigJEhEKCXRpbWVTdGFtcBgCIAEoCRIVCg1wcmVDbG9zZVZhbHVl" + 
            "GAMgASgBEhEKCW9wZW5WYWx1ZRgEIAEoARIQCgh0dXJub3ZlchgFIAEoARIO" + 
            "CgZ2b2x1bWUYBiABKAUSEQoJaGlnaFZhbHVlGAcgASgBEhAKCGxvd1ZhbHVl" + 
            "GAggASgBEhIKCm1hdGNoUHJpY2UYCSABKAESEAoIYXNrUHJpY2UYCiADKAES" + 
            "EQoJYXNrVm9sdW1lGAsgAygFEhAKCGJpZFByaWNlGAwgAygBEhEKCWJpZFZv" + 
            "bHVtZRgNIAMoBRIWCg5wcmVTZXR0bGVQcmljZRgOIAEoARITCgtwcmljZUNo" + 
            "YW5nZRgPIAEoARITCgtzZXR0bGVQcmljZRgQIAEoARIRCgloaWdoTGltaXQY" + 
            "ESABKAUSEAoIbG93TGltaXQYEiABKAUiTwoQUEJNYXJrZXREYXRhTGlzdBI7" + 
            "CgZtZExpc3QYASADKAsyKy5NaWNyby5GdXR1cmUuTWVzc2FnZS5CdXNpbmVz" + 
            "cy5QQk1hcmtldERhdGEiVwoNUEJQcmljaW5nRGF0YRIQCghleGNoYW5nZRgB" + 
            "IAIoCRIQCghjb250cmFjdBgCIAIoCRIQCghhc2tQcmljZRgDIAIoARIQCghi" + 
            "aWRQcmljZRgEIAIoASJSChFQQlByaWNpbmdEYXRhTGlzdBI9CgdwcmljaW5n" + 
            "GAEgAygLMiwuTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVzaW5lc3MuUEJQcmlj" + 
            "aW5nRGF0YSJGChBQQlN0cmF0ZWd5V2VpZ2h0EhAKCGV4Y2hhbmdlGAMgAigJ" + 
            "EhAKCGNvbnRyYWN0GAQgAigJEg4KBndlaWdodBgGIAIoAiLSAgoKUEJTdHJh" + 
            "dGVneRIQCghleGNoYW5nZRgBIAIoCRIQCghjb250cmFjdBgCIAIoCRISCgp1" + 
            "bmRlcmx5aW5nGAMgASgJEg4KBnN5bWJvbBgEIAEoCRITCgtkZXNjcmlwdGlv" + 
            "bhgFIAEoCRIUCgxhbGxvd1RyYWRpbmcYBiABKAgSEAoIcXVhbnRpdHkYByAB" + 
            "KAUSDQoFZGVwdGgYCCABKAUSDgoGc3ByZWFkGAkgASgCEg4KBm9mZnNldBgK" + 
            "IAEoAhIPCgdlbmFibGVkGAsgASgIEkcKDndlaWdodENvbnRyYWN0GAwgAygL" + 
            "Mi8uTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVzaW5lc3MuUEJTdHJhdGVneVdl" + 
            "aWdodBI2CgZwYXJhbXMYDSADKAsyJi5NaWNyby5GdXR1cmUuTWVzc2FnZS5C" + 
            "dXNpbmVzcy5QQlBhcmFtIk0KDlBCU3RyYXRlZ3lMaXN0EjsKCHN0cmF0ZWd5" + 
            "GAEgAygLMikuTWljcm8uRnV0dXJlLk1lc3NhZ2UuQnVzaW5lc3MuUEJTdHJh" + 
            "dGVneSJWCg9QQkNvbnRyYWN0UGFyYW0SEAoIZXhjaGFuZ2UYASACKAkSEAoI" + 
            "Y29udHJhY3QYAiACKAkSEAoIZGVwdGhWb2wYAyABKAUSDQoFZ2FtbWEYBCAB" + 
            "KAIiVQoTUEJDb250cmFjdFBhcmFtTGlzdBI+CgZwYXJhbXMYASADKAsyLi5N" + 
            "aWNyby5GdXR1cmUuTWVzc2FnZS5CdXNpbmVzcy5QQkNvbnRyYWN0UGFyYW0i" + 
            "RgoOUEJPVENVc2VyUGFyYW0SEAoIZXhjaGFuZ2UYASACKAkSEAoIY29udHJh" + 
            "Y3QYAiACKAkSEAoIcXVhbnRpdHkYAyACKAIiUwoSUEJPVENVc2VyUGFyYW1M" + 
            "aXN0Ej0KBnBhcmFtcxgBIAMoCzItLk1pY3JvLkZ1dHVyZS5NZXNzYWdlLkJ1" + 
            "c2luZXNzLlBCT1RDVXNlclBhcmFtItoDCgtQQk9yZGVySW5mbxIPCgdvcmRl" + 
            "cklEGAEgASgEEhIKCm9yZGVyU3lzSUQYAiABKAQSEAoIYnJva2VySUQYAyAB" + 
            "KAkSEgoKaW52ZXN0b3JJRBgEIAEoCRIQCghleGNoYW5nZRgFIAEoCRIQCghj" + 
            "b250cmFjdBgGIAEoCRIQCghleGVjVHlwZRgHIAEoBRILCgN0aWYYCCABKAUS" + 
            "EwoLdHJhZGluZ1R5cGUYCSABKAUSEQoJZGlyZWN0aW9uGAogASgFEhIKCmxp" + 
            "bWl0UHJpY2UYCyABKAESEQoJc3RvcFByaWNlGAwgASgBEhMKC29yZGVyU3Rh" + 
            "dHVzGA0gASgFEhEKCW9yZGVyVHlwZRgOIAEoBRIOCgZ2b2x1bWUYDyABKAUS" + 
            "EgoKaW5zZXJ0VGltZRgRIAEoCRISCgp1cGRhdGVUaW1lGBIgASgJEhIKCmNh" + 
            "bmNlbFRpbWUYEyABKAkSFAoMdm9sdW1lVHJhZGVkGBQgASgFEhQKDHZvbHVt" + 
            "ZVJlbWFpbhgVIAEoBRIXCg92b2x1bWVDb25kaXRpb24YFiABKAUSEgoKdHJh" + 
            "ZGluZ0RheRgXIAEoBRIOCgZhY3RpdmUYGCABKAgSEQoJb3BlbmNsb3NlGBkg" + 
            "ASgFIpACChNQQlRyYWRlTm90aWZpY2F0aW9uEg8KB29yZGVySUQYASACKAQS" + 
            "EAoIYnJva2VySUQYAiABKAkSEgoKaW52ZXN0b3JJRBgDIAEoCRIQCghleGNo" + 
            "YW5nZRgEIAEoCRIQCghjb250cmFjdBgFIAEoCRIOCgZ1c2VySUQYBiABKAkS" + 
            "DwoHdHJhZGVJRBgHIAEoBBIRCglkaXJlY3Rpb24YCCABKAUSEgoKb3JkZXJT" + 
            "eXNJRBgJIAIoBBINCgVwcmljZRgKIAIoARIOCgZ2b2x1bWUYCyACKAUSEQoJ" + 
            "dHJhZGVEYXRlGAwgASgJEhEKCXRyYWRlVGltZRgNIAEoCRIRCgl0cmFkZVR5" + 
            "cGUYDiABKAUivAIKClBCUG9zaXRpb24SEAoIZXhjaGFuZ2UYASACKAkSEAoI" + 
            "Y29udHJhY3QYAiACKAkSEQoJZGlyZWN0aW9uGAMgAigFEhAKCHBvc2l0aW9u" + 
            "GAUgAigFEhIKCnlkUG9zaXRpb24YBCABKAUSFAoMcG9zaXRpb25EYXRlGAYg" + 
            "ASgJEhIKCm9wZW5Wb2x1bWUYByABKAUSEwoLY2xvc2VWb2x1bWUYCCABKAUS" + 
            "EgoKb3BlbkFtb3VudBgJIAEoARITCgtjbG9zZUFtb3VudBgKIAEoARIMCgRj" + 
            "b3N0GAsgASgBEhAKCG9wZW5Db3N0GAwgASgBEg4KBnByb2ZpdBgNIAEoARIT" + 
            "CgtjbG9zZVByb2ZpdBgOIAEoARIRCgl1c2VNYXJnaW4YDyABKAESEQoJaGVk" + 
            "Z2VGbGFnGBAgASgFIosFCg1QQkFjY291bnRJbmZvEhAKCEJyb2tlcklEGAIg" + 
            "ASgJEhEKCUFjY291bnRJRBgDIAEoCRITCgtQcmVNb3J0Z2FnZRgEIAEoARIR" + 
            "CglQcmVDcmVkaXQYBSABKAESEgoKUHJlRGVwb3NpdBgGIAEoARISCgpQcmVC" + 
            "YWxhbmNlGAcgASgBEhEKCVByZU1hcmdpbhgIIAEoARIUCgxJbnRlcmVzdEJh" + 
            "c2UYCSABKAESEAoISW50ZXJlc3QYCiABKAESDwoHRGVwb3NpdBgLIAEoARIQ" + 
            "CghXaXRoZHJhdxgMIAEoARIUCgxGcm96ZW5NYXJnaW4YDSABKAESEgoKRnJv" + 
            "emVuQ2FzaBgOIAEoARIYChBGcm96ZW5Db21taXNzaW9uGA8gASgBEhIKCkN1" + 
            "cnJNYXJnaW4YECABKAESDgoGQ2FzaEluGBEgASgBEhIKCkNvbW1pc3Npb24Y" + 
            "EiABKAESEwoLQ2xvc2VQcm9maXQYEyABKAESFgoOUG9zaXRpb25Qcm9maXQY" + 
            "FCABKAESDwoHQmFsYW5jZRgVIAEoARIRCglBdmFpbGFibGUYFiABKAESFQoN" + 
            "V2l0aGRyYXdRdW90YRgXIAEoARIPCgdSZXNlcnZlGBggASgBEhIKClRyYWRp" + 
            "bmdEYXkYGSABKAkSFAoMU2V0dGxlbWVudElEGBogASgFEg4KBkNyZWRpdBgb" + 
            "IAEoARIQCghNb3J0Z2FnZRgcIAEoARIWCg5FeGNoYW5nZU1hcmdpbhgdIAEo" + 
            "ARIWCg5EZWxpdmVyeU1hcmdpbhgeIAEoARIeChZFeGNoYW5nZURlbGl2ZXJ5" + 
            "TWFyZ2luGB8gASgBEhYKDlJlc2VydmVCYWxhbmNlGCAgASgB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Micro_Future_Message_Business_PBUserInfo__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Micro_Future_Message_Business_PBUserInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBUserInfo, global::Micro.Future.Message.Business.PBUserInfo.Builder>(internal__static_Micro_Future_Message_Business_PBUserInfo__Descriptor,
                  new string[] { "UserId", "Password", "BrokerId", "Name", "Company", "Email", "ContactNum", "Role", "Permission", });
          internal__static_Micro_Future_Message_Business_PBUserInfoList__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Micro_Future_Message_Business_PBUserInfoList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBUserInfoList, global::Micro.Future.Message.Business.PBUserInfoList.Builder>(internal__static_Micro_Future_Message_Business_PBUserInfoList__Descriptor,
                  new string[] { "UserInfo", });
          internal__static_Micro_Future_Message_Business_PBParam__Descriptor = Descriptor.MessageTypes[2];
          internal__static_Micro_Future_Message_Business_PBParam__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBParam, global::Micro.Future.Message.Business.PBParam.Builder>(internal__static_Micro_Future_Message_Business_PBParam__Descriptor,
                  new string[] { "Name", "Value", });
          internal__static_Micro_Future_Message_Business_PBMarketData__Descriptor = Descriptor.MessageTypes[3];
          internal__static_Micro_Future_Message_Business_PBMarketData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBMarketData, global::Micro.Future.Message.Business.PBMarketData.Builder>(internal__static_Micro_Future_Message_Business_PBMarketData__Descriptor,
                  new string[] { "Symbol", "TimeStamp", "PreCloseValue", "OpenValue", "Turnover", "Volume", "HighValue", "LowValue", "MatchPrice", "AskPrice", "AskVolume", "BidPrice", "BidVolume", "PreSettlePrice", "PriceChange", "SettlePrice", "HighLimit", "LowLimit", });
          internal__static_Micro_Future_Message_Business_PBMarketDataList__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Micro_Future_Message_Business_PBMarketDataList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBMarketDataList, global::Micro.Future.Message.Business.PBMarketDataList.Builder>(internal__static_Micro_Future_Message_Business_PBMarketDataList__Descriptor,
                  new string[] { "MdList", });
          internal__static_Micro_Future_Message_Business_PBPricingData__Descriptor = Descriptor.MessageTypes[5];
          internal__static_Micro_Future_Message_Business_PBPricingData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPricingData, global::Micro.Future.Message.Business.PBPricingData.Builder>(internal__static_Micro_Future_Message_Business_PBPricingData__Descriptor,
                  new string[] { "Exchange", "Contract", "AskPrice", "BidPrice", });
          internal__static_Micro_Future_Message_Business_PBPricingDataList__Descriptor = Descriptor.MessageTypes[6];
          internal__static_Micro_Future_Message_Business_PBPricingDataList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPricingDataList, global::Micro.Future.Message.Business.PBPricingDataList.Builder>(internal__static_Micro_Future_Message_Business_PBPricingDataList__Descriptor,
                  new string[] { "Pricing", });
          internal__static_Micro_Future_Message_Business_PBStrategyWeight__Descriptor = Descriptor.MessageTypes[7];
          internal__static_Micro_Future_Message_Business_PBStrategyWeight__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategyWeight, global::Micro.Future.Message.Business.PBStrategyWeight.Builder>(internal__static_Micro_Future_Message_Business_PBStrategyWeight__Descriptor,
                  new string[] { "Exchange", "Contract", "Weight", });
          internal__static_Micro_Future_Message_Business_PBStrategy__Descriptor = Descriptor.MessageTypes[8];
          internal__static_Micro_Future_Message_Business_PBStrategy__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategy, global::Micro.Future.Message.Business.PBStrategy.Builder>(internal__static_Micro_Future_Message_Business_PBStrategy__Descriptor,
                  new string[] { "Exchange", "Contract", "Underlying", "Symbol", "Description", "AllowTrading", "Quantity", "Depth", "Spread", "Offset", "Enabled", "WeightContract", "Params", });
          internal__static_Micro_Future_Message_Business_PBStrategyList__Descriptor = Descriptor.MessageTypes[9];
          internal__static_Micro_Future_Message_Business_PBStrategyList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBStrategyList, global::Micro.Future.Message.Business.PBStrategyList.Builder>(internal__static_Micro_Future_Message_Business_PBStrategyList__Descriptor,
                  new string[] { "Strategy", });
          internal__static_Micro_Future_Message_Business_PBContractParam__Descriptor = Descriptor.MessageTypes[10];
          internal__static_Micro_Future_Message_Business_PBContractParam__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBContractParam, global::Micro.Future.Message.Business.PBContractParam.Builder>(internal__static_Micro_Future_Message_Business_PBContractParam__Descriptor,
                  new string[] { "Exchange", "Contract", "DepthVol", "Gamma", });
          internal__static_Micro_Future_Message_Business_PBContractParamList__Descriptor = Descriptor.MessageTypes[11];
          internal__static_Micro_Future_Message_Business_PBContractParamList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBContractParamList, global::Micro.Future.Message.Business.PBContractParamList.Builder>(internal__static_Micro_Future_Message_Business_PBContractParamList__Descriptor,
                  new string[] { "Params", });
          internal__static_Micro_Future_Message_Business_PBOTCUserParam__Descriptor = Descriptor.MessageTypes[12];
          internal__static_Micro_Future_Message_Business_PBOTCUserParam__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOTCUserParam, global::Micro.Future.Message.Business.PBOTCUserParam.Builder>(internal__static_Micro_Future_Message_Business_PBOTCUserParam__Descriptor,
                  new string[] { "Exchange", "Contract", "Quantity", });
          internal__static_Micro_Future_Message_Business_PBOTCUserParamList__Descriptor = Descriptor.MessageTypes[13];
          internal__static_Micro_Future_Message_Business_PBOTCUserParamList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOTCUserParamList, global::Micro.Future.Message.Business.PBOTCUserParamList.Builder>(internal__static_Micro_Future_Message_Business_PBOTCUserParamList__Descriptor,
                  new string[] { "Params", });
          internal__static_Micro_Future_Message_Business_PBOrderInfo__Descriptor = Descriptor.MessageTypes[14];
          internal__static_Micro_Future_Message_Business_PBOrderInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBOrderInfo, global::Micro.Future.Message.Business.PBOrderInfo.Builder>(internal__static_Micro_Future_Message_Business_PBOrderInfo__Descriptor,
                  new string[] { "OrderID", "OrderSysID", "BrokerID", "InvestorID", "Exchange", "Contract", "ExecType", "Tif", "TradingType", "Direction", "LimitPrice", "StopPrice", "OrderStatus", "OrderType", "Volume", "InsertTime", "UpdateTime", "CancelTime", "VolumeTraded", "VolumeRemain", "VolumeCondition", "TradingDay", "Active", "Openclose", });
          internal__static_Micro_Future_Message_Business_PBTradeNotification__Descriptor = Descriptor.MessageTypes[15];
          internal__static_Micro_Future_Message_Business_PBTradeNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBTradeNotification, global::Micro.Future.Message.Business.PBTradeNotification.Builder>(internal__static_Micro_Future_Message_Business_PBTradeNotification__Descriptor,
                  new string[] { "OrderID", "BrokerID", "InvestorID", "Exchange", "Contract", "UserID", "TradeID", "Direction", "OrderSysID", "Price", "Volume", "TradeDate", "TradeTime", "TradeType", });
          internal__static_Micro_Future_Message_Business_PBPosition__Descriptor = Descriptor.MessageTypes[16];
          internal__static_Micro_Future_Message_Business_PBPosition__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBPosition, global::Micro.Future.Message.Business.PBPosition.Builder>(internal__static_Micro_Future_Message_Business_PBPosition__Descriptor,
                  new string[] { "Exchange", "Contract", "Direction", "Position", "YdPosition", "PositionDate", "OpenVolume", "CloseVolume", "OpenAmount", "CloseAmount", "Cost", "OpenCost", "Profit", "CloseProfit", "UseMargin", "HedgeFlag", });
          internal__static_Micro_Future_Message_Business_PBAccountInfo__Descriptor = Descriptor.MessageTypes[17];
          internal__static_Micro_Future_Message_Business_PBAccountInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Micro.Future.Message.Business.PBAccountInfo, global::Micro.Future.Message.Business.PBAccountInfo.Builder>(internal__static_Micro_Future_Message_Business_PBAccountInfo__Descriptor,
                  new string[] { "BrokerID", "AccountID", "PreMortgage", "PreCredit", "PreDeposit", "PreBalance", "PreMargin", "InterestBase", "Interest", "Deposit", "Withdraw", "FrozenMargin", "FrozenCash", "FrozenCommission", "CurrMargin", "CashIn", "Commission", "CloseProfit", "PositionProfit", "Balance", "Available", "WithdrawQuota", "Reserve", "TradingDay", "SettlementID", "Credit", "Mortgage", "ExchangeMargin", "DeliveryMargin", "ExchangeDeliveryMargin", "ReserveBalance", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserInfo : pb::GeneratedMessage<PBUserInfo, PBUserInfo.Builder> {
    private PBUserInfo() { }
    private static readonly PBUserInfo defaultInstance = new PBUserInfo().MakeReadOnly();
    private static readonly string[] _pBUserInfoFieldNames = new string[] { "brokerId", "company", "contactNum", "email", "name", "password", "permission", "role", "userId" };
    private static readonly uint[] _pBUserInfoFieldTags = new uint[] { 26, 42, 58, 50, 34, 18, 72, 64, 10 };
    public static PBUserInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBUserInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserInfo, PBUserInfo.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBUserInfo__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int BrokerIdFieldNumber = 3;
    private bool hasBrokerId;
    private string brokerId_ = "";
    public bool HasBrokerId {
      get { return hasBrokerId; }
    }
    public string BrokerId {
      get { return brokerId_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int CompanyFieldNumber = 5;
    private bool hasCompany;
    private string company_ = "";
    public bool HasCompany {
      get { return hasCompany; }
    }
    public string Company {
      get { return company_; }
    }
    
    public const int EmailFieldNumber = 6;
    private bool hasEmail;
    private string email_ = "";
    public bool HasEmail {
      get { return hasEmail; }
    }
    public string Email {
      get { return email_; }
    }
    
    public const int ContactNumFieldNumber = 7;
    private bool hasContactNum;
    private string contactNum_ = "";
    public bool HasContactNum {
      get { return hasContactNum; }
    }
    public string ContactNum {
      get { return contactNum_; }
    }
    
    public const int RoleFieldNumber = 8;
    private bool hasRole;
    private int role_;
    public bool HasRole {
      get { return hasRole; }
    }
    public int Role {
      get { return role_; }
    }
    
    public const int PermissionFieldNumber = 9;
    private bool hasPermission;
    private int permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public int Permission {
      get { return permission_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserInfoFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[8], UserId);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[5], Password);
      }
      if (hasBrokerId) {
        output.WriteString(3, field_names[0], BrokerId);
      }
      if (hasName) {
        output.WriteString(4, field_names[4], Name);
      }
      if (hasCompany) {
        output.WriteString(5, field_names[1], Company);
      }
      if (hasEmail) {
        output.WriteString(6, field_names[3], Email);
      }
      if (hasContactNum) {
        output.WriteString(7, field_names[2], ContactNum);
      }
      if (hasRole) {
        output.WriteInt32(8, field_names[7], Role);
      }
      if (hasPermission) {
        output.WriteInt32(9, field_names[6], Permission);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        if (hasBrokerId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BrokerId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasCompany) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Company);
        }
        if (hasEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Email);
        }
        if (hasContactNum) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ContactNum);
        }
        if (hasRole) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Role);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Permission);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserInfo result;
      
      private PBUserInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserInfo original = result;
          result = new PBUserInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBUserInfo.Descriptor; }
      }
      
      public override PBUserInfo DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBUserInfo.DefaultInstance; }
      }
      
      public override PBUserInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserInfo) {
          return MergeFrom((PBUserInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserInfo other) {
        if (other == global::Micro.Future.Message.Business.PBUserInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasBrokerId) {
          BrokerId = other.BrokerId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCompany) {
          Company = other.Company;
        }
        if (other.HasEmail) {
          Email = other.Email;
        }
        if (other.HasContactNum) {
          ContactNum = other.ContactNum;
        }
        if (other.HasRole) {
          Role = other.Role;
        }
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 26: {
              result.hasBrokerId = input.ReadString(ref result.brokerId_);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 42: {
              result.hasCompany = input.ReadString(ref result.company_);
              break;
            }
            case 50: {
              result.hasEmail = input.ReadString(ref result.email_);
              break;
            }
            case 58: {
              result.hasContactNum = input.ReadString(ref result.contactNum_);
              break;
            }
            case 64: {
              result.hasRole = input.ReadInt32(ref result.role_);
              break;
            }
            case 72: {
              result.hasPermission = input.ReadInt32(ref result.permission_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasBrokerId {
        get { return result.hasBrokerId; }
      }
      public string BrokerId {
        get { return result.BrokerId; }
        set { SetBrokerId(value); }
      }
      public Builder SetBrokerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerId = true;
        result.brokerId_ = value;
        return this;
      }
      public Builder ClearBrokerId() {
        PrepareBuilder();
        result.hasBrokerId = false;
        result.brokerId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCompany {
        get { return result.hasCompany; }
      }
      public string Company {
        get { return result.Company; }
        set { SetCompany(value); }
      }
      public Builder SetCompany(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCompany = true;
        result.company_ = value;
        return this;
      }
      public Builder ClearCompany() {
        PrepareBuilder();
        result.hasCompany = false;
        result.company_ = "";
        return this;
      }
      
      public bool HasEmail {
        get { return result.hasEmail; }
      }
      public string Email {
        get { return result.Email; }
        set { SetEmail(value); }
      }
      public Builder SetEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmail = true;
        result.email_ = value;
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.hasEmail = false;
        result.email_ = "";
        return this;
      }
      
      public bool HasContactNum {
        get { return result.hasContactNum; }
      }
      public string ContactNum {
        get { return result.ContactNum; }
        set { SetContactNum(value); }
      }
      public Builder SetContactNum(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContactNum = true;
        result.contactNum_ = value;
        return this;
      }
      public Builder ClearContactNum() {
        PrepareBuilder();
        result.hasContactNum = false;
        result.contactNum_ = "";
        return this;
      }
      
      public bool HasRole {
        get { return result.hasRole; }
      }
      public int Role {
        get { return result.Role; }
        set { SetRole(value); }
      }
      public Builder SetRole(int value) {
        PrepareBuilder();
        result.hasRole = true;
        result.role_ = value;
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.hasRole = false;
        result.role_ = 0;
        return this;
      }
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      public int Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(int value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
    }
    static PBUserInfo() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserInfoList : pb::GeneratedMessage<PBUserInfoList, PBUserInfoList.Builder> {
    private PBUserInfoList() { }
    private static readonly PBUserInfoList defaultInstance = new PBUserInfoList().MakeReadOnly();
    private static readonly string[] _pBUserInfoListFieldNames = new string[] { "userInfo" };
    private static readonly uint[] _pBUserInfoListFieldTags = new uint[] { 10 };
    public static PBUserInfoList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserInfoList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserInfoList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBUserInfoList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserInfoList, PBUserInfoList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBUserInfoList__FieldAccessorTable; }
    }
    
    public const int UserInfoFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBUserInfo> userInfo_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBUserInfo>();
    public scg::IList<global::Micro.Future.Message.Business.PBUserInfo> UserInfoList {
      get { return userInfo_; }
    }
    public int UserInfoCount {
      get { return userInfo_.Count; }
    }
    public global::Micro.Future.Message.Business.PBUserInfo GetUserInfo(int index) {
      return userInfo_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBUserInfo element in UserInfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserInfoListFieldNames;
      if (userInfo_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], userInfo_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBUserInfo element in UserInfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserInfoList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserInfoList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserInfoList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserInfoList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserInfoList MakeReadOnly() {
      userInfo_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserInfoList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserInfoList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserInfoList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserInfoList result;
      
      private PBUserInfoList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserInfoList original = result;
          result = new PBUserInfoList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserInfoList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBUserInfoList.Descriptor; }
      }
      
      public override PBUserInfoList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBUserInfoList.DefaultInstance; }
      }
      
      public override PBUserInfoList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserInfoList) {
          return MergeFrom((PBUserInfoList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserInfoList other) {
        if (other == global::Micro.Future.Message.Business.PBUserInfoList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userInfo_.Count != 0) {
          result.userInfo_.Add(other.userInfo_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserInfoListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserInfoListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.userInfo_, global::Micro.Future.Message.Business.PBUserInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBUserInfo> UserInfoList {
        get { return PrepareBuilder().userInfo_; }
      }
      public int UserInfoCount {
        get { return result.UserInfoCount; }
      }
      public global::Micro.Future.Message.Business.PBUserInfo GetUserInfo(int index) {
        return result.GetUserInfo(index);
      }
      public Builder SetUserInfo(int index, global::Micro.Future.Message.Business.PBUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userInfo_[index] = value;
        return this;
      }
      public Builder SetUserInfo(int index, global::Micro.Future.Message.Business.PBUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserInfo(global::Micro.Future.Message.Business.PBUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userInfo_.Add(value);
        return this;
      }
      public Builder AddUserInfo(global::Micro.Future.Message.Business.PBUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserInfo(scg::IEnumerable<global::Micro.Future.Message.Business.PBUserInfo> values) {
        PrepareBuilder();
        result.userInfo_.Add(values);
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.userInfo_.Clear();
        return this;
      }
    }
    static PBUserInfoList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBParam : pb::GeneratedMessage<PBParam, PBParam.Builder> {
    private PBParam() { }
    private static readonly PBParam defaultInstance = new PBParam().MakeReadOnly();
    private static readonly string[] _pBParamFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _pBParamFieldTags = new uint[] { 10, 17 };
    public static PBParam DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBParam DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBParam ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBParam__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBParam, PBParam.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBParam__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private double value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public double Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBParamFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteDouble(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBParam ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBParam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBParam ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBParam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBParam ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBParam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBParam ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBParam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBParam ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBParam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBParam MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBParam prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBParam, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBParam cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBParam result;
      
      private PBParam PrepareBuilder() {
        if (resultIsReadOnly) {
          PBParam original = result;
          result = new PBParam();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBParam MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBParam.Descriptor; }
      }
      
      public override PBParam DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBParam.DefaultInstance; }
      }
      
      public override PBParam BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBParam) {
          return MergeFrom((PBParam) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBParam other) {
        if (other == global::Micro.Future.Message.Business.PBParam.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBParamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBParamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 17: {
              result.hasValue = input.ReadDouble(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public double Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(double value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0D;
        return this;
      }
    }
    static PBParam() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMarketData : pb::GeneratedMessage<PBMarketData, PBMarketData.Builder> {
    private PBMarketData() { }
    private static readonly PBMarketData defaultInstance = new PBMarketData().MakeReadOnly();
    private static readonly string[] _pBMarketDataFieldNames = new string[] { "askPrice", "askVolume", "bidPrice", "bidVolume", "highLimit", "highValue", "lowLimit", "lowValue", "matchPrice", "openValue", "preCloseValue", "preSettlePrice", "priceChange", "settlePrice", "symbol", "timeStamp", "turnover", "volume" };
    private static readonly uint[] _pBMarketDataFieldTags = new uint[] { 81, 88, 97, 104, 136, 57, 144, 65, 73, 33, 25, 113, 121, 129, 10, 18, 41, 48 };
    public static PBMarketData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMarketData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMarketData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBMarketData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMarketData, PBMarketData.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBMarketData__FieldAccessorTable; }
    }
    
    public const int SymbolFieldNumber = 1;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int TimeStampFieldNumber = 2;
    private bool hasTimeStamp;
    private string timeStamp_ = "";
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public string TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int PreCloseValueFieldNumber = 3;
    private bool hasPreCloseValue;
    private double preCloseValue_;
    public bool HasPreCloseValue {
      get { return hasPreCloseValue; }
    }
    public double PreCloseValue {
      get { return preCloseValue_; }
    }
    
    public const int OpenValueFieldNumber = 4;
    private bool hasOpenValue;
    private double openValue_;
    public bool HasOpenValue {
      get { return hasOpenValue; }
    }
    public double OpenValue {
      get { return openValue_; }
    }
    
    public const int TurnoverFieldNumber = 5;
    private bool hasTurnover;
    private double turnover_;
    public bool HasTurnover {
      get { return hasTurnover; }
    }
    public double Turnover {
      get { return turnover_; }
    }
    
    public const int VolumeFieldNumber = 6;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int HighValueFieldNumber = 7;
    private bool hasHighValue;
    private double highValue_;
    public bool HasHighValue {
      get { return hasHighValue; }
    }
    public double HighValue {
      get { return highValue_; }
    }
    
    public const int LowValueFieldNumber = 8;
    private bool hasLowValue;
    private double lowValue_;
    public bool HasLowValue {
      get { return hasLowValue; }
    }
    public double LowValue {
      get { return lowValue_; }
    }
    
    public const int MatchPriceFieldNumber = 9;
    private bool hasMatchPrice;
    private double matchPrice_;
    public bool HasMatchPrice {
      get { return hasMatchPrice; }
    }
    public double MatchPrice {
      get { return matchPrice_; }
    }
    
    public const int AskPriceFieldNumber = 10;
    private pbc::PopsicleList<double> askPrice_ = new pbc::PopsicleList<double>();
    public scg::IList<double> AskPriceList {
      get { return pbc::Lists.AsReadOnly(askPrice_); }
    }
    public int AskPriceCount {
      get { return askPrice_.Count; }
    }
    public double GetAskPrice(int index) {
      return askPrice_[index];
    }
    
    public const int AskVolumeFieldNumber = 11;
    private pbc::PopsicleList<int> askVolume_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AskVolumeList {
      get { return pbc::Lists.AsReadOnly(askVolume_); }
    }
    public int AskVolumeCount {
      get { return askVolume_.Count; }
    }
    public int GetAskVolume(int index) {
      return askVolume_[index];
    }
    
    public const int BidPriceFieldNumber = 12;
    private pbc::PopsicleList<double> bidPrice_ = new pbc::PopsicleList<double>();
    public scg::IList<double> BidPriceList {
      get { return pbc::Lists.AsReadOnly(bidPrice_); }
    }
    public int BidPriceCount {
      get { return bidPrice_.Count; }
    }
    public double GetBidPrice(int index) {
      return bidPrice_[index];
    }
    
    public const int BidVolumeFieldNumber = 13;
    private pbc::PopsicleList<int> bidVolume_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BidVolumeList {
      get { return pbc::Lists.AsReadOnly(bidVolume_); }
    }
    public int BidVolumeCount {
      get { return bidVolume_.Count; }
    }
    public int GetBidVolume(int index) {
      return bidVolume_[index];
    }
    
    public const int PreSettlePriceFieldNumber = 14;
    private bool hasPreSettlePrice;
    private double preSettlePrice_;
    public bool HasPreSettlePrice {
      get { return hasPreSettlePrice; }
    }
    public double PreSettlePrice {
      get { return preSettlePrice_; }
    }
    
    public const int PriceChangeFieldNumber = 15;
    private bool hasPriceChange;
    private double priceChange_;
    public bool HasPriceChange {
      get { return hasPriceChange; }
    }
    public double PriceChange {
      get { return priceChange_; }
    }
    
    public const int SettlePriceFieldNumber = 16;
    private bool hasSettlePrice;
    private double settlePrice_;
    public bool HasSettlePrice {
      get { return hasSettlePrice; }
    }
    public double SettlePrice {
      get { return settlePrice_; }
    }
    
    public const int HighLimitFieldNumber = 17;
    private bool hasHighLimit;
    private int highLimit_;
    public bool HasHighLimit {
      get { return hasHighLimit; }
    }
    public int HighLimit {
      get { return highLimit_; }
    }
    
    public const int LowLimitFieldNumber = 18;
    private bool hasLowLimit;
    private int lowLimit_;
    public bool HasLowLimit {
      get { return hasLowLimit; }
    }
    public int LowLimit {
      get { return lowLimit_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSymbol) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMarketDataFieldNames;
      if (hasSymbol) {
        output.WriteString(1, field_names[14], Symbol);
      }
      if (hasTimeStamp) {
        output.WriteString(2, field_names[15], TimeStamp);
      }
      if (hasPreCloseValue) {
        output.WriteDouble(3, field_names[10], PreCloseValue);
      }
      if (hasOpenValue) {
        output.WriteDouble(4, field_names[9], OpenValue);
      }
      if (hasTurnover) {
        output.WriteDouble(5, field_names[16], Turnover);
      }
      if (hasVolume) {
        output.WriteInt32(6, field_names[17], Volume);
      }
      if (hasHighValue) {
        output.WriteDouble(7, field_names[5], HighValue);
      }
      if (hasLowValue) {
        output.WriteDouble(8, field_names[7], LowValue);
      }
      if (hasMatchPrice) {
        output.WriteDouble(9, field_names[8], MatchPrice);
      }
      if (askPrice_.Count > 0) {
        output.WriteDoubleArray(10, field_names[0], askPrice_);
      }
      if (askVolume_.Count > 0) {
        output.WriteInt32Array(11, field_names[1], askVolume_);
      }
      if (bidPrice_.Count > 0) {
        output.WriteDoubleArray(12, field_names[2], bidPrice_);
      }
      if (bidVolume_.Count > 0) {
        output.WriteInt32Array(13, field_names[3], bidVolume_);
      }
      if (hasPreSettlePrice) {
        output.WriteDouble(14, field_names[11], PreSettlePrice);
      }
      if (hasPriceChange) {
        output.WriteDouble(15, field_names[12], PriceChange);
      }
      if (hasSettlePrice) {
        output.WriteDouble(16, field_names[13], SettlePrice);
      }
      if (hasHighLimit) {
        output.WriteInt32(17, field_names[4], HighLimit);
      }
      if (hasLowLimit) {
        output.WriteInt32(18, field_names[6], LowLimit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Symbol);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TimeStamp);
        }
        if (hasPreCloseValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, PreCloseValue);
        }
        if (hasOpenValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, OpenValue);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Turnover);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Volume);
        }
        if (hasHighValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, HighValue);
        }
        if (hasLowValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, LowValue);
        }
        if (hasMatchPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, MatchPrice);
        }
        {
          int dataSize = 0;
          dataSize = 8 * askPrice_.Count;
          size += dataSize;
          size += 1 * askPrice_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in AskVolumeList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * askVolume_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 8 * bidPrice_.Count;
          size += dataSize;
          size += 1 * bidPrice_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in BidVolumeList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * bidVolume_.Count;
        }
        if (hasPreSettlePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, PreSettlePrice);
        }
        if (hasPriceChange) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, PriceChange);
        }
        if (hasSettlePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, SettlePrice);
        }
        if (hasHighLimit) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, HighLimit);
        }
        if (hasLowLimit) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, LowLimit);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMarketData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMarketData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMarketData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMarketData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMarketData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMarketData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMarketData MakeReadOnly() {
      askPrice_.MakeReadOnly();
      askVolume_.MakeReadOnly();
      bidPrice_.MakeReadOnly();
      bidVolume_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMarketData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMarketData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMarketData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMarketData result;
      
      private PBMarketData PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMarketData original = result;
          result = new PBMarketData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMarketData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBMarketData.Descriptor; }
      }
      
      public override PBMarketData DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBMarketData.DefaultInstance; }
      }
      
      public override PBMarketData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMarketData) {
          return MergeFrom((PBMarketData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMarketData other) {
        if (other == global::Micro.Future.Message.Business.PBMarketData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasPreCloseValue) {
          PreCloseValue = other.PreCloseValue;
        }
        if (other.HasOpenValue) {
          OpenValue = other.OpenValue;
        }
        if (other.HasTurnover) {
          Turnover = other.Turnover;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasHighValue) {
          HighValue = other.HighValue;
        }
        if (other.HasLowValue) {
          LowValue = other.LowValue;
        }
        if (other.HasMatchPrice) {
          MatchPrice = other.MatchPrice;
        }
        if (other.askPrice_.Count != 0) {
          result.askPrice_.Add(other.askPrice_);
        }
        if (other.askVolume_.Count != 0) {
          result.askVolume_.Add(other.askVolume_);
        }
        if (other.bidPrice_.Count != 0) {
          result.bidPrice_.Add(other.bidPrice_);
        }
        if (other.bidVolume_.Count != 0) {
          result.bidVolume_.Add(other.bidVolume_);
        }
        if (other.HasPreSettlePrice) {
          PreSettlePrice = other.PreSettlePrice;
        }
        if (other.HasPriceChange) {
          PriceChange = other.PriceChange;
        }
        if (other.HasSettlePrice) {
          SettlePrice = other.SettlePrice;
        }
        if (other.HasHighLimit) {
          HighLimit = other.HighLimit;
        }
        if (other.HasLowLimit) {
          LowLimit = other.LowLimit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMarketDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMarketDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSymbol = input.ReadString(ref result.symbol_);
              break;
            }
            case 18: {
              result.hasTimeStamp = input.ReadString(ref result.timeStamp_);
              break;
            }
            case 25: {
              result.hasPreCloseValue = input.ReadDouble(ref result.preCloseValue_);
              break;
            }
            case 33: {
              result.hasOpenValue = input.ReadDouble(ref result.openValue_);
              break;
            }
            case 41: {
              result.hasTurnover = input.ReadDouble(ref result.turnover_);
              break;
            }
            case 48: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 57: {
              result.hasHighValue = input.ReadDouble(ref result.highValue_);
              break;
            }
            case 65: {
              result.hasLowValue = input.ReadDouble(ref result.lowValue_);
              break;
            }
            case 73: {
              result.hasMatchPrice = input.ReadDouble(ref result.matchPrice_);
              break;
            }
            case 82:
            case 81: {
              input.ReadDoubleArray(tag, field_name, result.askPrice_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.askVolume_);
              break;
            }
            case 98:
            case 97: {
              input.ReadDoubleArray(tag, field_name, result.bidPrice_);
              break;
            }
            case 106:
            case 104: {
              input.ReadInt32Array(tag, field_name, result.bidVolume_);
              break;
            }
            case 113: {
              result.hasPreSettlePrice = input.ReadDouble(ref result.preSettlePrice_);
              break;
            }
            case 121: {
              result.hasPriceChange = input.ReadDouble(ref result.priceChange_);
              break;
            }
            case 129: {
              result.hasSettlePrice = input.ReadDouble(ref result.settlePrice_);
              break;
            }
            case 136: {
              result.hasHighLimit = input.ReadInt32(ref result.highLimit_);
              break;
            }
            case 144: {
              result.hasLowLimit = input.ReadInt32(ref result.lowLimit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSymbol {
        get { return result.hasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        PrepareBuilder();
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public string TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = "";
        return this;
      }
      
      public bool HasPreCloseValue {
        get { return result.hasPreCloseValue; }
      }
      public double PreCloseValue {
        get { return result.PreCloseValue; }
        set { SetPreCloseValue(value); }
      }
      public Builder SetPreCloseValue(double value) {
        PrepareBuilder();
        result.hasPreCloseValue = true;
        result.preCloseValue_ = value;
        return this;
      }
      public Builder ClearPreCloseValue() {
        PrepareBuilder();
        result.hasPreCloseValue = false;
        result.preCloseValue_ = 0D;
        return this;
      }
      
      public bool HasOpenValue {
        get { return result.hasOpenValue; }
      }
      public double OpenValue {
        get { return result.OpenValue; }
        set { SetOpenValue(value); }
      }
      public Builder SetOpenValue(double value) {
        PrepareBuilder();
        result.hasOpenValue = true;
        result.openValue_ = value;
        return this;
      }
      public Builder ClearOpenValue() {
        PrepareBuilder();
        result.hasOpenValue = false;
        result.openValue_ = 0D;
        return this;
      }
      
      public bool HasTurnover {
        get { return result.hasTurnover; }
      }
      public double Turnover {
        get { return result.Turnover; }
        set { SetTurnover(value); }
      }
      public Builder SetTurnover(double value) {
        PrepareBuilder();
        result.hasTurnover = true;
        result.turnover_ = value;
        return this;
      }
      public Builder ClearTurnover() {
        PrepareBuilder();
        result.hasTurnover = false;
        result.turnover_ = 0D;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasHighValue {
        get { return result.hasHighValue; }
      }
      public double HighValue {
        get { return result.HighValue; }
        set { SetHighValue(value); }
      }
      public Builder SetHighValue(double value) {
        PrepareBuilder();
        result.hasHighValue = true;
        result.highValue_ = value;
        return this;
      }
      public Builder ClearHighValue() {
        PrepareBuilder();
        result.hasHighValue = false;
        result.highValue_ = 0D;
        return this;
      }
      
      public bool HasLowValue {
        get { return result.hasLowValue; }
      }
      public double LowValue {
        get { return result.LowValue; }
        set { SetLowValue(value); }
      }
      public Builder SetLowValue(double value) {
        PrepareBuilder();
        result.hasLowValue = true;
        result.lowValue_ = value;
        return this;
      }
      public Builder ClearLowValue() {
        PrepareBuilder();
        result.hasLowValue = false;
        result.lowValue_ = 0D;
        return this;
      }
      
      public bool HasMatchPrice {
        get { return result.hasMatchPrice; }
      }
      public double MatchPrice {
        get { return result.MatchPrice; }
        set { SetMatchPrice(value); }
      }
      public Builder SetMatchPrice(double value) {
        PrepareBuilder();
        result.hasMatchPrice = true;
        result.matchPrice_ = value;
        return this;
      }
      public Builder ClearMatchPrice() {
        PrepareBuilder();
        result.hasMatchPrice = false;
        result.matchPrice_ = 0D;
        return this;
      }
      
      public pbc::IPopsicleList<double> AskPriceList {
        get { return PrepareBuilder().askPrice_; }
      }
      public int AskPriceCount {
        get { return result.AskPriceCount; }
      }
      public double GetAskPrice(int index) {
        return result.GetAskPrice(index);
      }
      public Builder SetAskPrice(int index, double value) {
        PrepareBuilder();
        result.askPrice_[index] = value;
        return this;
      }
      public Builder AddAskPrice(double value) {
        PrepareBuilder();
        result.askPrice_.Add(value);
        return this;
      }
      public Builder AddRangeAskPrice(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.askPrice_.Add(values);
        return this;
      }
      public Builder ClearAskPrice() {
        PrepareBuilder();
        result.askPrice_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> AskVolumeList {
        get { return PrepareBuilder().askVolume_; }
      }
      public int AskVolumeCount {
        get { return result.AskVolumeCount; }
      }
      public int GetAskVolume(int index) {
        return result.GetAskVolume(index);
      }
      public Builder SetAskVolume(int index, int value) {
        PrepareBuilder();
        result.askVolume_[index] = value;
        return this;
      }
      public Builder AddAskVolume(int value) {
        PrepareBuilder();
        result.askVolume_.Add(value);
        return this;
      }
      public Builder AddRangeAskVolume(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.askVolume_.Add(values);
        return this;
      }
      public Builder ClearAskVolume() {
        PrepareBuilder();
        result.askVolume_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<double> BidPriceList {
        get { return PrepareBuilder().bidPrice_; }
      }
      public int BidPriceCount {
        get { return result.BidPriceCount; }
      }
      public double GetBidPrice(int index) {
        return result.GetBidPrice(index);
      }
      public Builder SetBidPrice(int index, double value) {
        PrepareBuilder();
        result.bidPrice_[index] = value;
        return this;
      }
      public Builder AddBidPrice(double value) {
        PrepareBuilder();
        result.bidPrice_.Add(value);
        return this;
      }
      public Builder AddRangeBidPrice(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.bidPrice_.Add(values);
        return this;
      }
      public Builder ClearBidPrice() {
        PrepareBuilder();
        result.bidPrice_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> BidVolumeList {
        get { return PrepareBuilder().bidVolume_; }
      }
      public int BidVolumeCount {
        get { return result.BidVolumeCount; }
      }
      public int GetBidVolume(int index) {
        return result.GetBidVolume(index);
      }
      public Builder SetBidVolume(int index, int value) {
        PrepareBuilder();
        result.bidVolume_[index] = value;
        return this;
      }
      public Builder AddBidVolume(int value) {
        PrepareBuilder();
        result.bidVolume_.Add(value);
        return this;
      }
      public Builder AddRangeBidVolume(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.bidVolume_.Add(values);
        return this;
      }
      public Builder ClearBidVolume() {
        PrepareBuilder();
        result.bidVolume_.Clear();
        return this;
      }
      
      public bool HasPreSettlePrice {
        get { return result.hasPreSettlePrice; }
      }
      public double PreSettlePrice {
        get { return result.PreSettlePrice; }
        set { SetPreSettlePrice(value); }
      }
      public Builder SetPreSettlePrice(double value) {
        PrepareBuilder();
        result.hasPreSettlePrice = true;
        result.preSettlePrice_ = value;
        return this;
      }
      public Builder ClearPreSettlePrice() {
        PrepareBuilder();
        result.hasPreSettlePrice = false;
        result.preSettlePrice_ = 0D;
        return this;
      }
      
      public bool HasPriceChange {
        get { return result.hasPriceChange; }
      }
      public double PriceChange {
        get { return result.PriceChange; }
        set { SetPriceChange(value); }
      }
      public Builder SetPriceChange(double value) {
        PrepareBuilder();
        result.hasPriceChange = true;
        result.priceChange_ = value;
        return this;
      }
      public Builder ClearPriceChange() {
        PrepareBuilder();
        result.hasPriceChange = false;
        result.priceChange_ = 0D;
        return this;
      }
      
      public bool HasSettlePrice {
        get { return result.hasSettlePrice; }
      }
      public double SettlePrice {
        get { return result.SettlePrice; }
        set { SetSettlePrice(value); }
      }
      public Builder SetSettlePrice(double value) {
        PrepareBuilder();
        result.hasSettlePrice = true;
        result.settlePrice_ = value;
        return this;
      }
      public Builder ClearSettlePrice() {
        PrepareBuilder();
        result.hasSettlePrice = false;
        result.settlePrice_ = 0D;
        return this;
      }
      
      public bool HasHighLimit {
        get { return result.hasHighLimit; }
      }
      public int HighLimit {
        get { return result.HighLimit; }
        set { SetHighLimit(value); }
      }
      public Builder SetHighLimit(int value) {
        PrepareBuilder();
        result.hasHighLimit = true;
        result.highLimit_ = value;
        return this;
      }
      public Builder ClearHighLimit() {
        PrepareBuilder();
        result.hasHighLimit = false;
        result.highLimit_ = 0;
        return this;
      }
      
      public bool HasLowLimit {
        get { return result.hasLowLimit; }
      }
      public int LowLimit {
        get { return result.LowLimit; }
        set { SetLowLimit(value); }
      }
      public Builder SetLowLimit(int value) {
        PrepareBuilder();
        result.hasLowLimit = true;
        result.lowLimit_ = value;
        return this;
      }
      public Builder ClearLowLimit() {
        PrepareBuilder();
        result.hasLowLimit = false;
        result.lowLimit_ = 0;
        return this;
      }
    }
    static PBMarketData() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMarketDataList : pb::GeneratedMessage<PBMarketDataList, PBMarketDataList.Builder> {
    private PBMarketDataList() { }
    private static readonly PBMarketDataList defaultInstance = new PBMarketDataList().MakeReadOnly();
    private static readonly string[] _pBMarketDataListFieldNames = new string[] { "mdList" };
    private static readonly uint[] _pBMarketDataListFieldTags = new uint[] { 10 };
    public static PBMarketDataList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMarketDataList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMarketDataList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBMarketDataList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMarketDataList, PBMarketDataList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBMarketDataList__FieldAccessorTable; }
    }
    
    public const int MdListFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBMarketData> mdList_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBMarketData>();
    public scg::IList<global::Micro.Future.Message.Business.PBMarketData> MdListList {
      get { return mdList_; }
    }
    public int MdListCount {
      get { return mdList_.Count; }
    }
    public global::Micro.Future.Message.Business.PBMarketData GetMdList(int index) {
      return mdList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBMarketData element in MdListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMarketDataListFieldNames;
      if (mdList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], mdList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBMarketData element in MdListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMarketDataList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMarketDataList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMarketDataList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMarketDataList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMarketDataList MakeReadOnly() {
      mdList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMarketDataList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMarketDataList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMarketDataList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMarketDataList result;
      
      private PBMarketDataList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMarketDataList original = result;
          result = new PBMarketDataList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMarketDataList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBMarketDataList.Descriptor; }
      }
      
      public override PBMarketDataList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBMarketDataList.DefaultInstance; }
      }
      
      public override PBMarketDataList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMarketDataList) {
          return MergeFrom((PBMarketDataList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMarketDataList other) {
        if (other == global::Micro.Future.Message.Business.PBMarketDataList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.mdList_.Count != 0) {
          result.mdList_.Add(other.mdList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMarketDataListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMarketDataListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.mdList_, global::Micro.Future.Message.Business.PBMarketData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBMarketData> MdListList {
        get { return PrepareBuilder().mdList_; }
      }
      public int MdListCount {
        get { return result.MdListCount; }
      }
      public global::Micro.Future.Message.Business.PBMarketData GetMdList(int index) {
        return result.GetMdList(index);
      }
      public Builder SetMdList(int index, global::Micro.Future.Message.Business.PBMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdList_[index] = value;
        return this;
      }
      public Builder SetMdList(int index, global::Micro.Future.Message.Business.PBMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mdList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMdList(global::Micro.Future.Message.Business.PBMarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdList_.Add(value);
        return this;
      }
      public Builder AddMdList(global::Micro.Future.Message.Business.PBMarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mdList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMdList(scg::IEnumerable<global::Micro.Future.Message.Business.PBMarketData> values) {
        PrepareBuilder();
        result.mdList_.Add(values);
        return this;
      }
      public Builder ClearMdList() {
        PrepareBuilder();
        result.mdList_.Clear();
        return this;
      }
    }
    static PBMarketDataList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPricingData : pb::GeneratedMessage<PBPricingData, PBPricingData.Builder> {
    private PBPricingData() { }
    private static readonly PBPricingData defaultInstance = new PBPricingData().MakeReadOnly();
    private static readonly string[] _pBPricingDataFieldNames = new string[] { "askPrice", "bidPrice", "contract", "exchange" };
    private static readonly uint[] _pBPricingDataFieldTags = new uint[] { 25, 33, 18, 10 };
    public static PBPricingData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPricingData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPricingData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPricingData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPricingData, PBPricingData.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPricingData__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 1;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 2;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int AskPriceFieldNumber = 3;
    private bool hasAskPrice;
    private double askPrice_;
    public bool HasAskPrice {
      get { return hasAskPrice; }
    }
    public double AskPrice {
      get { return askPrice_; }
    }
    
    public const int BidPriceFieldNumber = 4;
    private bool hasBidPrice;
    private double bidPrice_;
    public bool HasBidPrice {
      get { return hasBidPrice; }
    }
    public double BidPrice {
      get { return bidPrice_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        if (!hasAskPrice) return false;
        if (!hasBidPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPricingDataFieldNames;
      if (hasExchange) {
        output.WriteString(1, field_names[3], Exchange);
      }
      if (hasContract) {
        output.WriteString(2, field_names[2], Contract);
      }
      if (hasAskPrice) {
        output.WriteDouble(3, field_names[0], AskPrice);
      }
      if (hasBidPrice) {
        output.WriteDouble(4, field_names[1], BidPrice);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contract);
        }
        if (hasAskPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, AskPrice);
        }
        if (hasBidPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, BidPrice);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPricingData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPricingData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPricingData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPricingData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPricingData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPricingData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPricingData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPricingData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPricingData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPricingData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPricingData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPricingData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPricingData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPricingData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPricingData result;
      
      private PBPricingData PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPricingData original = result;
          result = new PBPricingData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPricingData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBPricingData.Descriptor; }
      }
      
      public override PBPricingData DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBPricingData.DefaultInstance; }
      }
      
      public override PBPricingData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPricingData) {
          return MergeFrom((PBPricingData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPricingData other) {
        if (other == global::Micro.Future.Message.Business.PBPricingData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasAskPrice) {
          AskPrice = other.AskPrice;
        }
        if (other.HasBidPrice) {
          BidPrice = other.BidPrice;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPricingDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPricingDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 18: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 25: {
              result.hasAskPrice = input.ReadDouble(ref result.askPrice_);
              break;
            }
            case 33: {
              result.hasBidPrice = input.ReadDouble(ref result.bidPrice_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasAskPrice {
        get { return result.hasAskPrice; }
      }
      public double AskPrice {
        get { return result.AskPrice; }
        set { SetAskPrice(value); }
      }
      public Builder SetAskPrice(double value) {
        PrepareBuilder();
        result.hasAskPrice = true;
        result.askPrice_ = value;
        return this;
      }
      public Builder ClearAskPrice() {
        PrepareBuilder();
        result.hasAskPrice = false;
        result.askPrice_ = 0D;
        return this;
      }
      
      public bool HasBidPrice {
        get { return result.hasBidPrice; }
      }
      public double BidPrice {
        get { return result.BidPrice; }
        set { SetBidPrice(value); }
      }
      public Builder SetBidPrice(double value) {
        PrepareBuilder();
        result.hasBidPrice = true;
        result.bidPrice_ = value;
        return this;
      }
      public Builder ClearBidPrice() {
        PrepareBuilder();
        result.hasBidPrice = false;
        result.bidPrice_ = 0D;
        return this;
      }
    }
    static PBPricingData() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPricingDataList : pb::GeneratedMessage<PBPricingDataList, PBPricingDataList.Builder> {
    private PBPricingDataList() { }
    private static readonly PBPricingDataList defaultInstance = new PBPricingDataList().MakeReadOnly();
    private static readonly string[] _pBPricingDataListFieldNames = new string[] { "pricing" };
    private static readonly uint[] _pBPricingDataListFieldTags = new uint[] { 10 };
    public static PBPricingDataList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPricingDataList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPricingDataList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPricingDataList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPricingDataList, PBPricingDataList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPricingDataList__FieldAccessorTable; }
    }
    
    public const int PricingFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBPricingData> pricing_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBPricingData>();
    public scg::IList<global::Micro.Future.Message.Business.PBPricingData> PricingList {
      get { return pricing_; }
    }
    public int PricingCount {
      get { return pricing_.Count; }
    }
    public global::Micro.Future.Message.Business.PBPricingData GetPricing(int index) {
      return pricing_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBPricingData element in PricingList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPricingDataListFieldNames;
      if (pricing_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], pricing_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBPricingData element in PricingList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPricingDataList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPricingDataList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPricingDataList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPricingDataList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPricingDataList MakeReadOnly() {
      pricing_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPricingDataList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPricingDataList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPricingDataList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPricingDataList result;
      
      private PBPricingDataList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPricingDataList original = result;
          result = new PBPricingDataList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPricingDataList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBPricingDataList.Descriptor; }
      }
      
      public override PBPricingDataList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBPricingDataList.DefaultInstance; }
      }
      
      public override PBPricingDataList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPricingDataList) {
          return MergeFrom((PBPricingDataList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPricingDataList other) {
        if (other == global::Micro.Future.Message.Business.PBPricingDataList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.pricing_.Count != 0) {
          result.pricing_.Add(other.pricing_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPricingDataListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPricingDataListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.pricing_, global::Micro.Future.Message.Business.PBPricingData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBPricingData> PricingList {
        get { return PrepareBuilder().pricing_; }
      }
      public int PricingCount {
        get { return result.PricingCount; }
      }
      public global::Micro.Future.Message.Business.PBPricingData GetPricing(int index) {
        return result.GetPricing(index);
      }
      public Builder SetPricing(int index, global::Micro.Future.Message.Business.PBPricingData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pricing_[index] = value;
        return this;
      }
      public Builder SetPricing(int index, global::Micro.Future.Message.Business.PBPricingData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pricing_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPricing(global::Micro.Future.Message.Business.PBPricingData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pricing_.Add(value);
        return this;
      }
      public Builder AddPricing(global::Micro.Future.Message.Business.PBPricingData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pricing_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePricing(scg::IEnumerable<global::Micro.Future.Message.Business.PBPricingData> values) {
        PrepareBuilder();
        result.pricing_.Add(values);
        return this;
      }
      public Builder ClearPricing() {
        PrepareBuilder();
        result.pricing_.Clear();
        return this;
      }
    }
    static PBPricingDataList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBStrategyWeight : pb::GeneratedMessage<PBStrategyWeight, PBStrategyWeight.Builder> {
    private PBStrategyWeight() { }
    private static readonly PBStrategyWeight defaultInstance = new PBStrategyWeight().MakeReadOnly();
    private static readonly string[] _pBStrategyWeightFieldNames = new string[] { "contract", "exchange", "weight" };
    private static readonly uint[] _pBStrategyWeightFieldTags = new uint[] { 34, 26, 53 };
    public static PBStrategyWeight DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBStrategyWeight DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBStrategyWeight ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategyWeight__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBStrategyWeight, PBStrategyWeight.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategyWeight__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 3;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 4;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int WeightFieldNumber = 6;
    private bool hasWeight;
    private float weight_;
    public bool HasWeight {
      get { return hasWeight; }
    }
    public float Weight {
      get { return weight_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        if (!hasWeight) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBStrategyWeightFieldNames;
      if (hasExchange) {
        output.WriteString(3, field_names[1], Exchange);
      }
      if (hasContract) {
        output.WriteString(4, field_names[0], Contract);
      }
      if (hasWeight) {
        output.WriteFloat(6, field_names[2], Weight);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Contract);
        }
        if (hasWeight) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Weight);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBStrategyWeight ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyWeight ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBStrategyWeight ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategyWeight ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBStrategyWeight MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBStrategyWeight prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBStrategyWeight, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBStrategyWeight cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBStrategyWeight result;
      
      private PBStrategyWeight PrepareBuilder() {
        if (resultIsReadOnly) {
          PBStrategyWeight original = result;
          result = new PBStrategyWeight();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBStrategyWeight MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBStrategyWeight.Descriptor; }
      }
      
      public override PBStrategyWeight DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBStrategyWeight.DefaultInstance; }
      }
      
      public override PBStrategyWeight BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBStrategyWeight) {
          return MergeFrom((PBStrategyWeight) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBStrategyWeight other) {
        if (other == global::Micro.Future.Message.Business.PBStrategyWeight.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasWeight) {
          Weight = other.Weight;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBStrategyWeightFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBStrategyWeightFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 26: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 34: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 53: {
              result.hasWeight = input.ReadFloat(ref result.weight_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasWeight {
        get { return result.hasWeight; }
      }
      public float Weight {
        get { return result.Weight; }
        set { SetWeight(value); }
      }
      public Builder SetWeight(float value) {
        PrepareBuilder();
        result.hasWeight = true;
        result.weight_ = value;
        return this;
      }
      public Builder ClearWeight() {
        PrepareBuilder();
        result.hasWeight = false;
        result.weight_ = 0F;
        return this;
      }
    }
    static PBStrategyWeight() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBStrategy : pb::GeneratedMessage<PBStrategy, PBStrategy.Builder> {
    private PBStrategy() { }
    private static readonly PBStrategy defaultInstance = new PBStrategy().MakeReadOnly();
    private static readonly string[] _pBStrategyFieldNames = new string[] { "allowTrading", "contract", "depth", "description", "enabled", "exchange", "offset", "params", "quantity", "spread", "symbol", "underlying", "weightContract" };
    private static readonly uint[] _pBStrategyFieldTags = new uint[] { 48, 18, 64, 42, 88, 10, 85, 106, 56, 77, 34, 26, 98 };
    public static PBStrategy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBStrategy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBStrategy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBStrategy, PBStrategy.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategy__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 1;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 2;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int UnderlyingFieldNumber = 3;
    private bool hasUnderlying;
    private string underlying_ = "";
    public bool HasUnderlying {
      get { return hasUnderlying; }
    }
    public string Underlying {
      get { return underlying_; }
    }
    
    public const int SymbolFieldNumber = 4;
    private bool hasSymbol;
    private string symbol_ = "";
    public bool HasSymbol {
      get { return hasSymbol; }
    }
    public string Symbol {
      get { return symbol_; }
    }
    
    public const int DescriptionFieldNumber = 5;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int AllowTradingFieldNumber = 6;
    private bool hasAllowTrading;
    private bool allowTrading_;
    public bool HasAllowTrading {
      get { return hasAllowTrading; }
    }
    public bool AllowTrading {
      get { return allowTrading_; }
    }
    
    public const int QuantityFieldNumber = 7;
    private bool hasQuantity;
    private int quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public int Quantity {
      get { return quantity_; }
    }
    
    public const int DepthFieldNumber = 8;
    private bool hasDepth;
    private int depth_;
    public bool HasDepth {
      get { return hasDepth; }
    }
    public int Depth {
      get { return depth_; }
    }
    
    public const int SpreadFieldNumber = 9;
    private bool hasSpread;
    private float spread_;
    public bool HasSpread {
      get { return hasSpread; }
    }
    public float Spread {
      get { return spread_; }
    }
    
    public const int OffsetFieldNumber = 10;
    private bool hasOffset;
    private float offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public float Offset {
      get { return offset_; }
    }
    
    public const int EnabledFieldNumber = 11;
    private bool hasEnabled;
    private bool enabled_;
    public bool HasEnabled {
      get { return hasEnabled; }
    }
    public bool Enabled {
      get { return enabled_; }
    }
    
    public const int WeightContractFieldNumber = 12;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBStrategyWeight> weightContract_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBStrategyWeight>();
    public scg::IList<global::Micro.Future.Message.Business.PBStrategyWeight> WeightContractList {
      get { return weightContract_; }
    }
    public int WeightContractCount {
      get { return weightContract_.Count; }
    }
    public global::Micro.Future.Message.Business.PBStrategyWeight GetWeightContract(int index) {
      return weightContract_[index];
    }
    
    public const int ParamsFieldNumber = 13;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBParam> params_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBParam>();
    public scg::IList<global::Micro.Future.Message.Business.PBParam> ParamsList {
      get { return params_; }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public global::Micro.Future.Message.Business.PBParam GetParams(int index) {
      return params_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        foreach (global::Micro.Future.Message.Business.PBStrategyWeight element in WeightContractList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Micro.Future.Message.Business.PBParam element in ParamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBStrategyFieldNames;
      if (hasExchange) {
        output.WriteString(1, field_names[5], Exchange);
      }
      if (hasContract) {
        output.WriteString(2, field_names[1], Contract);
      }
      if (hasUnderlying) {
        output.WriteString(3, field_names[11], Underlying);
      }
      if (hasSymbol) {
        output.WriteString(4, field_names[10], Symbol);
      }
      if (hasDescription) {
        output.WriteString(5, field_names[3], Description);
      }
      if (hasAllowTrading) {
        output.WriteBool(6, field_names[0], AllowTrading);
      }
      if (hasQuantity) {
        output.WriteInt32(7, field_names[8], Quantity);
      }
      if (hasDepth) {
        output.WriteInt32(8, field_names[2], Depth);
      }
      if (hasSpread) {
        output.WriteFloat(9, field_names[9], Spread);
      }
      if (hasOffset) {
        output.WriteFloat(10, field_names[6], Offset);
      }
      if (hasEnabled) {
        output.WriteBool(11, field_names[4], Enabled);
      }
      if (weightContract_.Count > 0) {
        output.WriteMessageArray(12, field_names[12], weightContract_);
      }
      if (params_.Count > 0) {
        output.WriteMessageArray(13, field_names[7], params_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contract);
        }
        if (hasUnderlying) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Underlying);
        }
        if (hasSymbol) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Symbol);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Description);
        }
        if (hasAllowTrading) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, AllowTrading);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Quantity);
        }
        if (hasDepth) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Depth);
        }
        if (hasSpread) {
          size += pb::CodedOutputStream.ComputeFloatSize(9, Spread);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, Offset);
        }
        if (hasEnabled) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, Enabled);
        }
        foreach (global::Micro.Future.Message.Business.PBStrategyWeight element in WeightContractList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        foreach (global::Micro.Future.Message.Business.PBParam element in ParamsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBStrategy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBStrategy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBStrategy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBStrategy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBStrategy MakeReadOnly() {
      weightContract_.MakeReadOnly();
      params_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBStrategy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBStrategy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBStrategy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBStrategy result;
      
      private PBStrategy PrepareBuilder() {
        if (resultIsReadOnly) {
          PBStrategy original = result;
          result = new PBStrategy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBStrategy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBStrategy.Descriptor; }
      }
      
      public override PBStrategy DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBStrategy.DefaultInstance; }
      }
      
      public override PBStrategy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBStrategy) {
          return MergeFrom((PBStrategy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBStrategy other) {
        if (other == global::Micro.Future.Message.Business.PBStrategy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasUnderlying) {
          Underlying = other.Underlying;
        }
        if (other.HasSymbol) {
          Symbol = other.Symbol;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasAllowTrading) {
          AllowTrading = other.AllowTrading;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasDepth) {
          Depth = other.Depth;
        }
        if (other.HasSpread) {
          Spread = other.Spread;
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasEnabled) {
          Enabled = other.Enabled;
        }
        if (other.weightContract_.Count != 0) {
          result.weightContract_.Add(other.weightContract_);
        }
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBStrategyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBStrategyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 18: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 26: {
              result.hasUnderlying = input.ReadString(ref result.underlying_);
              break;
            }
            case 34: {
              result.hasSymbol = input.ReadString(ref result.symbol_);
              break;
            }
            case 42: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 48: {
              result.hasAllowTrading = input.ReadBool(ref result.allowTrading_);
              break;
            }
            case 56: {
              result.hasQuantity = input.ReadInt32(ref result.quantity_);
              break;
            }
            case 64: {
              result.hasDepth = input.ReadInt32(ref result.depth_);
              break;
            }
            case 77: {
              result.hasSpread = input.ReadFloat(ref result.spread_);
              break;
            }
            case 85: {
              result.hasOffset = input.ReadFloat(ref result.offset_);
              break;
            }
            case 88: {
              result.hasEnabled = input.ReadBool(ref result.enabled_);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.weightContract_, global::Micro.Future.Message.Business.PBStrategyWeight.DefaultInstance, extensionRegistry);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.params_, global::Micro.Future.Message.Business.PBParam.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasUnderlying {
        get { return result.hasUnderlying; }
      }
      public string Underlying {
        get { return result.Underlying; }
        set { SetUnderlying(value); }
      }
      public Builder SetUnderlying(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUnderlying = true;
        result.underlying_ = value;
        return this;
      }
      public Builder ClearUnderlying() {
        PrepareBuilder();
        result.hasUnderlying = false;
        result.underlying_ = "";
        return this;
      }
      
      public bool HasSymbol {
        get { return result.hasSymbol; }
      }
      public string Symbol {
        get { return result.Symbol; }
        set { SetSymbol(value); }
      }
      public Builder SetSymbol(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSymbol = true;
        result.symbol_ = value;
        return this;
      }
      public Builder ClearSymbol() {
        PrepareBuilder();
        result.hasSymbol = false;
        result.symbol_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasAllowTrading {
        get { return result.hasAllowTrading; }
      }
      public bool AllowTrading {
        get { return result.AllowTrading; }
        set { SetAllowTrading(value); }
      }
      public Builder SetAllowTrading(bool value) {
        PrepareBuilder();
        result.hasAllowTrading = true;
        result.allowTrading_ = value;
        return this;
      }
      public Builder ClearAllowTrading() {
        PrepareBuilder();
        result.hasAllowTrading = false;
        result.allowTrading_ = false;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public int Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(int value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0;
        return this;
      }
      
      public bool HasDepth {
        get { return result.hasDepth; }
      }
      public int Depth {
        get { return result.Depth; }
        set { SetDepth(value); }
      }
      public Builder SetDepth(int value) {
        PrepareBuilder();
        result.hasDepth = true;
        result.depth_ = value;
        return this;
      }
      public Builder ClearDepth() {
        PrepareBuilder();
        result.hasDepth = false;
        result.depth_ = 0;
        return this;
      }
      
      public bool HasSpread {
        get { return result.hasSpread; }
      }
      public float Spread {
        get { return result.Spread; }
        set { SetSpread(value); }
      }
      public Builder SetSpread(float value) {
        PrepareBuilder();
        result.hasSpread = true;
        result.spread_ = value;
        return this;
      }
      public Builder ClearSpread() {
        PrepareBuilder();
        result.hasSpread = false;
        result.spread_ = 0F;
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public float Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(float value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0F;
        return this;
      }
      
      public bool HasEnabled {
        get { return result.hasEnabled; }
      }
      public bool Enabled {
        get { return result.Enabled; }
        set { SetEnabled(value); }
      }
      public Builder SetEnabled(bool value) {
        PrepareBuilder();
        result.hasEnabled = true;
        result.enabled_ = value;
        return this;
      }
      public Builder ClearEnabled() {
        PrepareBuilder();
        result.hasEnabled = false;
        result.enabled_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBStrategyWeight> WeightContractList {
        get { return PrepareBuilder().weightContract_; }
      }
      public int WeightContractCount {
        get { return result.WeightContractCount; }
      }
      public global::Micro.Future.Message.Business.PBStrategyWeight GetWeightContract(int index) {
        return result.GetWeightContract(index);
      }
      public Builder SetWeightContract(int index, global::Micro.Future.Message.Business.PBStrategyWeight value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.weightContract_[index] = value;
        return this;
      }
      public Builder SetWeightContract(int index, global::Micro.Future.Message.Business.PBStrategyWeight.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.weightContract_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWeightContract(global::Micro.Future.Message.Business.PBStrategyWeight value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.weightContract_.Add(value);
        return this;
      }
      public Builder AddWeightContract(global::Micro.Future.Message.Business.PBStrategyWeight.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.weightContract_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWeightContract(scg::IEnumerable<global::Micro.Future.Message.Business.PBStrategyWeight> values) {
        PrepareBuilder();
        result.weightContract_.Add(values);
        return this;
      }
      public Builder ClearWeightContract() {
        PrepareBuilder();
        result.weightContract_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBParam> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public global::Micro.Future.Message.Business.PBParam GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<global::Micro.Future.Message.Business.PBParam> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
    static PBStrategy() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBStrategyList : pb::GeneratedMessage<PBStrategyList, PBStrategyList.Builder> {
    private PBStrategyList() { }
    private static readonly PBStrategyList defaultInstance = new PBStrategyList().MakeReadOnly();
    private static readonly string[] _pBStrategyListFieldNames = new string[] { "strategy" };
    private static readonly uint[] _pBStrategyListFieldTags = new uint[] { 10 };
    public static PBStrategyList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBStrategyList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBStrategyList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategyList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBStrategyList, PBStrategyList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBStrategyList__FieldAccessorTable; }
    }
    
    public const int StrategyFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBStrategy> strategy_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBStrategy>();
    public scg::IList<global::Micro.Future.Message.Business.PBStrategy> StrategyList {
      get { return strategy_; }
    }
    public int StrategyCount {
      get { return strategy_.Count; }
    }
    public global::Micro.Future.Message.Business.PBStrategy GetStrategy(int index) {
      return strategy_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBStrategy element in StrategyList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBStrategyListFieldNames;
      if (strategy_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], strategy_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBStrategy element in StrategyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBStrategyList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBStrategyList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBStrategyList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBStrategyList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBStrategyList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBStrategyList MakeReadOnly() {
      strategy_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBStrategyList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBStrategyList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBStrategyList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBStrategyList result;
      
      private PBStrategyList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBStrategyList original = result;
          result = new PBStrategyList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBStrategyList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBStrategyList.Descriptor; }
      }
      
      public override PBStrategyList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBStrategyList.DefaultInstance; }
      }
      
      public override PBStrategyList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBStrategyList) {
          return MergeFrom((PBStrategyList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBStrategyList other) {
        if (other == global::Micro.Future.Message.Business.PBStrategyList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.strategy_.Count != 0) {
          result.strategy_.Add(other.strategy_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBStrategyListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBStrategyListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.strategy_, global::Micro.Future.Message.Business.PBStrategy.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBStrategy> StrategyList {
        get { return PrepareBuilder().strategy_; }
      }
      public int StrategyCount {
        get { return result.StrategyCount; }
      }
      public global::Micro.Future.Message.Business.PBStrategy GetStrategy(int index) {
        return result.GetStrategy(index);
      }
      public Builder SetStrategy(int index, global::Micro.Future.Message.Business.PBStrategy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.strategy_[index] = value;
        return this;
      }
      public Builder SetStrategy(int index, global::Micro.Future.Message.Business.PBStrategy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.strategy_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStrategy(global::Micro.Future.Message.Business.PBStrategy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.strategy_.Add(value);
        return this;
      }
      public Builder AddStrategy(global::Micro.Future.Message.Business.PBStrategy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.strategy_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStrategy(scg::IEnumerable<global::Micro.Future.Message.Business.PBStrategy> values) {
        PrepareBuilder();
        result.strategy_.Add(values);
        return this;
      }
      public Builder ClearStrategy() {
        PrepareBuilder();
        result.strategy_.Clear();
        return this;
      }
    }
    static PBStrategyList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBContractParam : pb::GeneratedMessage<PBContractParam, PBContractParam.Builder> {
    private PBContractParam() { }
    private static readonly PBContractParam defaultInstance = new PBContractParam().MakeReadOnly();
    private static readonly string[] _pBContractParamFieldNames = new string[] { "contract", "depthVol", "exchange", "gamma" };
    private static readonly uint[] _pBContractParamFieldTags = new uint[] { 18, 24, 10, 37 };
    public static PBContractParam DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBContractParam DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBContractParam ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBContractParam__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBContractParam, PBContractParam.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBContractParam__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 1;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 2;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int DepthVolFieldNumber = 3;
    private bool hasDepthVol;
    private int depthVol_;
    public bool HasDepthVol {
      get { return hasDepthVol; }
    }
    public int DepthVol {
      get { return depthVol_; }
    }
    
    public const int GammaFieldNumber = 4;
    private bool hasGamma;
    private float gamma_;
    public bool HasGamma {
      get { return hasGamma; }
    }
    public float Gamma {
      get { return gamma_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBContractParamFieldNames;
      if (hasExchange) {
        output.WriteString(1, field_names[2], Exchange);
      }
      if (hasContract) {
        output.WriteString(2, field_names[0], Contract);
      }
      if (hasDepthVol) {
        output.WriteInt32(3, field_names[1], DepthVol);
      }
      if (hasGamma) {
        output.WriteFloat(4, field_names[3], Gamma);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contract);
        }
        if (hasDepthVol) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, DepthVol);
        }
        if (hasGamma) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Gamma);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBContractParam ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContractParam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContractParam ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContractParam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContractParam ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContractParam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBContractParam ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBContractParam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBContractParam ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContractParam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBContractParam MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBContractParam prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBContractParam, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBContractParam cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBContractParam result;
      
      private PBContractParam PrepareBuilder() {
        if (resultIsReadOnly) {
          PBContractParam original = result;
          result = new PBContractParam();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBContractParam MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBContractParam.Descriptor; }
      }
      
      public override PBContractParam DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBContractParam.DefaultInstance; }
      }
      
      public override PBContractParam BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBContractParam) {
          return MergeFrom((PBContractParam) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBContractParam other) {
        if (other == global::Micro.Future.Message.Business.PBContractParam.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasDepthVol) {
          DepthVol = other.DepthVol;
        }
        if (other.HasGamma) {
          Gamma = other.Gamma;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBContractParamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBContractParamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 18: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 24: {
              result.hasDepthVol = input.ReadInt32(ref result.depthVol_);
              break;
            }
            case 37: {
              result.hasGamma = input.ReadFloat(ref result.gamma_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasDepthVol {
        get { return result.hasDepthVol; }
      }
      public int DepthVol {
        get { return result.DepthVol; }
        set { SetDepthVol(value); }
      }
      public Builder SetDepthVol(int value) {
        PrepareBuilder();
        result.hasDepthVol = true;
        result.depthVol_ = value;
        return this;
      }
      public Builder ClearDepthVol() {
        PrepareBuilder();
        result.hasDepthVol = false;
        result.depthVol_ = 0;
        return this;
      }
      
      public bool HasGamma {
        get { return result.hasGamma; }
      }
      public float Gamma {
        get { return result.Gamma; }
        set { SetGamma(value); }
      }
      public Builder SetGamma(float value) {
        PrepareBuilder();
        result.hasGamma = true;
        result.gamma_ = value;
        return this;
      }
      public Builder ClearGamma() {
        PrepareBuilder();
        result.hasGamma = false;
        result.gamma_ = 0F;
        return this;
      }
    }
    static PBContractParam() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBContractParamList : pb::GeneratedMessage<PBContractParamList, PBContractParamList.Builder> {
    private PBContractParamList() { }
    private static readonly PBContractParamList defaultInstance = new PBContractParamList().MakeReadOnly();
    private static readonly string[] _pBContractParamListFieldNames = new string[] { "params" };
    private static readonly uint[] _pBContractParamListFieldTags = new uint[] { 10 };
    public static PBContractParamList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBContractParamList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBContractParamList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBContractParamList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBContractParamList, PBContractParamList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBContractParamList__FieldAccessorTable; }
    }
    
    public const int ParamsFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBContractParam> params_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBContractParam>();
    public scg::IList<global::Micro.Future.Message.Business.PBContractParam> ParamsList {
      get { return params_; }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public global::Micro.Future.Message.Business.PBContractParam GetParams(int index) {
      return params_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBContractParam element in ParamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBContractParamListFieldNames;
      if (params_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], params_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBContractParam element in ParamsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBContractParamList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBContractParamList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBContractParamList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBContractParamList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContractParamList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBContractParamList MakeReadOnly() {
      params_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBContractParamList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBContractParamList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBContractParamList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBContractParamList result;
      
      private PBContractParamList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBContractParamList original = result;
          result = new PBContractParamList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBContractParamList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBContractParamList.Descriptor; }
      }
      
      public override PBContractParamList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBContractParamList.DefaultInstance; }
      }
      
      public override PBContractParamList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBContractParamList) {
          return MergeFrom((PBContractParamList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBContractParamList other) {
        if (other == global::Micro.Future.Message.Business.PBContractParamList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBContractParamListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBContractParamListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.params_, global::Micro.Future.Message.Business.PBContractParam.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBContractParam> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public global::Micro.Future.Message.Business.PBContractParam GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBContractParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBContractParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBContractParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBContractParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<global::Micro.Future.Message.Business.PBContractParam> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
    static PBContractParamList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOTCUserParam : pb::GeneratedMessage<PBOTCUserParam, PBOTCUserParam.Builder> {
    private PBOTCUserParam() { }
    private static readonly PBOTCUserParam defaultInstance = new PBOTCUserParam().MakeReadOnly();
    private static readonly string[] _pBOTCUserParamFieldNames = new string[] { "contract", "exchange", "quantity" };
    private static readonly uint[] _pBOTCUserParamFieldTags = new uint[] { 18, 10, 29 };
    public static PBOTCUserParam DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOTCUserParam DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOTCUserParam ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOTCUserParam__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOTCUserParam, PBOTCUserParam.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOTCUserParam__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 1;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 2;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int QuantityFieldNumber = 3;
    private bool hasQuantity;
    private float quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public float Quantity {
      get { return quantity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        if (!hasQuantity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOTCUserParamFieldNames;
      if (hasExchange) {
        output.WriteString(1, field_names[1], Exchange);
      }
      if (hasContract) {
        output.WriteString(2, field_names[0], Contract);
      }
      if (hasQuantity) {
        output.WriteFloat(3, field_names[2], Quantity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contract);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Quantity);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOTCUserParam ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParam ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOTCUserParam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOTCUserParam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOTCUserParam MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOTCUserParam prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOTCUserParam, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOTCUserParam cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOTCUserParam result;
      
      private PBOTCUserParam PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOTCUserParam original = result;
          result = new PBOTCUserParam();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOTCUserParam MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBOTCUserParam.Descriptor; }
      }
      
      public override PBOTCUserParam DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBOTCUserParam.DefaultInstance; }
      }
      
      public override PBOTCUserParam BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOTCUserParam) {
          return MergeFrom((PBOTCUserParam) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOTCUserParam other) {
        if (other == global::Micro.Future.Message.Business.PBOTCUserParam.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOTCUserParamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOTCUserParamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 18: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 29: {
              result.hasQuantity = input.ReadFloat(ref result.quantity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public float Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(float value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0F;
        return this;
      }
    }
    static PBOTCUserParam() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOTCUserParamList : pb::GeneratedMessage<PBOTCUserParamList, PBOTCUserParamList.Builder> {
    private PBOTCUserParamList() { }
    private static readonly PBOTCUserParamList defaultInstance = new PBOTCUserParamList().MakeReadOnly();
    private static readonly string[] _pBOTCUserParamListFieldNames = new string[] { "params" };
    private static readonly uint[] _pBOTCUserParamListFieldTags = new uint[] { 10 };
    public static PBOTCUserParamList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOTCUserParamList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOTCUserParamList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOTCUserParamList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOTCUserParamList, PBOTCUserParamList.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOTCUserParamList__FieldAccessorTable; }
    }
    
    public const int ParamsFieldNumber = 1;
    private pbc::PopsicleList<global::Micro.Future.Message.Business.PBOTCUserParam> params_ = new pbc::PopsicleList<global::Micro.Future.Message.Business.PBOTCUserParam>();
    public scg::IList<global::Micro.Future.Message.Business.PBOTCUserParam> ParamsList {
      get { return params_; }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public global::Micro.Future.Message.Business.PBOTCUserParam GetParams(int index) {
      return params_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Micro.Future.Message.Business.PBOTCUserParam element in ParamsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOTCUserParamListFieldNames;
      if (params_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], params_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Micro.Future.Message.Business.PBOTCUserParam element in ParamsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOTCUserParamList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOTCUserParamList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOTCUserParamList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOTCUserParamList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOTCUserParamList MakeReadOnly() {
      params_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOTCUserParamList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOTCUserParamList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOTCUserParamList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOTCUserParamList result;
      
      private PBOTCUserParamList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOTCUserParamList original = result;
          result = new PBOTCUserParamList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOTCUserParamList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBOTCUserParamList.Descriptor; }
      }
      
      public override PBOTCUserParamList DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBOTCUserParamList.DefaultInstance; }
      }
      
      public override PBOTCUserParamList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOTCUserParamList) {
          return MergeFrom((PBOTCUserParamList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOTCUserParamList other) {
        if (other == global::Micro.Future.Message.Business.PBOTCUserParamList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOTCUserParamListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOTCUserParamListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.params_, global::Micro.Future.Message.Business.PBOTCUserParam.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Micro.Future.Message.Business.PBOTCUserParam> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public global::Micro.Future.Message.Business.PBOTCUserParam GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBOTCUserParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder SetParams(int index, global::Micro.Future.Message.Business.PBOTCUserParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBOTCUserParam value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddParams(global::Micro.Future.Message.Business.PBOTCUserParam.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.params_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<global::Micro.Future.Message.Business.PBOTCUserParam> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
    static PBOTCUserParamList() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOrderInfo : pb::GeneratedMessage<PBOrderInfo, PBOrderInfo.Builder> {
    private PBOrderInfo() { }
    private static readonly PBOrderInfo defaultInstance = new PBOrderInfo().MakeReadOnly();
    private static readonly string[] _pBOrderInfoFieldNames = new string[] { "active", "brokerID", "cancelTime", "contract", "direction", "exchange", "execType", "insertTime", "investorID", "limitPrice", "openclose", "orderID", "orderStatus", "orderSysID", "orderType", "stopPrice", "tif", "tradingDay", "tradingType", "updateTime", "volume", "volumeCondition", "volumeRemain", "volumeTraded" };
    private static readonly uint[] _pBOrderInfoFieldTags = new uint[] { 192, 26, 154, 50, 80, 42, 56, 138, 34, 89, 200, 8, 104, 16, 112, 97, 64, 184, 72, 146, 120, 176, 168, 160 };
    public static PBOrderInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOrderInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOrderInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOrderInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOrderInfo, PBOrderInfo.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBOrderInfo__FieldAccessorTable; }
    }
    
    public const int OrderIDFieldNumber = 1;
    private bool hasOrderID;
    private ulong orderID_;
    public bool HasOrderID {
      get { return hasOrderID; }
    }
    public ulong OrderID {
      get { return orderID_; }
    }
    
    public const int OrderSysIDFieldNumber = 2;
    private bool hasOrderSysID;
    private ulong orderSysID_;
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public ulong OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int BrokerIDFieldNumber = 3;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 4;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int ExchangeFieldNumber = 5;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 6;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int ExecTypeFieldNumber = 7;
    private bool hasExecType;
    private int execType_;
    public bool HasExecType {
      get { return hasExecType; }
    }
    public int ExecType {
      get { return execType_; }
    }
    
    public const int TifFieldNumber = 8;
    private bool hasTif;
    private int tif_;
    public bool HasTif {
      get { return hasTif; }
    }
    public int Tif {
      get { return tif_; }
    }
    
    public const int TradingTypeFieldNumber = 9;
    private bool hasTradingType;
    private int tradingType_;
    public bool HasTradingType {
      get { return hasTradingType; }
    }
    public int TradingType {
      get { return tradingType_; }
    }
    
    public const int DirectionFieldNumber = 10;
    private bool hasDirection;
    private int direction_;
    public bool HasDirection {
      get { return hasDirection; }
    }
    public int Direction {
      get { return direction_; }
    }
    
    public const int LimitPriceFieldNumber = 11;
    private bool hasLimitPrice;
    private double limitPrice_;
    public bool HasLimitPrice {
      get { return hasLimitPrice; }
    }
    public double LimitPrice {
      get { return limitPrice_; }
    }
    
    public const int StopPriceFieldNumber = 12;
    private bool hasStopPrice;
    private double stopPrice_;
    public bool HasStopPrice {
      get { return hasStopPrice; }
    }
    public double StopPrice {
      get { return stopPrice_; }
    }
    
    public const int OrderStatusFieldNumber = 13;
    private bool hasOrderStatus;
    private int orderStatus_;
    public bool HasOrderStatus {
      get { return hasOrderStatus; }
    }
    public int OrderStatus {
      get { return orderStatus_; }
    }
    
    public const int OrderTypeFieldNumber = 14;
    private bool hasOrderType;
    private int orderType_;
    public bool HasOrderType {
      get { return hasOrderType; }
    }
    public int OrderType {
      get { return orderType_; }
    }
    
    public const int VolumeFieldNumber = 15;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int InsertTimeFieldNumber = 17;
    private bool hasInsertTime;
    private string insertTime_ = "";
    public bool HasInsertTime {
      get { return hasInsertTime; }
    }
    public string InsertTime {
      get { return insertTime_; }
    }
    
    public const int UpdateTimeFieldNumber = 18;
    private bool hasUpdateTime;
    private string updateTime_ = "";
    public bool HasUpdateTime {
      get { return hasUpdateTime; }
    }
    public string UpdateTime {
      get { return updateTime_; }
    }
    
    public const int CancelTimeFieldNumber = 19;
    private bool hasCancelTime;
    private string cancelTime_ = "";
    public bool HasCancelTime {
      get { return hasCancelTime; }
    }
    public string CancelTime {
      get { return cancelTime_; }
    }
    
    public const int VolumeTradedFieldNumber = 20;
    private bool hasVolumeTraded;
    private int volumeTraded_;
    public bool HasVolumeTraded {
      get { return hasVolumeTraded; }
    }
    public int VolumeTraded {
      get { return volumeTraded_; }
    }
    
    public const int VolumeRemainFieldNumber = 21;
    private bool hasVolumeRemain;
    private int volumeRemain_;
    public bool HasVolumeRemain {
      get { return hasVolumeRemain; }
    }
    public int VolumeRemain {
      get { return volumeRemain_; }
    }
    
    public const int VolumeConditionFieldNumber = 22;
    private bool hasVolumeCondition;
    private int volumeCondition_;
    public bool HasVolumeCondition {
      get { return hasVolumeCondition; }
    }
    public int VolumeCondition {
      get { return volumeCondition_; }
    }
    
    public const int TradingDayFieldNumber = 23;
    private bool hasTradingDay;
    private int tradingDay_;
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public int TradingDay {
      get { return tradingDay_; }
    }
    
    public const int ActiveFieldNumber = 24;
    private bool hasActive;
    private bool active_;
    public bool HasActive {
      get { return hasActive; }
    }
    public bool Active {
      get { return active_; }
    }
    
    public const int OpencloseFieldNumber = 25;
    private bool hasOpenclose;
    private int openclose_;
    public bool HasOpenclose {
      get { return hasOpenclose; }
    }
    public int Openclose {
      get { return openclose_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOrderInfoFieldNames;
      if (hasOrderID) {
        output.WriteUInt64(1, field_names[11], OrderID);
      }
      if (hasOrderSysID) {
        output.WriteUInt64(2, field_names[13], OrderSysID);
      }
      if (hasBrokerID) {
        output.WriteString(3, field_names[1], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(4, field_names[8], InvestorID);
      }
      if (hasExchange) {
        output.WriteString(5, field_names[5], Exchange);
      }
      if (hasContract) {
        output.WriteString(6, field_names[3], Contract);
      }
      if (hasExecType) {
        output.WriteInt32(7, field_names[6], ExecType);
      }
      if (hasTif) {
        output.WriteInt32(8, field_names[16], Tif);
      }
      if (hasTradingType) {
        output.WriteInt32(9, field_names[18], TradingType);
      }
      if (hasDirection) {
        output.WriteInt32(10, field_names[4], Direction);
      }
      if (hasLimitPrice) {
        output.WriteDouble(11, field_names[9], LimitPrice);
      }
      if (hasStopPrice) {
        output.WriteDouble(12, field_names[15], StopPrice);
      }
      if (hasOrderStatus) {
        output.WriteInt32(13, field_names[12], OrderStatus);
      }
      if (hasOrderType) {
        output.WriteInt32(14, field_names[14], OrderType);
      }
      if (hasVolume) {
        output.WriteInt32(15, field_names[20], Volume);
      }
      if (hasInsertTime) {
        output.WriteString(17, field_names[7], InsertTime);
      }
      if (hasUpdateTime) {
        output.WriteString(18, field_names[19], UpdateTime);
      }
      if (hasCancelTime) {
        output.WriteString(19, field_names[2], CancelTime);
      }
      if (hasVolumeTraded) {
        output.WriteInt32(20, field_names[23], VolumeTraded);
      }
      if (hasVolumeRemain) {
        output.WriteInt32(21, field_names[22], VolumeRemain);
      }
      if (hasVolumeCondition) {
        output.WriteInt32(22, field_names[21], VolumeCondition);
      }
      if (hasTradingDay) {
        output.WriteInt32(23, field_names[17], TradingDay);
      }
      if (hasActive) {
        output.WriteBool(24, field_names[0], Active);
      }
      if (hasOpenclose) {
        output.WriteInt32(25, field_names[10], Openclose);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, OrderID);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, OrderSysID);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, InvestorID);
        }
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Contract);
        }
        if (hasExecType) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ExecType);
        }
        if (hasTif) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Tif);
        }
        if (hasTradingType) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, TradingType);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Direction);
        }
        if (hasLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, LimitPrice);
        }
        if (hasStopPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, StopPrice);
        }
        if (hasOrderStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, OrderStatus);
        }
        if (hasOrderType) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, OrderType);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, Volume);
        }
        if (hasInsertTime) {
          size += pb::CodedOutputStream.ComputeStringSize(17, InsertTime);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(18, UpdateTime);
        }
        if (hasCancelTime) {
          size += pb::CodedOutputStream.ComputeStringSize(19, CancelTime);
        }
        if (hasVolumeTraded) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, VolumeTraded);
        }
        if (hasVolumeRemain) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, VolumeRemain);
        }
        if (hasVolumeCondition) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, VolumeCondition);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, TradingDay);
        }
        if (hasActive) {
          size += pb::CodedOutputStream.ComputeBoolSize(24, Active);
        }
        if (hasOpenclose) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, Openclose);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOrderInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOrderInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOrderInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOrderInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOrderInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOrderInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOrderInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOrderInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOrderInfo result;
      
      private PBOrderInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOrderInfo original = result;
          result = new PBOrderInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOrderInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBOrderInfo.Descriptor; }
      }
      
      public override PBOrderInfo DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBOrderInfo.DefaultInstance; }
      }
      
      public override PBOrderInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOrderInfo) {
          return MergeFrom((PBOrderInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOrderInfo other) {
        if (other == global::Micro.Future.Message.Business.PBOrderInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOrderID) {
          OrderID = other.OrderID;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasExecType) {
          ExecType = other.ExecType;
        }
        if (other.HasTif) {
          Tif = other.Tif;
        }
        if (other.HasTradingType) {
          TradingType = other.TradingType;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasLimitPrice) {
          LimitPrice = other.LimitPrice;
        }
        if (other.HasStopPrice) {
          StopPrice = other.StopPrice;
        }
        if (other.HasOrderStatus) {
          OrderStatus = other.OrderStatus;
        }
        if (other.HasOrderType) {
          OrderType = other.OrderType;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasInsertTime) {
          InsertTime = other.InsertTime;
        }
        if (other.HasUpdateTime) {
          UpdateTime = other.UpdateTime;
        }
        if (other.HasCancelTime) {
          CancelTime = other.CancelTime;
        }
        if (other.HasVolumeTraded) {
          VolumeTraded = other.VolumeTraded;
        }
        if (other.HasVolumeRemain) {
          VolumeRemain = other.VolumeRemain;
        }
        if (other.HasVolumeCondition) {
          VolumeCondition = other.VolumeCondition;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasActive) {
          Active = other.Active;
        }
        if (other.HasOpenclose) {
          Openclose = other.Openclose;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOrderInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOrderInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOrderID = input.ReadUInt64(ref result.orderID_);
              break;
            }
            case 16: {
              result.hasOrderSysID = input.ReadUInt64(ref result.orderSysID_);
              break;
            }
            case 26: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 34: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 42: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 50: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 56: {
              result.hasExecType = input.ReadInt32(ref result.execType_);
              break;
            }
            case 64: {
              result.hasTif = input.ReadInt32(ref result.tif_);
              break;
            }
            case 72: {
              result.hasTradingType = input.ReadInt32(ref result.tradingType_);
              break;
            }
            case 80: {
              result.hasDirection = input.ReadInt32(ref result.direction_);
              break;
            }
            case 89: {
              result.hasLimitPrice = input.ReadDouble(ref result.limitPrice_);
              break;
            }
            case 97: {
              result.hasStopPrice = input.ReadDouble(ref result.stopPrice_);
              break;
            }
            case 104: {
              result.hasOrderStatus = input.ReadInt32(ref result.orderStatus_);
              break;
            }
            case 112: {
              result.hasOrderType = input.ReadInt32(ref result.orderType_);
              break;
            }
            case 120: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 138: {
              result.hasInsertTime = input.ReadString(ref result.insertTime_);
              break;
            }
            case 146: {
              result.hasUpdateTime = input.ReadString(ref result.updateTime_);
              break;
            }
            case 154: {
              result.hasCancelTime = input.ReadString(ref result.cancelTime_);
              break;
            }
            case 160: {
              result.hasVolumeTraded = input.ReadInt32(ref result.volumeTraded_);
              break;
            }
            case 168: {
              result.hasVolumeRemain = input.ReadInt32(ref result.volumeRemain_);
              break;
            }
            case 176: {
              result.hasVolumeCondition = input.ReadInt32(ref result.volumeCondition_);
              break;
            }
            case 184: {
              result.hasTradingDay = input.ReadInt32(ref result.tradingDay_);
              break;
            }
            case 192: {
              result.hasActive = input.ReadBool(ref result.active_);
              break;
            }
            case 200: {
              result.hasOpenclose = input.ReadInt32(ref result.openclose_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOrderID {
        get { return result.hasOrderID; }
      }
      public ulong OrderID {
        get { return result.OrderID; }
        set { SetOrderID(value); }
      }
      public Builder SetOrderID(ulong value) {
        PrepareBuilder();
        result.hasOrderID = true;
        result.orderID_ = value;
        return this;
      }
      public Builder ClearOrderID() {
        PrepareBuilder();
        result.hasOrderID = false;
        result.orderID_ = 0UL;
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public ulong OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(ulong value) {
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = 0UL;
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasExecType {
        get { return result.hasExecType; }
      }
      public int ExecType {
        get { return result.ExecType; }
        set { SetExecType(value); }
      }
      public Builder SetExecType(int value) {
        PrepareBuilder();
        result.hasExecType = true;
        result.execType_ = value;
        return this;
      }
      public Builder ClearExecType() {
        PrepareBuilder();
        result.hasExecType = false;
        result.execType_ = 0;
        return this;
      }
      
      public bool HasTif {
        get { return result.hasTif; }
      }
      public int Tif {
        get { return result.Tif; }
        set { SetTif(value); }
      }
      public Builder SetTif(int value) {
        PrepareBuilder();
        result.hasTif = true;
        result.tif_ = value;
        return this;
      }
      public Builder ClearTif() {
        PrepareBuilder();
        result.hasTif = false;
        result.tif_ = 0;
        return this;
      }
      
      public bool HasTradingType {
        get { return result.hasTradingType; }
      }
      public int TradingType {
        get { return result.TradingType; }
        set { SetTradingType(value); }
      }
      public Builder SetTradingType(int value) {
        PrepareBuilder();
        result.hasTradingType = true;
        result.tradingType_ = value;
        return this;
      }
      public Builder ClearTradingType() {
        PrepareBuilder();
        result.hasTradingType = false;
        result.tradingType_ = 0;
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = 0;
        return this;
      }
      
      public bool HasLimitPrice {
        get { return result.hasLimitPrice; }
      }
      public double LimitPrice {
        get { return result.LimitPrice; }
        set { SetLimitPrice(value); }
      }
      public Builder SetLimitPrice(double value) {
        PrepareBuilder();
        result.hasLimitPrice = true;
        result.limitPrice_ = value;
        return this;
      }
      public Builder ClearLimitPrice() {
        PrepareBuilder();
        result.hasLimitPrice = false;
        result.limitPrice_ = 0D;
        return this;
      }
      
      public bool HasStopPrice {
        get { return result.hasStopPrice; }
      }
      public double StopPrice {
        get { return result.StopPrice; }
        set { SetStopPrice(value); }
      }
      public Builder SetStopPrice(double value) {
        PrepareBuilder();
        result.hasStopPrice = true;
        result.stopPrice_ = value;
        return this;
      }
      public Builder ClearStopPrice() {
        PrepareBuilder();
        result.hasStopPrice = false;
        result.stopPrice_ = 0D;
        return this;
      }
      
      public bool HasOrderStatus {
        get { return result.hasOrderStatus; }
      }
      public int OrderStatus {
        get { return result.OrderStatus; }
        set { SetOrderStatus(value); }
      }
      public Builder SetOrderStatus(int value) {
        PrepareBuilder();
        result.hasOrderStatus = true;
        result.orderStatus_ = value;
        return this;
      }
      public Builder ClearOrderStatus() {
        PrepareBuilder();
        result.hasOrderStatus = false;
        result.orderStatus_ = 0;
        return this;
      }
      
      public bool HasOrderType {
        get { return result.hasOrderType; }
      }
      public int OrderType {
        get { return result.OrderType; }
        set { SetOrderType(value); }
      }
      public Builder SetOrderType(int value) {
        PrepareBuilder();
        result.hasOrderType = true;
        result.orderType_ = value;
        return this;
      }
      public Builder ClearOrderType() {
        PrepareBuilder();
        result.hasOrderType = false;
        result.orderType_ = 0;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasInsertTime {
        get { return result.hasInsertTime; }
      }
      public string InsertTime {
        get { return result.InsertTime; }
        set { SetInsertTime(value); }
      }
      public Builder SetInsertTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInsertTime = true;
        result.insertTime_ = value;
        return this;
      }
      public Builder ClearInsertTime() {
        PrepareBuilder();
        result.hasInsertTime = false;
        result.insertTime_ = "";
        return this;
      }
      
      public bool HasUpdateTime {
        get { return result.hasUpdateTime; }
      }
      public string UpdateTime {
        get { return result.UpdateTime; }
        set { SetUpdateTime(value); }
      }
      public Builder SetUpdateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdateTime = true;
        result.updateTime_ = value;
        return this;
      }
      public Builder ClearUpdateTime() {
        PrepareBuilder();
        result.hasUpdateTime = false;
        result.updateTime_ = "";
        return this;
      }
      
      public bool HasCancelTime {
        get { return result.hasCancelTime; }
      }
      public string CancelTime {
        get { return result.CancelTime; }
        set { SetCancelTime(value); }
      }
      public Builder SetCancelTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCancelTime = true;
        result.cancelTime_ = value;
        return this;
      }
      public Builder ClearCancelTime() {
        PrepareBuilder();
        result.hasCancelTime = false;
        result.cancelTime_ = "";
        return this;
      }
      
      public bool HasVolumeTraded {
        get { return result.hasVolumeTraded; }
      }
      public int VolumeTraded {
        get { return result.VolumeTraded; }
        set { SetVolumeTraded(value); }
      }
      public Builder SetVolumeTraded(int value) {
        PrepareBuilder();
        result.hasVolumeTraded = true;
        result.volumeTraded_ = value;
        return this;
      }
      public Builder ClearVolumeTraded() {
        PrepareBuilder();
        result.hasVolumeTraded = false;
        result.volumeTraded_ = 0;
        return this;
      }
      
      public bool HasVolumeRemain {
        get { return result.hasVolumeRemain; }
      }
      public int VolumeRemain {
        get { return result.VolumeRemain; }
        set { SetVolumeRemain(value); }
      }
      public Builder SetVolumeRemain(int value) {
        PrepareBuilder();
        result.hasVolumeRemain = true;
        result.volumeRemain_ = value;
        return this;
      }
      public Builder ClearVolumeRemain() {
        PrepareBuilder();
        result.hasVolumeRemain = false;
        result.volumeRemain_ = 0;
        return this;
      }
      
      public bool HasVolumeCondition {
        get { return result.hasVolumeCondition; }
      }
      public int VolumeCondition {
        get { return result.VolumeCondition; }
        set { SetVolumeCondition(value); }
      }
      public Builder SetVolumeCondition(int value) {
        PrepareBuilder();
        result.hasVolumeCondition = true;
        result.volumeCondition_ = value;
        return this;
      }
      public Builder ClearVolumeCondition() {
        PrepareBuilder();
        result.hasVolumeCondition = false;
        result.volumeCondition_ = 0;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public int TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(int value) {
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = 0;
        return this;
      }
      
      public bool HasActive {
        get { return result.hasActive; }
      }
      public bool Active {
        get { return result.Active; }
        set { SetActive(value); }
      }
      public Builder SetActive(bool value) {
        PrepareBuilder();
        result.hasActive = true;
        result.active_ = value;
        return this;
      }
      public Builder ClearActive() {
        PrepareBuilder();
        result.hasActive = false;
        result.active_ = false;
        return this;
      }
      
      public bool HasOpenclose {
        get { return result.hasOpenclose; }
      }
      public int Openclose {
        get { return result.Openclose; }
        set { SetOpenclose(value); }
      }
      public Builder SetOpenclose(int value) {
        PrepareBuilder();
        result.hasOpenclose = true;
        result.openclose_ = value;
        return this;
      }
      public Builder ClearOpenclose() {
        PrepareBuilder();
        result.hasOpenclose = false;
        result.openclose_ = 0;
        return this;
      }
    }
    static PBOrderInfo() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBTradeNotification : pb::GeneratedMessage<PBTradeNotification, PBTradeNotification.Builder> {
    private PBTradeNotification() { }
    private static readonly PBTradeNotification defaultInstance = new PBTradeNotification().MakeReadOnly();
    private static readonly string[] _pBTradeNotificationFieldNames = new string[] { "brokerID", "contract", "direction", "exchange", "investorID", "orderID", "orderSysID", "price", "tradeDate", "tradeID", "tradeTime", "tradeType", "userID", "volume" };
    private static readonly uint[] _pBTradeNotificationFieldTags = new uint[] { 18, 42, 64, 34, 26, 8, 72, 81, 98, 56, 106, 112, 50, 88 };
    public static PBTradeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBTradeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBTradeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBTradeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBTradeNotification, PBTradeNotification.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBTradeNotification__FieldAccessorTable; }
    }
    
    public const int OrderIDFieldNumber = 1;
    private bool hasOrderID;
    private ulong orderID_;
    public bool HasOrderID {
      get { return hasOrderID; }
    }
    public ulong OrderID {
      get { return orderID_; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int InvestorIDFieldNumber = 3;
    private bool hasInvestorID;
    private string investorID_ = "";
    public bool HasInvestorID {
      get { return hasInvestorID; }
    }
    public string InvestorID {
      get { return investorID_; }
    }
    
    public const int ExchangeFieldNumber = 4;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 5;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int UserIDFieldNumber = 6;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int TradeIDFieldNumber = 7;
    private bool hasTradeID;
    private ulong tradeID_;
    public bool HasTradeID {
      get { return hasTradeID; }
    }
    public ulong TradeID {
      get { return tradeID_; }
    }
    
    public const int DirectionFieldNumber = 8;
    private bool hasDirection;
    private int direction_;
    public bool HasDirection {
      get { return hasDirection; }
    }
    public int Direction {
      get { return direction_; }
    }
    
    public const int OrderSysIDFieldNumber = 9;
    private bool hasOrderSysID;
    private ulong orderSysID_;
    public bool HasOrderSysID {
      get { return hasOrderSysID; }
    }
    public ulong OrderSysID {
      get { return orderSysID_; }
    }
    
    public const int PriceFieldNumber = 10;
    private bool hasPrice;
    private double price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public const int VolumeFieldNumber = 11;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int TradeDateFieldNumber = 12;
    private bool hasTradeDate;
    private string tradeDate_ = "";
    public bool HasTradeDate {
      get { return hasTradeDate; }
    }
    public string TradeDate {
      get { return tradeDate_; }
    }
    
    public const int TradeTimeFieldNumber = 13;
    private bool hasTradeTime;
    private string tradeTime_ = "";
    public bool HasTradeTime {
      get { return hasTradeTime; }
    }
    public string TradeTime {
      get { return tradeTime_; }
    }
    
    public const int TradeTypeFieldNumber = 14;
    private bool hasTradeType;
    private int tradeType_;
    public bool HasTradeType {
      get { return hasTradeType; }
    }
    public int TradeType {
      get { return tradeType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOrderID) return false;
        if (!hasOrderSysID) return false;
        if (!hasPrice) return false;
        if (!hasVolume) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBTradeNotificationFieldNames;
      if (hasOrderID) {
        output.WriteUInt64(1, field_names[5], OrderID);
      }
      if (hasBrokerID) {
        output.WriteString(2, field_names[0], BrokerID);
      }
      if (hasInvestorID) {
        output.WriteString(3, field_names[4], InvestorID);
      }
      if (hasExchange) {
        output.WriteString(4, field_names[3], Exchange);
      }
      if (hasContract) {
        output.WriteString(5, field_names[1], Contract);
      }
      if (hasUserID) {
        output.WriteString(6, field_names[12], UserID);
      }
      if (hasTradeID) {
        output.WriteUInt64(7, field_names[9], TradeID);
      }
      if (hasDirection) {
        output.WriteInt32(8, field_names[2], Direction);
      }
      if (hasOrderSysID) {
        output.WriteUInt64(9, field_names[6], OrderSysID);
      }
      if (hasPrice) {
        output.WriteDouble(10, field_names[7], Price);
      }
      if (hasVolume) {
        output.WriteInt32(11, field_names[13], Volume);
      }
      if (hasTradeDate) {
        output.WriteString(12, field_names[8], TradeDate);
      }
      if (hasTradeTime) {
        output.WriteString(13, field_names[10], TradeTime);
      }
      if (hasTradeType) {
        output.WriteInt32(14, field_names[11], TradeType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, OrderID);
        }
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasInvestorID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InvestorID);
        }
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Contract);
        }
        if (hasUserID) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserID);
        }
        if (hasTradeID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, TradeID);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Direction);
        }
        if (hasOrderSysID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, OrderSysID);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, Price);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Volume);
        }
        if (hasTradeDate) {
          size += pb::CodedOutputStream.ComputeStringSize(12, TradeDate);
        }
        if (hasTradeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(13, TradeTime);
        }
        if (hasTradeType) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, TradeType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBTradeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBTradeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBTradeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBTradeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBTradeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBTradeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBTradeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBTradeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBTradeNotification result;
      
      private PBTradeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          PBTradeNotification original = result;
          result = new PBTradeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBTradeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBTradeNotification.Descriptor; }
      }
      
      public override PBTradeNotification DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBTradeNotification.DefaultInstance; }
      }
      
      public override PBTradeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBTradeNotification) {
          return MergeFrom((PBTradeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBTradeNotification other) {
        if (other == global::Micro.Future.Message.Business.PBTradeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOrderID) {
          OrderID = other.OrderID;
        }
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasInvestorID) {
          InvestorID = other.InvestorID;
        }
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasTradeID) {
          TradeID = other.TradeID;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasOrderSysID) {
          OrderSysID = other.OrderSysID;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasTradeDate) {
          TradeDate = other.TradeDate;
        }
        if (other.HasTradeTime) {
          TradeTime = other.TradeTime;
        }
        if (other.HasTradeType) {
          TradeType = other.TradeType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBTradeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBTradeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOrderID = input.ReadUInt64(ref result.orderID_);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasInvestorID = input.ReadString(ref result.investorID_);
              break;
            }
            case 34: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 42: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 50: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 56: {
              result.hasTradeID = input.ReadUInt64(ref result.tradeID_);
              break;
            }
            case 64: {
              result.hasDirection = input.ReadInt32(ref result.direction_);
              break;
            }
            case 72: {
              result.hasOrderSysID = input.ReadUInt64(ref result.orderSysID_);
              break;
            }
            case 81: {
              result.hasPrice = input.ReadDouble(ref result.price_);
              break;
            }
            case 88: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 98: {
              result.hasTradeDate = input.ReadString(ref result.tradeDate_);
              break;
            }
            case 106: {
              result.hasTradeTime = input.ReadString(ref result.tradeTime_);
              break;
            }
            case 112: {
              result.hasTradeType = input.ReadInt32(ref result.tradeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOrderID {
        get { return result.hasOrderID; }
      }
      public ulong OrderID {
        get { return result.OrderID; }
        set { SetOrderID(value); }
      }
      public Builder SetOrderID(ulong value) {
        PrepareBuilder();
        result.hasOrderID = true;
        result.orderID_ = value;
        return this;
      }
      public Builder ClearOrderID() {
        PrepareBuilder();
        result.hasOrderID = false;
        result.orderID_ = 0UL;
        return this;
      }
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasInvestorID {
        get { return result.hasInvestorID; }
      }
      public string InvestorID {
        get { return result.InvestorID; }
        set { SetInvestorID(value); }
      }
      public Builder SetInvestorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvestorID = true;
        result.investorID_ = value;
        return this;
      }
      public Builder ClearInvestorID() {
        PrepareBuilder();
        result.hasInvestorID = false;
        result.investorID_ = "";
        return this;
      }
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasTradeID {
        get { return result.hasTradeID; }
      }
      public ulong TradeID {
        get { return result.TradeID; }
        set { SetTradeID(value); }
      }
      public Builder SetTradeID(ulong value) {
        PrepareBuilder();
        result.hasTradeID = true;
        result.tradeID_ = value;
        return this;
      }
      public Builder ClearTradeID() {
        PrepareBuilder();
        result.hasTradeID = false;
        result.tradeID_ = 0UL;
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = 0;
        return this;
      }
      
      public bool HasOrderSysID {
        get { return result.hasOrderSysID; }
      }
      public ulong OrderSysID {
        get { return result.OrderSysID; }
        set { SetOrderSysID(value); }
      }
      public Builder SetOrderSysID(ulong value) {
        PrepareBuilder();
        result.hasOrderSysID = true;
        result.orderSysID_ = value;
        return this;
      }
      public Builder ClearOrderSysID() {
        PrepareBuilder();
        result.hasOrderSysID = false;
        result.orderSysID_ = 0UL;
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasTradeDate {
        get { return result.hasTradeDate; }
      }
      public string TradeDate {
        get { return result.TradeDate; }
        set { SetTradeDate(value); }
      }
      public Builder SetTradeDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeDate = true;
        result.tradeDate_ = value;
        return this;
      }
      public Builder ClearTradeDate() {
        PrepareBuilder();
        result.hasTradeDate = false;
        result.tradeDate_ = "";
        return this;
      }
      
      public bool HasTradeTime {
        get { return result.hasTradeTime; }
      }
      public string TradeTime {
        get { return result.TradeTime; }
        set { SetTradeTime(value); }
      }
      public Builder SetTradeTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeTime = true;
        result.tradeTime_ = value;
        return this;
      }
      public Builder ClearTradeTime() {
        PrepareBuilder();
        result.hasTradeTime = false;
        result.tradeTime_ = "";
        return this;
      }
      
      public bool HasTradeType {
        get { return result.hasTradeType; }
      }
      public int TradeType {
        get { return result.TradeType; }
        set { SetTradeType(value); }
      }
      public Builder SetTradeType(int value) {
        PrepareBuilder();
        result.hasTradeType = true;
        result.tradeType_ = value;
        return this;
      }
      public Builder ClearTradeType() {
        PrepareBuilder();
        result.hasTradeType = false;
        result.tradeType_ = 0;
        return this;
      }
    }
    static PBTradeNotification() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPosition : pb::GeneratedMessage<PBPosition, PBPosition.Builder> {
    private PBPosition() { }
    private static readonly PBPosition defaultInstance = new PBPosition().MakeReadOnly();
    private static readonly string[] _pBPositionFieldNames = new string[] { "closeAmount", "closeProfit", "closeVolume", "contract", "cost", "direction", "exchange", "hedgeFlag", "openAmount", "openCost", "openVolume", "position", "positionDate", "profit", "useMargin", "ydPosition" };
    private static readonly uint[] _pBPositionFieldTags = new uint[] { 81, 113, 64, 18, 89, 24, 10, 128, 73, 97, 56, 40, 50, 105, 121, 32 };
    public static PBPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPosition, PBPosition.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBPosition__FieldAccessorTable; }
    }
    
    public const int ExchangeFieldNumber = 1;
    private bool hasExchange;
    private string exchange_ = "";
    public bool HasExchange {
      get { return hasExchange; }
    }
    public string Exchange {
      get { return exchange_; }
    }
    
    public const int ContractFieldNumber = 2;
    private bool hasContract;
    private string contract_ = "";
    public bool HasContract {
      get { return hasContract; }
    }
    public string Contract {
      get { return contract_; }
    }
    
    public const int DirectionFieldNumber = 3;
    private bool hasDirection;
    private int direction_;
    public bool HasDirection {
      get { return hasDirection; }
    }
    public int Direction {
      get { return direction_; }
    }
    
    public const int PositionFieldNumber = 5;
    private bool hasPosition;
    private int position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public int Position {
      get { return position_; }
    }
    
    public const int YdPositionFieldNumber = 4;
    private bool hasYdPosition;
    private int ydPosition_;
    public bool HasYdPosition {
      get { return hasYdPosition; }
    }
    public int YdPosition {
      get { return ydPosition_; }
    }
    
    public const int PositionDateFieldNumber = 6;
    private bool hasPositionDate;
    private string positionDate_ = "";
    public bool HasPositionDate {
      get { return hasPositionDate; }
    }
    public string PositionDate {
      get { return positionDate_; }
    }
    
    public const int OpenVolumeFieldNumber = 7;
    private bool hasOpenVolume;
    private int openVolume_;
    public bool HasOpenVolume {
      get { return hasOpenVolume; }
    }
    public int OpenVolume {
      get { return openVolume_; }
    }
    
    public const int CloseVolumeFieldNumber = 8;
    private bool hasCloseVolume;
    private int closeVolume_;
    public bool HasCloseVolume {
      get { return hasCloseVolume; }
    }
    public int CloseVolume {
      get { return closeVolume_; }
    }
    
    public const int OpenAmountFieldNumber = 9;
    private bool hasOpenAmount;
    private double openAmount_;
    public bool HasOpenAmount {
      get { return hasOpenAmount; }
    }
    public double OpenAmount {
      get { return openAmount_; }
    }
    
    public const int CloseAmountFieldNumber = 10;
    private bool hasCloseAmount;
    private double closeAmount_;
    public bool HasCloseAmount {
      get { return hasCloseAmount; }
    }
    public double CloseAmount {
      get { return closeAmount_; }
    }
    
    public const int CostFieldNumber = 11;
    private bool hasCost;
    private double cost_;
    public bool HasCost {
      get { return hasCost; }
    }
    public double Cost {
      get { return cost_; }
    }
    
    public const int OpenCostFieldNumber = 12;
    private bool hasOpenCost;
    private double openCost_;
    public bool HasOpenCost {
      get { return hasOpenCost; }
    }
    public double OpenCost {
      get { return openCost_; }
    }
    
    public const int ProfitFieldNumber = 13;
    private bool hasProfit;
    private double profit_;
    public bool HasProfit {
      get { return hasProfit; }
    }
    public double Profit {
      get { return profit_; }
    }
    
    public const int CloseProfitFieldNumber = 14;
    private bool hasCloseProfit;
    private double closeProfit_;
    public bool HasCloseProfit {
      get { return hasCloseProfit; }
    }
    public double CloseProfit {
      get { return closeProfit_; }
    }
    
    public const int UseMarginFieldNumber = 15;
    private bool hasUseMargin;
    private double useMargin_;
    public bool HasUseMargin {
      get { return hasUseMargin; }
    }
    public double UseMargin {
      get { return useMargin_; }
    }
    
    public const int HedgeFlagFieldNumber = 16;
    private bool hasHedgeFlag;
    private int hedgeFlag_;
    public bool HasHedgeFlag {
      get { return hasHedgeFlag; }
    }
    public int HedgeFlag {
      get { return hedgeFlag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasExchange) return false;
        if (!hasContract) return false;
        if (!hasDirection) return false;
        if (!hasPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPositionFieldNames;
      if (hasExchange) {
        output.WriteString(1, field_names[6], Exchange);
      }
      if (hasContract) {
        output.WriteString(2, field_names[3], Contract);
      }
      if (hasDirection) {
        output.WriteInt32(3, field_names[5], Direction);
      }
      if (hasYdPosition) {
        output.WriteInt32(4, field_names[15], YdPosition);
      }
      if (hasPosition) {
        output.WriteInt32(5, field_names[11], Position);
      }
      if (hasPositionDate) {
        output.WriteString(6, field_names[12], PositionDate);
      }
      if (hasOpenVolume) {
        output.WriteInt32(7, field_names[10], OpenVolume);
      }
      if (hasCloseVolume) {
        output.WriteInt32(8, field_names[2], CloseVolume);
      }
      if (hasOpenAmount) {
        output.WriteDouble(9, field_names[8], OpenAmount);
      }
      if (hasCloseAmount) {
        output.WriteDouble(10, field_names[0], CloseAmount);
      }
      if (hasCost) {
        output.WriteDouble(11, field_names[4], Cost);
      }
      if (hasOpenCost) {
        output.WriteDouble(12, field_names[9], OpenCost);
      }
      if (hasProfit) {
        output.WriteDouble(13, field_names[13], Profit);
      }
      if (hasCloseProfit) {
        output.WriteDouble(14, field_names[1], CloseProfit);
      }
      if (hasUseMargin) {
        output.WriteDouble(15, field_names[14], UseMargin);
      }
      if (hasHedgeFlag) {
        output.WriteInt32(16, field_names[7], HedgeFlag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExchange) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exchange);
        }
        if (hasContract) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Contract);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Direction);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Position);
        }
        if (hasYdPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, YdPosition);
        }
        if (hasPositionDate) {
          size += pb::CodedOutputStream.ComputeStringSize(6, PositionDate);
        }
        if (hasOpenVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, OpenVolume);
        }
        if (hasCloseVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, CloseVolume);
        }
        if (hasOpenAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, OpenAmount);
        }
        if (hasCloseAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, CloseAmount);
        }
        if (hasCost) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Cost);
        }
        if (hasOpenCost) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, OpenCost);
        }
        if (hasProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Profit);
        }
        if (hasCloseProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, CloseProfit);
        }
        if (hasUseMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, UseMargin);
        }
        if (hasHedgeFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, HedgeFlag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPosition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPosition result;
      
      private PBPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPosition original = result;
          result = new PBPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBPosition.Descriptor; }
      }
      
      public override PBPosition DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBPosition.DefaultInstance; }
      }
      
      public override PBPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPosition) {
          return MergeFrom((PBPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPosition other) {
        if (other == global::Micro.Future.Message.Business.PBPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExchange) {
          Exchange = other.Exchange;
        }
        if (other.HasContract) {
          Contract = other.Contract;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        if (other.HasPosition) {
          Position = other.Position;
        }
        if (other.HasYdPosition) {
          YdPosition = other.YdPosition;
        }
        if (other.HasPositionDate) {
          PositionDate = other.PositionDate;
        }
        if (other.HasOpenVolume) {
          OpenVolume = other.OpenVolume;
        }
        if (other.HasCloseVolume) {
          CloseVolume = other.CloseVolume;
        }
        if (other.HasOpenAmount) {
          OpenAmount = other.OpenAmount;
        }
        if (other.HasCloseAmount) {
          CloseAmount = other.CloseAmount;
        }
        if (other.HasCost) {
          Cost = other.Cost;
        }
        if (other.HasOpenCost) {
          OpenCost = other.OpenCost;
        }
        if (other.HasProfit) {
          Profit = other.Profit;
        }
        if (other.HasCloseProfit) {
          CloseProfit = other.CloseProfit;
        }
        if (other.HasUseMargin) {
          UseMargin = other.UseMargin;
        }
        if (other.HasHedgeFlag) {
          HedgeFlag = other.HedgeFlag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExchange = input.ReadString(ref result.exchange_);
              break;
            }
            case 18: {
              result.hasContract = input.ReadString(ref result.contract_);
              break;
            }
            case 24: {
              result.hasDirection = input.ReadInt32(ref result.direction_);
              break;
            }
            case 32: {
              result.hasYdPosition = input.ReadInt32(ref result.ydPosition_);
              break;
            }
            case 40: {
              result.hasPosition = input.ReadInt32(ref result.position_);
              break;
            }
            case 50: {
              result.hasPositionDate = input.ReadString(ref result.positionDate_);
              break;
            }
            case 56: {
              result.hasOpenVolume = input.ReadInt32(ref result.openVolume_);
              break;
            }
            case 64: {
              result.hasCloseVolume = input.ReadInt32(ref result.closeVolume_);
              break;
            }
            case 73: {
              result.hasOpenAmount = input.ReadDouble(ref result.openAmount_);
              break;
            }
            case 81: {
              result.hasCloseAmount = input.ReadDouble(ref result.closeAmount_);
              break;
            }
            case 89: {
              result.hasCost = input.ReadDouble(ref result.cost_);
              break;
            }
            case 97: {
              result.hasOpenCost = input.ReadDouble(ref result.openCost_);
              break;
            }
            case 105: {
              result.hasProfit = input.ReadDouble(ref result.profit_);
              break;
            }
            case 113: {
              result.hasCloseProfit = input.ReadDouble(ref result.closeProfit_);
              break;
            }
            case 121: {
              result.hasUseMargin = input.ReadDouble(ref result.useMargin_);
              break;
            }
            case 128: {
              result.hasHedgeFlag = input.ReadInt32(ref result.hedgeFlag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExchange {
        get { return result.hasExchange; }
      }
      public string Exchange {
        get { return result.Exchange; }
        set { SetExchange(value); }
      }
      public Builder SetExchange(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchange = true;
        result.exchange_ = value;
        return this;
      }
      public Builder ClearExchange() {
        PrepareBuilder();
        result.hasExchange = false;
        result.exchange_ = "";
        return this;
      }
      
      public bool HasContract {
        get { return result.hasContract; }
      }
      public string Contract {
        get { return result.Contract; }
        set { SetContract(value); }
      }
      public Builder SetContract(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContract = true;
        result.contract_ = value;
        return this;
      }
      public Builder ClearContract() {
        PrepareBuilder();
        result.hasContract = false;
        result.contract_ = "";
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = 0;
        return this;
      }
      
      public bool HasPosition {
        get { return result.hasPosition; }
      }
      public int Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(int value) {
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = 0;
        return this;
      }
      
      public bool HasYdPosition {
        get { return result.hasYdPosition; }
      }
      public int YdPosition {
        get { return result.YdPosition; }
        set { SetYdPosition(value); }
      }
      public Builder SetYdPosition(int value) {
        PrepareBuilder();
        result.hasYdPosition = true;
        result.ydPosition_ = value;
        return this;
      }
      public Builder ClearYdPosition() {
        PrepareBuilder();
        result.hasYdPosition = false;
        result.ydPosition_ = 0;
        return this;
      }
      
      public bool HasPositionDate {
        get { return result.hasPositionDate; }
      }
      public string PositionDate {
        get { return result.PositionDate; }
        set { SetPositionDate(value); }
      }
      public Builder SetPositionDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionDate = true;
        result.positionDate_ = value;
        return this;
      }
      public Builder ClearPositionDate() {
        PrepareBuilder();
        result.hasPositionDate = false;
        result.positionDate_ = "";
        return this;
      }
      
      public bool HasOpenVolume {
        get { return result.hasOpenVolume; }
      }
      public int OpenVolume {
        get { return result.OpenVolume; }
        set { SetOpenVolume(value); }
      }
      public Builder SetOpenVolume(int value) {
        PrepareBuilder();
        result.hasOpenVolume = true;
        result.openVolume_ = value;
        return this;
      }
      public Builder ClearOpenVolume() {
        PrepareBuilder();
        result.hasOpenVolume = false;
        result.openVolume_ = 0;
        return this;
      }
      
      public bool HasCloseVolume {
        get { return result.hasCloseVolume; }
      }
      public int CloseVolume {
        get { return result.CloseVolume; }
        set { SetCloseVolume(value); }
      }
      public Builder SetCloseVolume(int value) {
        PrepareBuilder();
        result.hasCloseVolume = true;
        result.closeVolume_ = value;
        return this;
      }
      public Builder ClearCloseVolume() {
        PrepareBuilder();
        result.hasCloseVolume = false;
        result.closeVolume_ = 0;
        return this;
      }
      
      public bool HasOpenAmount {
        get { return result.hasOpenAmount; }
      }
      public double OpenAmount {
        get { return result.OpenAmount; }
        set { SetOpenAmount(value); }
      }
      public Builder SetOpenAmount(double value) {
        PrepareBuilder();
        result.hasOpenAmount = true;
        result.openAmount_ = value;
        return this;
      }
      public Builder ClearOpenAmount() {
        PrepareBuilder();
        result.hasOpenAmount = false;
        result.openAmount_ = 0D;
        return this;
      }
      
      public bool HasCloseAmount {
        get { return result.hasCloseAmount; }
      }
      public double CloseAmount {
        get { return result.CloseAmount; }
        set { SetCloseAmount(value); }
      }
      public Builder SetCloseAmount(double value) {
        PrepareBuilder();
        result.hasCloseAmount = true;
        result.closeAmount_ = value;
        return this;
      }
      public Builder ClearCloseAmount() {
        PrepareBuilder();
        result.hasCloseAmount = false;
        result.closeAmount_ = 0D;
        return this;
      }
      
      public bool HasCost {
        get { return result.hasCost; }
      }
      public double Cost {
        get { return result.Cost; }
        set { SetCost(value); }
      }
      public Builder SetCost(double value) {
        PrepareBuilder();
        result.hasCost = true;
        result.cost_ = value;
        return this;
      }
      public Builder ClearCost() {
        PrepareBuilder();
        result.hasCost = false;
        result.cost_ = 0D;
        return this;
      }
      
      public bool HasOpenCost {
        get { return result.hasOpenCost; }
      }
      public double OpenCost {
        get { return result.OpenCost; }
        set { SetOpenCost(value); }
      }
      public Builder SetOpenCost(double value) {
        PrepareBuilder();
        result.hasOpenCost = true;
        result.openCost_ = value;
        return this;
      }
      public Builder ClearOpenCost() {
        PrepareBuilder();
        result.hasOpenCost = false;
        result.openCost_ = 0D;
        return this;
      }
      
      public bool HasProfit {
        get { return result.hasProfit; }
      }
      public double Profit {
        get { return result.Profit; }
        set { SetProfit(value); }
      }
      public Builder SetProfit(double value) {
        PrepareBuilder();
        result.hasProfit = true;
        result.profit_ = value;
        return this;
      }
      public Builder ClearProfit() {
        PrepareBuilder();
        result.hasProfit = false;
        result.profit_ = 0D;
        return this;
      }
      
      public bool HasCloseProfit {
        get { return result.hasCloseProfit; }
      }
      public double CloseProfit {
        get { return result.CloseProfit; }
        set { SetCloseProfit(value); }
      }
      public Builder SetCloseProfit(double value) {
        PrepareBuilder();
        result.hasCloseProfit = true;
        result.closeProfit_ = value;
        return this;
      }
      public Builder ClearCloseProfit() {
        PrepareBuilder();
        result.hasCloseProfit = false;
        result.closeProfit_ = 0D;
        return this;
      }
      
      public bool HasUseMargin {
        get { return result.hasUseMargin; }
      }
      public double UseMargin {
        get { return result.UseMargin; }
        set { SetUseMargin(value); }
      }
      public Builder SetUseMargin(double value) {
        PrepareBuilder();
        result.hasUseMargin = true;
        result.useMargin_ = value;
        return this;
      }
      public Builder ClearUseMargin() {
        PrepareBuilder();
        result.hasUseMargin = false;
        result.useMargin_ = 0D;
        return this;
      }
      
      public bool HasHedgeFlag {
        get { return result.hasHedgeFlag; }
      }
      public int HedgeFlag {
        get { return result.HedgeFlag; }
        set { SetHedgeFlag(value); }
      }
      public Builder SetHedgeFlag(int value) {
        PrepareBuilder();
        result.hasHedgeFlag = true;
        result.hedgeFlag_ = value;
        return this;
      }
      public Builder ClearHedgeFlag() {
        PrepareBuilder();
        result.hasHedgeFlag = false;
        result.hedgeFlag_ = 0;
        return this;
      }
    }
    static PBPosition() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBAccountInfo : pb::GeneratedMessage<PBAccountInfo, PBAccountInfo.Builder> {
    private PBAccountInfo() { }
    private static readonly PBAccountInfo defaultInstance = new PBAccountInfo().MakeReadOnly();
    private static readonly string[] _pBAccountInfoFieldNames = new string[] { "AccountID", "Available", "Balance", "BrokerID", "CashIn", "CloseProfit", "Commission", "Credit", "CurrMargin", "DeliveryMargin", "Deposit", "ExchangeDeliveryMargin", "ExchangeMargin", "FrozenCash", "FrozenCommission", "FrozenMargin", "Interest", "InterestBase", "Mortgage", "PositionProfit", "PreBalance", "PreCredit", "PreDeposit", "PreMargin", "PreMortgage", "Reserve", "ReserveBalance", "SettlementID", "TradingDay", "Withdraw", "WithdrawQuota" };
    private static readonly uint[] _pBAccountInfoFieldTags = new uint[] { 26, 177, 169, 18, 137, 153, 145, 217, 129, 241, 89, 249, 233, 113, 121, 105, 81, 73, 225, 161, 57, 41, 49, 65, 33, 193, 257, 208, 202, 97, 185 };
    public static PBAccountInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBAccountInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBAccountInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBAccountInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBAccountInfo, PBAccountInfo.Builder> InternalFieldAccessors {
      get { return global::Micro.Future.Message.Business.Generated.Businessobj.internal__static_Micro_Future_Message_Business_PBAccountInfo__FieldAccessorTable; }
    }
    
    public const int BrokerIDFieldNumber = 2;
    private bool hasBrokerID;
    private string brokerID_ = "";
    public bool HasBrokerID {
      get { return hasBrokerID; }
    }
    public string BrokerID {
      get { return brokerID_; }
    }
    
    public const int AccountIDFieldNumber = 3;
    private bool hasAccountID;
    private string accountID_ = "";
    public bool HasAccountID {
      get { return hasAccountID; }
    }
    public string AccountID {
      get { return accountID_; }
    }
    
    public const int PreMortgageFieldNumber = 4;
    private bool hasPreMortgage;
    private double preMortgage_;
    public bool HasPreMortgage {
      get { return hasPreMortgage; }
    }
    public double PreMortgage {
      get { return preMortgage_; }
    }
    
    public const int PreCreditFieldNumber = 5;
    private bool hasPreCredit;
    private double preCredit_;
    public bool HasPreCredit {
      get { return hasPreCredit; }
    }
    public double PreCredit {
      get { return preCredit_; }
    }
    
    public const int PreDepositFieldNumber = 6;
    private bool hasPreDeposit;
    private double preDeposit_;
    public bool HasPreDeposit {
      get { return hasPreDeposit; }
    }
    public double PreDeposit {
      get { return preDeposit_; }
    }
    
    public const int PreBalanceFieldNumber = 7;
    private bool hasPreBalance;
    private double preBalance_;
    public bool HasPreBalance {
      get { return hasPreBalance; }
    }
    public double PreBalance {
      get { return preBalance_; }
    }
    
    public const int PreMarginFieldNumber = 8;
    private bool hasPreMargin;
    private double preMargin_;
    public bool HasPreMargin {
      get { return hasPreMargin; }
    }
    public double PreMargin {
      get { return preMargin_; }
    }
    
    public const int InterestBaseFieldNumber = 9;
    private bool hasInterestBase;
    private double interestBase_;
    public bool HasInterestBase {
      get { return hasInterestBase; }
    }
    public double InterestBase {
      get { return interestBase_; }
    }
    
    public const int InterestFieldNumber = 10;
    private bool hasInterest;
    private double interest_;
    public bool HasInterest {
      get { return hasInterest; }
    }
    public double Interest {
      get { return interest_; }
    }
    
    public const int DepositFieldNumber = 11;
    private bool hasDeposit;
    private double deposit_;
    public bool HasDeposit {
      get { return hasDeposit; }
    }
    public double Deposit {
      get { return deposit_; }
    }
    
    public const int WithdrawFieldNumber = 12;
    private bool hasWithdraw;
    private double withdraw_;
    public bool HasWithdraw {
      get { return hasWithdraw; }
    }
    public double Withdraw {
      get { return withdraw_; }
    }
    
    public const int FrozenMarginFieldNumber = 13;
    private bool hasFrozenMargin;
    private double frozenMargin_;
    public bool HasFrozenMargin {
      get { return hasFrozenMargin; }
    }
    public double FrozenMargin {
      get { return frozenMargin_; }
    }
    
    public const int FrozenCashFieldNumber = 14;
    private bool hasFrozenCash;
    private double frozenCash_;
    public bool HasFrozenCash {
      get { return hasFrozenCash; }
    }
    public double FrozenCash {
      get { return frozenCash_; }
    }
    
    public const int FrozenCommissionFieldNumber = 15;
    private bool hasFrozenCommission;
    private double frozenCommission_;
    public bool HasFrozenCommission {
      get { return hasFrozenCommission; }
    }
    public double FrozenCommission {
      get { return frozenCommission_; }
    }
    
    public const int CurrMarginFieldNumber = 16;
    private bool hasCurrMargin;
    private double currMargin_;
    public bool HasCurrMargin {
      get { return hasCurrMargin; }
    }
    public double CurrMargin {
      get { return currMargin_; }
    }
    
    public const int CashInFieldNumber = 17;
    private bool hasCashIn;
    private double cashIn_;
    public bool HasCashIn {
      get { return hasCashIn; }
    }
    public double CashIn {
      get { return cashIn_; }
    }
    
    public const int CommissionFieldNumber = 18;
    private bool hasCommission;
    private double commission_;
    public bool HasCommission {
      get { return hasCommission; }
    }
    public double Commission {
      get { return commission_; }
    }
    
    public const int CloseProfitFieldNumber = 19;
    private bool hasCloseProfit;
    private double closeProfit_;
    public bool HasCloseProfit {
      get { return hasCloseProfit; }
    }
    public double CloseProfit {
      get { return closeProfit_; }
    }
    
    public const int PositionProfitFieldNumber = 20;
    private bool hasPositionProfit;
    private double positionProfit_;
    public bool HasPositionProfit {
      get { return hasPositionProfit; }
    }
    public double PositionProfit {
      get { return positionProfit_; }
    }
    
    public const int BalanceFieldNumber = 21;
    private bool hasBalance;
    private double balance_;
    public bool HasBalance {
      get { return hasBalance; }
    }
    public double Balance {
      get { return balance_; }
    }
    
    public const int AvailableFieldNumber = 22;
    private bool hasAvailable;
    private double available_;
    public bool HasAvailable {
      get { return hasAvailable; }
    }
    public double Available {
      get { return available_; }
    }
    
    public const int WithdrawQuotaFieldNumber = 23;
    private bool hasWithdrawQuota;
    private double withdrawQuota_;
    public bool HasWithdrawQuota {
      get { return hasWithdrawQuota; }
    }
    public double WithdrawQuota {
      get { return withdrawQuota_; }
    }
    
    public const int ReserveFieldNumber = 24;
    private bool hasReserve;
    private double reserve_;
    public bool HasReserve {
      get { return hasReserve; }
    }
    public double Reserve {
      get { return reserve_; }
    }
    
    public const int TradingDayFieldNumber = 25;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int SettlementIDFieldNumber = 26;
    private bool hasSettlementID;
    private int settlementID_;
    public bool HasSettlementID {
      get { return hasSettlementID; }
    }
    public int SettlementID {
      get { return settlementID_; }
    }
    
    public const int CreditFieldNumber = 27;
    private bool hasCredit;
    private double credit_;
    public bool HasCredit {
      get { return hasCredit; }
    }
    public double Credit {
      get { return credit_; }
    }
    
    public const int MortgageFieldNumber = 28;
    private bool hasMortgage;
    private double mortgage_;
    public bool HasMortgage {
      get { return hasMortgage; }
    }
    public double Mortgage {
      get { return mortgage_; }
    }
    
    public const int ExchangeMarginFieldNumber = 29;
    private bool hasExchangeMargin;
    private double exchangeMargin_;
    public bool HasExchangeMargin {
      get { return hasExchangeMargin; }
    }
    public double ExchangeMargin {
      get { return exchangeMargin_; }
    }
    
    public const int DeliveryMarginFieldNumber = 30;
    private bool hasDeliveryMargin;
    private double deliveryMargin_;
    public bool HasDeliveryMargin {
      get { return hasDeliveryMargin; }
    }
    public double DeliveryMargin {
      get { return deliveryMargin_; }
    }
    
    public const int ExchangeDeliveryMarginFieldNumber = 31;
    private bool hasExchangeDeliveryMargin;
    private double exchangeDeliveryMargin_;
    public bool HasExchangeDeliveryMargin {
      get { return hasExchangeDeliveryMargin; }
    }
    public double ExchangeDeliveryMargin {
      get { return exchangeDeliveryMargin_; }
    }
    
    public const int ReserveBalanceFieldNumber = 32;
    private bool hasReserveBalance;
    private double reserveBalance_;
    public bool HasReserveBalance {
      get { return hasReserveBalance; }
    }
    public double ReserveBalance {
      get { return reserveBalance_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBAccountInfoFieldNames;
      if (hasBrokerID) {
        output.WriteString(2, field_names[3], BrokerID);
      }
      if (hasAccountID) {
        output.WriteString(3, field_names[0], AccountID);
      }
      if (hasPreMortgage) {
        output.WriteDouble(4, field_names[24], PreMortgage);
      }
      if (hasPreCredit) {
        output.WriteDouble(5, field_names[21], PreCredit);
      }
      if (hasPreDeposit) {
        output.WriteDouble(6, field_names[22], PreDeposit);
      }
      if (hasPreBalance) {
        output.WriteDouble(7, field_names[20], PreBalance);
      }
      if (hasPreMargin) {
        output.WriteDouble(8, field_names[23], PreMargin);
      }
      if (hasInterestBase) {
        output.WriteDouble(9, field_names[17], InterestBase);
      }
      if (hasInterest) {
        output.WriteDouble(10, field_names[16], Interest);
      }
      if (hasDeposit) {
        output.WriteDouble(11, field_names[10], Deposit);
      }
      if (hasWithdraw) {
        output.WriteDouble(12, field_names[29], Withdraw);
      }
      if (hasFrozenMargin) {
        output.WriteDouble(13, field_names[15], FrozenMargin);
      }
      if (hasFrozenCash) {
        output.WriteDouble(14, field_names[13], FrozenCash);
      }
      if (hasFrozenCommission) {
        output.WriteDouble(15, field_names[14], FrozenCommission);
      }
      if (hasCurrMargin) {
        output.WriteDouble(16, field_names[8], CurrMargin);
      }
      if (hasCashIn) {
        output.WriteDouble(17, field_names[4], CashIn);
      }
      if (hasCommission) {
        output.WriteDouble(18, field_names[6], Commission);
      }
      if (hasCloseProfit) {
        output.WriteDouble(19, field_names[5], CloseProfit);
      }
      if (hasPositionProfit) {
        output.WriteDouble(20, field_names[19], PositionProfit);
      }
      if (hasBalance) {
        output.WriteDouble(21, field_names[2], Balance);
      }
      if (hasAvailable) {
        output.WriteDouble(22, field_names[1], Available);
      }
      if (hasWithdrawQuota) {
        output.WriteDouble(23, field_names[30], WithdrawQuota);
      }
      if (hasReserve) {
        output.WriteDouble(24, field_names[25], Reserve);
      }
      if (hasTradingDay) {
        output.WriteString(25, field_names[28], TradingDay);
      }
      if (hasSettlementID) {
        output.WriteInt32(26, field_names[27], SettlementID);
      }
      if (hasCredit) {
        output.WriteDouble(27, field_names[7], Credit);
      }
      if (hasMortgage) {
        output.WriteDouble(28, field_names[18], Mortgage);
      }
      if (hasExchangeMargin) {
        output.WriteDouble(29, field_names[12], ExchangeMargin);
      }
      if (hasDeliveryMargin) {
        output.WriteDouble(30, field_names[9], DeliveryMargin);
      }
      if (hasExchangeDeliveryMargin) {
        output.WriteDouble(31, field_names[11], ExchangeDeliveryMargin);
      }
      if (hasReserveBalance) {
        output.WriteDouble(32, field_names[26], ReserveBalance);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrokerID);
        }
        if (hasAccountID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AccountID);
        }
        if (hasPreMortgage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, PreMortgage);
        }
        if (hasPreCredit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, PreCredit);
        }
        if (hasPreDeposit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, PreDeposit);
        }
        if (hasPreBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, PreBalance);
        }
        if (hasPreMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, PreMargin);
        }
        if (hasInterestBase) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, InterestBase);
        }
        if (hasInterest) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, Interest);
        }
        if (hasDeposit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Deposit);
        }
        if (hasWithdraw) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, Withdraw);
        }
        if (hasFrozenMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, FrozenMargin);
        }
        if (hasFrozenCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, FrozenCash);
        }
        if (hasFrozenCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, FrozenCommission);
        }
        if (hasCurrMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, CurrMargin);
        }
        if (hasCashIn) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, CashIn);
        }
        if (hasCommission) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, Commission);
        }
        if (hasCloseProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, CloseProfit);
        }
        if (hasPositionProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, PositionProfit);
        }
        if (hasBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, Balance);
        }
        if (hasAvailable) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, Available);
        }
        if (hasWithdrawQuota) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, WithdrawQuota);
        }
        if (hasReserve) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, Reserve);
        }
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(25, TradingDay);
        }
        if (hasSettlementID) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, SettlementID);
        }
        if (hasCredit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, Credit);
        }
        if (hasMortgage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, Mortgage);
        }
        if (hasExchangeMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, ExchangeMargin);
        }
        if (hasDeliveryMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, DeliveryMargin);
        }
        if (hasExchangeDeliveryMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, ExchangeDeliveryMargin);
        }
        if (hasReserveBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, ReserveBalance);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBAccountInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBAccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBAccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBAccountInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBAccountInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBAccountInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBAccountInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBAccountInfo result;
      
      private PBAccountInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBAccountInfo original = result;
          result = new PBAccountInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBAccountInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Micro.Future.Message.Business.PBAccountInfo.Descriptor; }
      }
      
      public override PBAccountInfo DefaultInstanceForType {
        get { return global::Micro.Future.Message.Business.PBAccountInfo.DefaultInstance; }
      }
      
      public override PBAccountInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBAccountInfo) {
          return MergeFrom((PBAccountInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBAccountInfo other) {
        if (other == global::Micro.Future.Message.Business.PBAccountInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerID) {
          BrokerID = other.BrokerID;
        }
        if (other.HasAccountID) {
          AccountID = other.AccountID;
        }
        if (other.HasPreMortgage) {
          PreMortgage = other.PreMortgage;
        }
        if (other.HasPreCredit) {
          PreCredit = other.PreCredit;
        }
        if (other.HasPreDeposit) {
          PreDeposit = other.PreDeposit;
        }
        if (other.HasPreBalance) {
          PreBalance = other.PreBalance;
        }
        if (other.HasPreMargin) {
          PreMargin = other.PreMargin;
        }
        if (other.HasInterestBase) {
          InterestBase = other.InterestBase;
        }
        if (other.HasInterest) {
          Interest = other.Interest;
        }
        if (other.HasDeposit) {
          Deposit = other.Deposit;
        }
        if (other.HasWithdraw) {
          Withdraw = other.Withdraw;
        }
        if (other.HasFrozenMargin) {
          FrozenMargin = other.FrozenMargin;
        }
        if (other.HasFrozenCash) {
          FrozenCash = other.FrozenCash;
        }
        if (other.HasFrozenCommission) {
          FrozenCommission = other.FrozenCommission;
        }
        if (other.HasCurrMargin) {
          CurrMargin = other.CurrMargin;
        }
        if (other.HasCashIn) {
          CashIn = other.CashIn;
        }
        if (other.HasCommission) {
          Commission = other.Commission;
        }
        if (other.HasCloseProfit) {
          CloseProfit = other.CloseProfit;
        }
        if (other.HasPositionProfit) {
          PositionProfit = other.PositionProfit;
        }
        if (other.HasBalance) {
          Balance = other.Balance;
        }
        if (other.HasAvailable) {
          Available = other.Available;
        }
        if (other.HasWithdrawQuota) {
          WithdrawQuota = other.WithdrawQuota;
        }
        if (other.HasReserve) {
          Reserve = other.Reserve;
        }
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasSettlementID) {
          SettlementID = other.SettlementID;
        }
        if (other.HasCredit) {
          Credit = other.Credit;
        }
        if (other.HasMortgage) {
          Mortgage = other.Mortgage;
        }
        if (other.HasExchangeMargin) {
          ExchangeMargin = other.ExchangeMargin;
        }
        if (other.HasDeliveryMargin) {
          DeliveryMargin = other.DeliveryMargin;
        }
        if (other.HasExchangeDeliveryMargin) {
          ExchangeDeliveryMargin = other.ExchangeDeliveryMargin;
        }
        if (other.HasReserveBalance) {
          ReserveBalance = other.ReserveBalance;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBAccountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBAccountInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasBrokerID = input.ReadString(ref result.brokerID_);
              break;
            }
            case 26: {
              result.hasAccountID = input.ReadString(ref result.accountID_);
              break;
            }
            case 33: {
              result.hasPreMortgage = input.ReadDouble(ref result.preMortgage_);
              break;
            }
            case 41: {
              result.hasPreCredit = input.ReadDouble(ref result.preCredit_);
              break;
            }
            case 49: {
              result.hasPreDeposit = input.ReadDouble(ref result.preDeposit_);
              break;
            }
            case 57: {
              result.hasPreBalance = input.ReadDouble(ref result.preBalance_);
              break;
            }
            case 65: {
              result.hasPreMargin = input.ReadDouble(ref result.preMargin_);
              break;
            }
            case 73: {
              result.hasInterestBase = input.ReadDouble(ref result.interestBase_);
              break;
            }
            case 81: {
              result.hasInterest = input.ReadDouble(ref result.interest_);
              break;
            }
            case 89: {
              result.hasDeposit = input.ReadDouble(ref result.deposit_);
              break;
            }
            case 97: {
              result.hasWithdraw = input.ReadDouble(ref result.withdraw_);
              break;
            }
            case 105: {
              result.hasFrozenMargin = input.ReadDouble(ref result.frozenMargin_);
              break;
            }
            case 113: {
              result.hasFrozenCash = input.ReadDouble(ref result.frozenCash_);
              break;
            }
            case 121: {
              result.hasFrozenCommission = input.ReadDouble(ref result.frozenCommission_);
              break;
            }
            case 129: {
              result.hasCurrMargin = input.ReadDouble(ref result.currMargin_);
              break;
            }
            case 137: {
              result.hasCashIn = input.ReadDouble(ref result.cashIn_);
              break;
            }
            case 145: {
              result.hasCommission = input.ReadDouble(ref result.commission_);
              break;
            }
            case 153: {
              result.hasCloseProfit = input.ReadDouble(ref result.closeProfit_);
              break;
            }
            case 161: {
              result.hasPositionProfit = input.ReadDouble(ref result.positionProfit_);
              break;
            }
            case 169: {
              result.hasBalance = input.ReadDouble(ref result.balance_);
              break;
            }
            case 177: {
              result.hasAvailable = input.ReadDouble(ref result.available_);
              break;
            }
            case 185: {
              result.hasWithdrawQuota = input.ReadDouble(ref result.withdrawQuota_);
              break;
            }
            case 193: {
              result.hasReserve = input.ReadDouble(ref result.reserve_);
              break;
            }
            case 202: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 208: {
              result.hasSettlementID = input.ReadInt32(ref result.settlementID_);
              break;
            }
            case 217: {
              result.hasCredit = input.ReadDouble(ref result.credit_);
              break;
            }
            case 225: {
              result.hasMortgage = input.ReadDouble(ref result.mortgage_);
              break;
            }
            case 233: {
              result.hasExchangeMargin = input.ReadDouble(ref result.exchangeMargin_);
              break;
            }
            case 241: {
              result.hasDeliveryMargin = input.ReadDouble(ref result.deliveryMargin_);
              break;
            }
            case 249: {
              result.hasExchangeDeliveryMargin = input.ReadDouble(ref result.exchangeDeliveryMargin_);
              break;
            }
            case 257: {
              result.hasReserveBalance = input.ReadDouble(ref result.reserveBalance_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerID {
        get { return result.hasBrokerID; }
      }
      public string BrokerID {
        get { return result.BrokerID; }
        set { SetBrokerID(value); }
      }
      public Builder SetBrokerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerID = true;
        result.brokerID_ = value;
        return this;
      }
      public Builder ClearBrokerID() {
        PrepareBuilder();
        result.hasBrokerID = false;
        result.brokerID_ = "";
        return this;
      }
      
      public bool HasAccountID {
        get { return result.hasAccountID; }
      }
      public string AccountID {
        get { return result.AccountID; }
        set { SetAccountID(value); }
      }
      public Builder SetAccountID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountID = true;
        result.accountID_ = value;
        return this;
      }
      public Builder ClearAccountID() {
        PrepareBuilder();
        result.hasAccountID = false;
        result.accountID_ = "";
        return this;
      }
      
      public bool HasPreMortgage {
        get { return result.hasPreMortgage; }
      }
      public double PreMortgage {
        get { return result.PreMortgage; }
        set { SetPreMortgage(value); }
      }
      public Builder SetPreMortgage(double value) {
        PrepareBuilder();
        result.hasPreMortgage = true;
        result.preMortgage_ = value;
        return this;
      }
      public Builder ClearPreMortgage() {
        PrepareBuilder();
        result.hasPreMortgage = false;
        result.preMortgage_ = 0D;
        return this;
      }
      
      public bool HasPreCredit {
        get { return result.hasPreCredit; }
      }
      public double PreCredit {
        get { return result.PreCredit; }
        set { SetPreCredit(value); }
      }
      public Builder SetPreCredit(double value) {
        PrepareBuilder();
        result.hasPreCredit = true;
        result.preCredit_ = value;
        return this;
      }
      public Builder ClearPreCredit() {
        PrepareBuilder();
        result.hasPreCredit = false;
        result.preCredit_ = 0D;
        return this;
      }
      
      public bool HasPreDeposit {
        get { return result.hasPreDeposit; }
      }
      public double PreDeposit {
        get { return result.PreDeposit; }
        set { SetPreDeposit(value); }
      }
      public Builder SetPreDeposit(double value) {
        PrepareBuilder();
        result.hasPreDeposit = true;
        result.preDeposit_ = value;
        return this;
      }
      public Builder ClearPreDeposit() {
        PrepareBuilder();
        result.hasPreDeposit = false;
        result.preDeposit_ = 0D;
        return this;
      }
      
      public bool HasPreBalance {
        get { return result.hasPreBalance; }
      }
      public double PreBalance {
        get { return result.PreBalance; }
        set { SetPreBalance(value); }
      }
      public Builder SetPreBalance(double value) {
        PrepareBuilder();
        result.hasPreBalance = true;
        result.preBalance_ = value;
        return this;
      }
      public Builder ClearPreBalance() {
        PrepareBuilder();
        result.hasPreBalance = false;
        result.preBalance_ = 0D;
        return this;
      }
      
      public bool HasPreMargin {
        get { return result.hasPreMargin; }
      }
      public double PreMargin {
        get { return result.PreMargin; }
        set { SetPreMargin(value); }
      }
      public Builder SetPreMargin(double value) {
        PrepareBuilder();
        result.hasPreMargin = true;
        result.preMargin_ = value;
        return this;
      }
      public Builder ClearPreMargin() {
        PrepareBuilder();
        result.hasPreMargin = false;
        result.preMargin_ = 0D;
        return this;
      }
      
      public bool HasInterestBase {
        get { return result.hasInterestBase; }
      }
      public double InterestBase {
        get { return result.InterestBase; }
        set { SetInterestBase(value); }
      }
      public Builder SetInterestBase(double value) {
        PrepareBuilder();
        result.hasInterestBase = true;
        result.interestBase_ = value;
        return this;
      }
      public Builder ClearInterestBase() {
        PrepareBuilder();
        result.hasInterestBase = false;
        result.interestBase_ = 0D;
        return this;
      }
      
      public bool HasInterest {
        get { return result.hasInterest; }
      }
      public double Interest {
        get { return result.Interest; }
        set { SetInterest(value); }
      }
      public Builder SetInterest(double value) {
        PrepareBuilder();
        result.hasInterest = true;
        result.interest_ = value;
        return this;
      }
      public Builder ClearInterest() {
        PrepareBuilder();
        result.hasInterest = false;
        result.interest_ = 0D;
        return this;
      }
      
      public bool HasDeposit {
        get { return result.hasDeposit; }
      }
      public double Deposit {
        get { return result.Deposit; }
        set { SetDeposit(value); }
      }
      public Builder SetDeposit(double value) {
        PrepareBuilder();
        result.hasDeposit = true;
        result.deposit_ = value;
        return this;
      }
      public Builder ClearDeposit() {
        PrepareBuilder();
        result.hasDeposit = false;
        result.deposit_ = 0D;
        return this;
      }
      
      public bool HasWithdraw {
        get { return result.hasWithdraw; }
      }
      public double Withdraw {
        get { return result.Withdraw; }
        set { SetWithdraw(value); }
      }
      public Builder SetWithdraw(double value) {
        PrepareBuilder();
        result.hasWithdraw = true;
        result.withdraw_ = value;
        return this;
      }
      public Builder ClearWithdraw() {
        PrepareBuilder();
        result.hasWithdraw = false;
        result.withdraw_ = 0D;
        return this;
      }
      
      public bool HasFrozenMargin {
        get { return result.hasFrozenMargin; }
      }
      public double FrozenMargin {
        get { return result.FrozenMargin; }
        set { SetFrozenMargin(value); }
      }
      public Builder SetFrozenMargin(double value) {
        PrepareBuilder();
        result.hasFrozenMargin = true;
        result.frozenMargin_ = value;
        return this;
      }
      public Builder ClearFrozenMargin() {
        PrepareBuilder();
        result.hasFrozenMargin = false;
        result.frozenMargin_ = 0D;
        return this;
      }
      
      public bool HasFrozenCash {
        get { return result.hasFrozenCash; }
      }
      public double FrozenCash {
        get { return result.FrozenCash; }
        set { SetFrozenCash(value); }
      }
      public Builder SetFrozenCash(double value) {
        PrepareBuilder();
        result.hasFrozenCash = true;
        result.frozenCash_ = value;
        return this;
      }
      public Builder ClearFrozenCash() {
        PrepareBuilder();
        result.hasFrozenCash = false;
        result.frozenCash_ = 0D;
        return this;
      }
      
      public bool HasFrozenCommission {
        get { return result.hasFrozenCommission; }
      }
      public double FrozenCommission {
        get { return result.FrozenCommission; }
        set { SetFrozenCommission(value); }
      }
      public Builder SetFrozenCommission(double value) {
        PrepareBuilder();
        result.hasFrozenCommission = true;
        result.frozenCommission_ = value;
        return this;
      }
      public Builder ClearFrozenCommission() {
        PrepareBuilder();
        result.hasFrozenCommission = false;
        result.frozenCommission_ = 0D;
        return this;
      }
      
      public bool HasCurrMargin {
        get { return result.hasCurrMargin; }
      }
      public double CurrMargin {
        get { return result.CurrMargin; }
        set { SetCurrMargin(value); }
      }
      public Builder SetCurrMargin(double value) {
        PrepareBuilder();
        result.hasCurrMargin = true;
        result.currMargin_ = value;
        return this;
      }
      public Builder ClearCurrMargin() {
        PrepareBuilder();
        result.hasCurrMargin = false;
        result.currMargin_ = 0D;
        return this;
      }
      
      public bool HasCashIn {
        get { return result.hasCashIn; }
      }
      public double CashIn {
        get { return result.CashIn; }
        set { SetCashIn(value); }
      }
      public Builder SetCashIn(double value) {
        PrepareBuilder();
        result.hasCashIn = true;
        result.cashIn_ = value;
        return this;
      }
      public Builder ClearCashIn() {
        PrepareBuilder();
        result.hasCashIn = false;
        result.cashIn_ = 0D;
        return this;
      }
      
      public bool HasCommission {
        get { return result.hasCommission; }
      }
      public double Commission {
        get { return result.Commission; }
        set { SetCommission(value); }
      }
      public Builder SetCommission(double value) {
        PrepareBuilder();
        result.hasCommission = true;
        result.commission_ = value;
        return this;
      }
      public Builder ClearCommission() {
        PrepareBuilder();
        result.hasCommission = false;
        result.commission_ = 0D;
        return this;
      }
      
      public bool HasCloseProfit {
        get { return result.hasCloseProfit; }
      }
      public double CloseProfit {
        get { return result.CloseProfit; }
        set { SetCloseProfit(value); }
      }
      public Builder SetCloseProfit(double value) {
        PrepareBuilder();
        result.hasCloseProfit = true;
        result.closeProfit_ = value;
        return this;
      }
      public Builder ClearCloseProfit() {
        PrepareBuilder();
        result.hasCloseProfit = false;
        result.closeProfit_ = 0D;
        return this;
      }
      
      public bool HasPositionProfit {
        get { return result.hasPositionProfit; }
      }
      public double PositionProfit {
        get { return result.PositionProfit; }
        set { SetPositionProfit(value); }
      }
      public Builder SetPositionProfit(double value) {
        PrepareBuilder();
        result.hasPositionProfit = true;
        result.positionProfit_ = value;
        return this;
      }
      public Builder ClearPositionProfit() {
        PrepareBuilder();
        result.hasPositionProfit = false;
        result.positionProfit_ = 0D;
        return this;
      }
      
      public bool HasBalance {
        get { return result.hasBalance; }
      }
      public double Balance {
        get { return result.Balance; }
        set { SetBalance(value); }
      }
      public Builder SetBalance(double value) {
        PrepareBuilder();
        result.hasBalance = true;
        result.balance_ = value;
        return this;
      }
      public Builder ClearBalance() {
        PrepareBuilder();
        result.hasBalance = false;
        result.balance_ = 0D;
        return this;
      }
      
      public bool HasAvailable {
        get { return result.hasAvailable; }
      }
      public double Available {
        get { return result.Available; }
        set { SetAvailable(value); }
      }
      public Builder SetAvailable(double value) {
        PrepareBuilder();
        result.hasAvailable = true;
        result.available_ = value;
        return this;
      }
      public Builder ClearAvailable() {
        PrepareBuilder();
        result.hasAvailable = false;
        result.available_ = 0D;
        return this;
      }
      
      public bool HasWithdrawQuota {
        get { return result.hasWithdrawQuota; }
      }
      public double WithdrawQuota {
        get { return result.WithdrawQuota; }
        set { SetWithdrawQuota(value); }
      }
      public Builder SetWithdrawQuota(double value) {
        PrepareBuilder();
        result.hasWithdrawQuota = true;
        result.withdrawQuota_ = value;
        return this;
      }
      public Builder ClearWithdrawQuota() {
        PrepareBuilder();
        result.hasWithdrawQuota = false;
        result.withdrawQuota_ = 0D;
        return this;
      }
      
      public bool HasReserve {
        get { return result.hasReserve; }
      }
      public double Reserve {
        get { return result.Reserve; }
        set { SetReserve(value); }
      }
      public Builder SetReserve(double value) {
        PrepareBuilder();
        result.hasReserve = true;
        result.reserve_ = value;
        return this;
      }
      public Builder ClearReserve() {
        PrepareBuilder();
        result.hasReserve = false;
        result.reserve_ = 0D;
        return this;
      }
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasSettlementID {
        get { return result.hasSettlementID; }
      }
      public int SettlementID {
        get { return result.SettlementID; }
        set { SetSettlementID(value); }
      }
      public Builder SetSettlementID(int value) {
        PrepareBuilder();
        result.hasSettlementID = true;
        result.settlementID_ = value;
        return this;
      }
      public Builder ClearSettlementID() {
        PrepareBuilder();
        result.hasSettlementID = false;
        result.settlementID_ = 0;
        return this;
      }
      
      public bool HasCredit {
        get { return result.hasCredit; }
      }
      public double Credit {
        get { return result.Credit; }
        set { SetCredit(value); }
      }
      public Builder SetCredit(double value) {
        PrepareBuilder();
        result.hasCredit = true;
        result.credit_ = value;
        return this;
      }
      public Builder ClearCredit() {
        PrepareBuilder();
        result.hasCredit = false;
        result.credit_ = 0D;
        return this;
      }
      
      public bool HasMortgage {
        get { return result.hasMortgage; }
      }
      public double Mortgage {
        get { return result.Mortgage; }
        set { SetMortgage(value); }
      }
      public Builder SetMortgage(double value) {
        PrepareBuilder();
        result.hasMortgage = true;
        result.mortgage_ = value;
        return this;
      }
      public Builder ClearMortgage() {
        PrepareBuilder();
        result.hasMortgage = false;
        result.mortgage_ = 0D;
        return this;
      }
      
      public bool HasExchangeMargin {
        get { return result.hasExchangeMargin; }
      }
      public double ExchangeMargin {
        get { return result.ExchangeMargin; }
        set { SetExchangeMargin(value); }
      }
      public Builder SetExchangeMargin(double value) {
        PrepareBuilder();
        result.hasExchangeMargin = true;
        result.exchangeMargin_ = value;
        return this;
      }
      public Builder ClearExchangeMargin() {
        PrepareBuilder();
        result.hasExchangeMargin = false;
        result.exchangeMargin_ = 0D;
        return this;
      }
      
      public bool HasDeliveryMargin {
        get { return result.hasDeliveryMargin; }
      }
      public double DeliveryMargin {
        get { return result.DeliveryMargin; }
        set { SetDeliveryMargin(value); }
      }
      public Builder SetDeliveryMargin(double value) {
        PrepareBuilder();
        result.hasDeliveryMargin = true;
        result.deliveryMargin_ = value;
        return this;
      }
      public Builder ClearDeliveryMargin() {
        PrepareBuilder();
        result.hasDeliveryMargin = false;
        result.deliveryMargin_ = 0D;
        return this;
      }
      
      public bool HasExchangeDeliveryMargin {
        get { return result.hasExchangeDeliveryMargin; }
      }
      public double ExchangeDeliveryMargin {
        get { return result.ExchangeDeliveryMargin; }
        set { SetExchangeDeliveryMargin(value); }
      }
      public Builder SetExchangeDeliveryMargin(double value) {
        PrepareBuilder();
        result.hasExchangeDeliveryMargin = true;
        result.exchangeDeliveryMargin_ = value;
        return this;
      }
      public Builder ClearExchangeDeliveryMargin() {
        PrepareBuilder();
        result.hasExchangeDeliveryMargin = false;
        result.exchangeDeliveryMargin_ = 0D;
        return this;
      }
      
      public bool HasReserveBalance {
        get { return result.hasReserveBalance; }
      }
      public double ReserveBalance {
        get { return result.ReserveBalance; }
        set { SetReserveBalance(value); }
      }
      public Builder SetReserveBalance(double value) {
        PrepareBuilder();
        result.hasReserveBalance = true;
        result.reserveBalance_ = value;
        return this;
      }
      public Builder ClearReserveBalance() {
        PrepareBuilder();
        result.hasReserveBalance = false;
        result.reserveBalance_ = 0D;
        return this;
      }
    }
    static PBAccountInfo() {
      object.ReferenceEquals(global::Micro.Future.Message.Business.Generated.Businessobj.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
