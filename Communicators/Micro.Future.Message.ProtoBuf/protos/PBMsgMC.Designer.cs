// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PBWrapMsgMC {
  
  namespace Generated {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class PBMsgMC {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgMCBroAuth__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCBroAuth, global::PBWrapMsgMC.PBMsgMCBroAuth.Builder> internal__static_PBWrapMsgMC_PBMsgMCBroAuth__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCMsgAuth, global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder> internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgMCAuthList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCAuthList, global::PBWrapMsgMC.PBMsgMCAuthList.Builder> internal__static_PBWrapMsgMC_PBMsgMCAuthList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgMCExch__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCExch, global::PBWrapMsgMC.PBMsgMCExch.Builder> internal__static_PBWrapMsgMC_PBMsgMCExch__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCSuperCmd, global::PBWrapMsgMC.PBMsgMCSuperCmd.Builder> internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgPair__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgPair, global::PBWrapMsgMC.PBMsgPair.Builder> internal__static_PBWrapMsgMC_PBMsgPair__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_PBMsgSimMap__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgSimMap, global::PBWrapMsgMC.PBMsgSimMap.Builder> internal__static_PBWrapMsgMC_PBMsgSimMap__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_DBQuery__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.DBQuery, global::PBWrapMsgMC.DBQuery.Builder> internal__static_PBWrapMsgMC_DBQuery__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_PBWrapMsgMC_DBRow__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.DBRow, global::PBWrapMsgMC.DBRow.Builder> internal__static_PBWrapMsgMC_DBRow__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static PBMsgMC() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Cg1QQk1zZ01DLnByb3RvEgtQQldyYXBNc2dNQyJaCg5QQk1zZ01DQnJvQXV0" + 
            "aBISCgpicm9rZXJOYW1lGAEgAigJEhMKC2Rlc3RpbmF0aW9uGAIgAigJEg8K" + 
            "B2NoYW5uZWwYAyACKAkSDgoGSVBMaXN0GAQgAygJImUKDlBCTXNnTUNNc2dB" + 
            "dXRoEhEKCW1lc3NhZ2VJZBgBIAIoBRIYChBtZXNzYWdlQ2xhc3NOYW1lGAIg" + 
            "AigJEg8KB3NlcnZpY2UYAyACKAkSFQoNc291cmNlU2VydmljZRgEIAEoCSLm" + 
            "AQoPUEJNc2dNQ0F1dGhMaXN0EhEKCW1lc3NhZ2VJZBgBIAIoBRIWCg5tZXNz" + 
            "YWdlU2VydmljZRgCIAIoCRIPCgdzZXJ2aWNlGAMgAigJEjAKC2Jyb0F1dGhM" + 
            "aXN0GAQgAygLMhsuUEJXcmFwTXNnTUMuUEJNc2dNQ0Jyb0F1dGgSMAoLbXNn" + 
            "QXV0aExpc3QYBSADKAsyGy5QQldyYXBNc2dNQy5QQk1zZ01DTXNnQXV0aBIz" + 
            "Cg5zcmNNc2dBdXRoTGlzdBgGIAMoCzIbLlBCV3JhcE1zZ01DLlBCTXNnTUNN" + 
            "c2dBdXRoIpgBCgtQQk1zZ01DRXhjaBIRCgltZXNzYWdlSWQYASACKAUSFgoO" + 
            "bWVzc2FnZVNlcnZpY2UYAiACKAkSDwoHc2VydmljZRgDIAIoCRItCgttZXNz" + 
            "YWdlVHlwZRgEIAIoDjIYLlBCV3JhcE1zZ01DLk1lc3NhZ2VUeXBlEg4KBnNv" + 
            "dXJjZRgFIAMoCRIOCgZzdGF0dXMYBiABKAkiawoPUEJNc2dNQ1N1cGVyQ21k" + 
            "EhEKCW1lc3NhZ2VJZBgBIAIoBRIWCg5tZXNzYWdlU2VydmljZRgCIAIoCRIt" + 
            "Cgtjb21tYW5kVHlwZRgDIAIoDjIYLlBCV3JhcE1zZ01DLkNvbW1hbmRUeXBl" + 
            "IicKCVBCTXNnUGFpchILCgNrZXkYASACKAkSDQoFdmFsdWUYAiACKAkiegoL" + 
            "UEJNc2dTaW1NYXASEQoJbWVzc2FnZUlkGAEgAigFEhYKDm1lc3NhZ2VTZXJ2" + 
            "aWNlGAIgAigJEgwKBG5hbWUYAyACKAkSJAoEbm9kZRgEIAMoCzIWLlBCV3Jh" + 
            "cE1zZ01DLlBCTXNnUGFpchIMCgRpbmZvGAUgASgJIs0CCgdEQlF1ZXJ5EhEK" + 
            "CW1lc3NhZ2VJZBgBIAIoBRIWCg5tZXNzYWdlU2VydmljZRgCIAIoCRIpCglx" + 
            "dWVyeVR5cGUYAyACKA4yFi5QQldyYXBNc2dNQy5RdWVyeVR5cGUSDAoEbmFt" + 
            "ZRgEIAIoCRISCgpjb25uZWN0aW9uGAUgASgJEgsKA1NRTBgGIAEoCRIRCglj" + 
            "b2x1bW5OdW0YByABKAUSIAoEcm93cxgIIAMoCzISLlBCV3JhcE1zZ01DLkRC" + 
            "Um93EicKCGRhdGFUeXBlGAkgASgOMhUuUEJXcmFwTXNnTUMuRGF0YVR5cGUS" + 
            "FgoOcGFyYW1ldGVyX25hbWUYCiADKAkSFwoPcGFyYW1ldGVyX3ZhbHVlGAsg" + 
            "AygJEhYKDnBhcmFtZXRlcl90eXBlGAwgAygJEhYKDnBhcmFtZXRlcl9zaXpl" + 
            "GA0gAygJIhgKBURCUm93Eg8KB2NvbHVtbnMYASADKAkqPgoLTWVzc2FnZVR5" + 
            "cGUSDAoIUkVHSVNURVIQARIOCgpIRUFSVF9CRUFUEAISEQoNU1RBVFVTX1JF" + 
            "UE9SVBADKigKC0NvbW1hbmRUeXBlEhkKFVJFTE9BRF9BVVRIRU5USUNBVElP" + 
            "ThABKkYKCVF1ZXJ5VHlwZRILCgdSRVFVRVNUEAESCgoGUkVUVVJOEAISEgoO" + 
            "U1RPUkVQUk9DRURVUkUQAxIMCghSRVNFUlZFRBAEKiEKCERhdGFUeXBlEgkK" + 
            "BUlNQUdFEAESCgoGVVBEQVRFEAJCHgoPUHJvdG9CdWZNZXNzYWdlQgtQQldy" + 
            "YXBNc2dNQw==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_PBWrapMsgMC_PBMsgMCBroAuth__Descriptor = Descriptor.MessageTypes[0];
          internal__static_PBWrapMsgMC_PBMsgMCBroAuth__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCBroAuth, global::PBWrapMsgMC.PBMsgMCBroAuth.Builder>(internal__static_PBWrapMsgMC_PBMsgMCBroAuth__Descriptor,
                  new string[] { "BrokerName", "Destination", "Channel", "IPList", });
          internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__Descriptor = Descriptor.MessageTypes[1];
          internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCMsgAuth, global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder>(internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__Descriptor,
                  new string[] { "MessageId", "MessageClassName", "Service", "SourceService", });
          internal__static_PBWrapMsgMC_PBMsgMCAuthList__Descriptor = Descriptor.MessageTypes[2];
          internal__static_PBWrapMsgMC_PBMsgMCAuthList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCAuthList, global::PBWrapMsgMC.PBMsgMCAuthList.Builder>(internal__static_PBWrapMsgMC_PBMsgMCAuthList__Descriptor,
                  new string[] { "MessageId", "MessageService", "Service", "BroAuthList", "MsgAuthList", "SrcMsgAuthList", });
          internal__static_PBWrapMsgMC_PBMsgMCExch__Descriptor = Descriptor.MessageTypes[3];
          internal__static_PBWrapMsgMC_PBMsgMCExch__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCExch, global::PBWrapMsgMC.PBMsgMCExch.Builder>(internal__static_PBWrapMsgMC_PBMsgMCExch__Descriptor,
                  new string[] { "MessageId", "MessageService", "Service", "MessageType", "Source", "Status", });
          internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__Descriptor = Descriptor.MessageTypes[4];
          internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgMCSuperCmd, global::PBWrapMsgMC.PBMsgMCSuperCmd.Builder>(internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__Descriptor,
                  new string[] { "MessageId", "MessageService", "CommandType", });
          internal__static_PBWrapMsgMC_PBMsgPair__Descriptor = Descriptor.MessageTypes[5];
          internal__static_PBWrapMsgMC_PBMsgPair__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgPair, global::PBWrapMsgMC.PBMsgPair.Builder>(internal__static_PBWrapMsgMC_PBMsgPair__Descriptor,
                  new string[] { "Key", "Value", });
          internal__static_PBWrapMsgMC_PBMsgSimMap__Descriptor = Descriptor.MessageTypes[6];
          internal__static_PBWrapMsgMC_PBMsgSimMap__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.PBMsgSimMap, global::PBWrapMsgMC.PBMsgSimMap.Builder>(internal__static_PBWrapMsgMC_PBMsgSimMap__Descriptor,
                  new string[] { "MessageId", "MessageService", "Name", "Node", "Info", });
          internal__static_PBWrapMsgMC_DBQuery__Descriptor = Descriptor.MessageTypes[7];
          internal__static_PBWrapMsgMC_DBQuery__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.DBQuery, global::PBWrapMsgMC.DBQuery.Builder>(internal__static_PBWrapMsgMC_DBQuery__Descriptor,
                  new string[] { "MessageId", "MessageService", "QueryType", "Name", "Connection", "SQL", "ColumnNum", "Rows", "DataType", "ParameterName", "ParameterValue", "ParameterType", "ParameterSize", });
          internal__static_PBWrapMsgMC_DBRow__Descriptor = Descriptor.MessageTypes[8];
          internal__static_PBWrapMsgMC_DBRow__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::PBWrapMsgMC.DBRow, global::PBWrapMsgMC.DBRow.Builder>(internal__static_PBWrapMsgMC_DBRow__Descriptor,
                  new string[] { "Columns", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Enums
  public enum MessageType {
    REGISTER = 1,
    HEART_BEAT = 2,
    STATUS_REPORT = 3,
  }
  
  public enum CommandType {
    RELOAD_AUTHENTICATION = 1,
  }
  
  public enum QueryType {
    REQUEST = 1,
    RETURN = 2,
    STOREPROCEDURE = 3,
    RESERVED = 4,
  }
  
  public enum DataType {
    IMAGE = 1,
    UPDATE = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCBroAuth : pb::GeneratedMessage<PBMsgMCBroAuth, PBMsgMCBroAuth.Builder> {
    private PBMsgMCBroAuth() { }
    private static readonly PBMsgMCBroAuth defaultInstance = new PBMsgMCBroAuth().MakeReadOnly();
    private static readonly string[] _pBMsgMCBroAuthFieldNames = new string[] { "IPList", "brokerName", "channel", "destination" };
    private static readonly uint[] _pBMsgMCBroAuthFieldTags = new uint[] { 34, 10, 26, 18 };
    public static PBMsgMCBroAuth DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgMCBroAuth DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgMCBroAuth ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCBroAuth__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgMCBroAuth, PBMsgMCBroAuth.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCBroAuth__FieldAccessorTable; }
    }
    
    public const int BrokerNameFieldNumber = 1;
    private bool hasBrokerName;
    private string brokerName_ = "";
    public bool HasBrokerName {
      get { return hasBrokerName; }
    }
    public string BrokerName {
      get { return brokerName_; }
    }
    
    public const int DestinationFieldNumber = 2;
    private bool hasDestination;
    private string destination_ = "";
    public bool HasDestination {
      get { return hasDestination; }
    }
    public string Destination {
      get { return destination_; }
    }
    
    public const int ChannelFieldNumber = 3;
    private bool hasChannel;
    private string channel_ = "";
    public bool HasChannel {
      get { return hasChannel; }
    }
    public string Channel {
      get { return channel_; }
    }
    
    public const int IPListFieldNumber = 4;
    private pbc::PopsicleList<string> iPList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IPListList {
      get { return pbc::Lists.AsReadOnly(iPList_); }
    }
    public int IPListCount {
      get { return iPList_.Count; }
    }
    public string GetIPList(int index) {
      return iPList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBrokerName) return false;
        if (!hasDestination) return false;
        if (!hasChannel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgMCBroAuthFieldNames;
      if (hasBrokerName) {
        output.WriteString(1, field_names[1], BrokerName);
      }
      if (hasDestination) {
        output.WriteString(2, field_names[3], Destination);
      }
      if (hasChannel) {
        output.WriteString(3, field_names[2], Channel);
      }
      if (iPList_.Count > 0) {
        output.WriteStringArray(4, field_names[0], iPList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBrokerName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BrokerName);
        }
        if (hasDestination) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Destination);
        }
        if (hasChannel) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Channel);
        }
        {
          int dataSize = 0;
          foreach (string element in IPListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * iPList_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgMCBroAuth ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCBroAuth ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgMCBroAuth MakeReadOnly() {
      iPList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgMCBroAuth prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgMCBroAuth, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgMCBroAuth cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgMCBroAuth result;
      
      private PBMsgMCBroAuth PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgMCBroAuth original = result;
          result = new PBMsgMCBroAuth();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgMCBroAuth MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgMCBroAuth.Descriptor; }
      }
      
      public override PBMsgMCBroAuth DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgMCBroAuth.DefaultInstance; }
      }
      
      public override PBMsgMCBroAuth BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgMCBroAuth) {
          return MergeFrom((PBMsgMCBroAuth) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgMCBroAuth other) {
        if (other == global::PBWrapMsgMC.PBMsgMCBroAuth.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBrokerName) {
          BrokerName = other.BrokerName;
        }
        if (other.HasDestination) {
          Destination = other.Destination;
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.iPList_.Count != 0) {
          result.iPList_.Add(other.iPList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgMCBroAuthFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgMCBroAuthFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBrokerName = input.ReadString(ref result.brokerName_);
              break;
            }
            case 18: {
              result.hasDestination = input.ReadString(ref result.destination_);
              break;
            }
            case 26: {
              result.hasChannel = input.ReadString(ref result.channel_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.iPList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBrokerName {
        get { return result.hasBrokerName; }
      }
      public string BrokerName {
        get { return result.BrokerName; }
        set { SetBrokerName(value); }
      }
      public Builder SetBrokerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrokerName = true;
        result.brokerName_ = value;
        return this;
      }
      public Builder ClearBrokerName() {
        PrepareBuilder();
        result.hasBrokerName = false;
        result.brokerName_ = "";
        return this;
      }
      
      public bool HasDestination {
        get { return result.hasDestination; }
      }
      public string Destination {
        get { return result.Destination; }
        set { SetDestination(value); }
      }
      public Builder SetDestination(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDestination = true;
        result.destination_ = value;
        return this;
      }
      public Builder ClearDestination() {
        PrepareBuilder();
        result.hasDestination = false;
        result.destination_ = "";
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      public string Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      public Builder SetChannel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> IPListList {
        get { return PrepareBuilder().iPList_; }
      }
      public int IPListCount {
        get { return result.IPListCount; }
      }
      public string GetIPList(int index) {
        return result.GetIPList(index);
      }
      public Builder SetIPList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.iPList_[index] = value;
        return this;
      }
      public Builder AddIPList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.iPList_.Add(value);
        return this;
      }
      public Builder AddRangeIPList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.iPList_.Add(values);
        return this;
      }
      public Builder ClearIPList() {
        PrepareBuilder();
        result.iPList_.Clear();
        return this;
      }
    }
    static PBMsgMCBroAuth() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCMsgAuth : pb::GeneratedMessage<PBMsgMCMsgAuth, PBMsgMCMsgAuth.Builder> {
    private PBMsgMCMsgAuth() { }
    private static readonly PBMsgMCMsgAuth defaultInstance = new PBMsgMCMsgAuth().MakeReadOnly();
    private static readonly string[] _pBMsgMCMsgAuthFieldNames = new string[] { "messageClassName", "messageId", "service", "sourceService" };
    private static readonly uint[] _pBMsgMCMsgAuthFieldTags = new uint[] { 18, 8, 26, 34 };
    public static PBMsgMCMsgAuth DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgMCMsgAuth DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgMCMsgAuth ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgMCMsgAuth, PBMsgMCMsgAuth.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCMsgAuth__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageClassNameFieldNumber = 2;
    private bool hasMessageClassName;
    private string messageClassName_ = "";
    public bool HasMessageClassName {
      get { return hasMessageClassName; }
    }
    public string MessageClassName {
      get { return messageClassName_; }
    }
    
    public const int ServiceFieldNumber = 3;
    private bool hasService;
    private string service_ = "";
    public bool HasService {
      get { return hasService; }
    }
    public string Service {
      get { return service_; }
    }
    
    public const int SourceServiceFieldNumber = 4;
    private bool hasSourceService;
    private string sourceService_ = "";
    public bool HasSourceService {
      get { return hasSourceService; }
    }
    public string SourceService {
      get { return sourceService_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageClassName) return false;
        if (!hasService) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgMCMsgAuthFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[1], MessageId);
      }
      if (hasMessageClassName) {
        output.WriteString(2, field_names[0], MessageClassName);
      }
      if (hasService) {
        output.WriteString(3, field_names[2], Service);
      }
      if (hasSourceService) {
        output.WriteString(4, field_names[3], SourceService);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageClassName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageClassName);
        }
        if (hasService) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Service);
        }
        if (hasSourceService) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SourceService);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgMCMsgAuth ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCMsgAuth ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgMCMsgAuth MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgMCMsgAuth prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgMCMsgAuth, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgMCMsgAuth cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgMCMsgAuth result;
      
      private PBMsgMCMsgAuth PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgMCMsgAuth original = result;
          result = new PBMsgMCMsgAuth();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgMCMsgAuth MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgMCMsgAuth.Descriptor; }
      }
      
      public override PBMsgMCMsgAuth DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgMCMsgAuth.DefaultInstance; }
      }
      
      public override PBMsgMCMsgAuth BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgMCMsgAuth) {
          return MergeFrom((PBMsgMCMsgAuth) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgMCMsgAuth other) {
        if (other == global::PBWrapMsgMC.PBMsgMCMsgAuth.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageClassName) {
          MessageClassName = other.MessageClassName;
        }
        if (other.HasService) {
          Service = other.Service;
        }
        if (other.HasSourceService) {
          SourceService = other.SourceService;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgMCMsgAuthFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgMCMsgAuthFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageClassName = input.ReadString(ref result.messageClassName_);
              break;
            }
            case 26: {
              result.hasService = input.ReadString(ref result.service_);
              break;
            }
            case 34: {
              result.hasSourceService = input.ReadString(ref result.sourceService_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageClassName {
        get { return result.hasMessageClassName; }
      }
      public string MessageClassName {
        get { return result.MessageClassName; }
        set { SetMessageClassName(value); }
      }
      public Builder SetMessageClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageClassName = true;
        result.messageClassName_ = value;
        return this;
      }
      public Builder ClearMessageClassName() {
        PrepareBuilder();
        result.hasMessageClassName = false;
        result.messageClassName_ = "";
        return this;
      }
      
      public bool HasService {
        get { return result.hasService; }
      }
      public string Service {
        get { return result.Service; }
        set { SetService(value); }
      }
      public Builder SetService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasService = true;
        result.service_ = value;
        return this;
      }
      public Builder ClearService() {
        PrepareBuilder();
        result.hasService = false;
        result.service_ = "";
        return this;
      }
      
      public bool HasSourceService {
        get { return result.hasSourceService; }
      }
      public string SourceService {
        get { return result.SourceService; }
        set { SetSourceService(value); }
      }
      public Builder SetSourceService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSourceService = true;
        result.sourceService_ = value;
        return this;
      }
      public Builder ClearSourceService() {
        PrepareBuilder();
        result.hasSourceService = false;
        result.sourceService_ = "";
        return this;
      }
    }
    static PBMsgMCMsgAuth() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCAuthList : pb::GeneratedMessage<PBMsgMCAuthList, PBMsgMCAuthList.Builder> {
    private PBMsgMCAuthList() { }
    private static readonly PBMsgMCAuthList defaultInstance = new PBMsgMCAuthList().MakeReadOnly();
    private static readonly string[] _pBMsgMCAuthListFieldNames = new string[] { "broAuthList", "messageId", "messageService", "msgAuthList", "service", "srcMsgAuthList" };
    private static readonly uint[] _pBMsgMCAuthListFieldTags = new uint[] { 34, 8, 18, 42, 26, 50 };
    public static PBMsgMCAuthList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgMCAuthList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgMCAuthList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCAuthList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgMCAuthList, PBMsgMCAuthList.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCAuthList__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public const int ServiceFieldNumber = 3;
    private bool hasService;
    private string service_ = "";
    public bool HasService {
      get { return hasService; }
    }
    public string Service {
      get { return service_; }
    }
    
    public const int BroAuthListFieldNumber = 4;
    private pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCBroAuth> broAuthList_ = new pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCBroAuth>();
    public scg::IList<global::PBWrapMsgMC.PBMsgMCBroAuth> BroAuthListList {
      get { return broAuthList_; }
    }
    public int BroAuthListCount {
      get { return broAuthList_.Count; }
    }
    public global::PBWrapMsgMC.PBMsgMCBroAuth GetBroAuthList(int index) {
      return broAuthList_[index];
    }
    
    public const int MsgAuthListFieldNumber = 5;
    private pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth> msgAuthList_ = new pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth>();
    public scg::IList<global::PBWrapMsgMC.PBMsgMCMsgAuth> MsgAuthListList {
      get { return msgAuthList_; }
    }
    public int MsgAuthListCount {
      get { return msgAuthList_.Count; }
    }
    public global::PBWrapMsgMC.PBMsgMCMsgAuth GetMsgAuthList(int index) {
      return msgAuthList_[index];
    }
    
    public const int SrcMsgAuthListFieldNumber = 6;
    private pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth> srcMsgAuthList_ = new pbc::PopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth>();
    public scg::IList<global::PBWrapMsgMC.PBMsgMCMsgAuth> SrcMsgAuthListList {
      get { return srcMsgAuthList_; }
    }
    public int SrcMsgAuthListCount {
      get { return srcMsgAuthList_.Count; }
    }
    public global::PBWrapMsgMC.PBMsgMCMsgAuth GetSrcMsgAuthList(int index) {
      return srcMsgAuthList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        if (!hasService) return false;
        foreach (global::PBWrapMsgMC.PBMsgMCBroAuth element in BroAuthListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::PBWrapMsgMC.PBMsgMCMsgAuth element in MsgAuthListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::PBWrapMsgMC.PBMsgMCMsgAuth element in SrcMsgAuthListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgMCAuthListFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[1], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[2], MessageService);
      }
      if (hasService) {
        output.WriteString(3, field_names[4], Service);
      }
      if (broAuthList_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], broAuthList_);
      }
      if (msgAuthList_.Count > 0) {
        output.WriteMessageArray(5, field_names[3], msgAuthList_);
      }
      if (srcMsgAuthList_.Count > 0) {
        output.WriteMessageArray(6, field_names[5], srcMsgAuthList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        if (hasService) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Service);
        }
        foreach (global::PBWrapMsgMC.PBMsgMCBroAuth element in BroAuthListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::PBWrapMsgMC.PBMsgMCMsgAuth element in MsgAuthListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::PBWrapMsgMC.PBMsgMCMsgAuth element in SrcMsgAuthListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgMCAuthList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgMCAuthList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCAuthList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgMCAuthList MakeReadOnly() {
      broAuthList_.MakeReadOnly();
      msgAuthList_.MakeReadOnly();
      srcMsgAuthList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgMCAuthList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgMCAuthList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgMCAuthList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgMCAuthList result;
      
      private PBMsgMCAuthList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgMCAuthList original = result;
          result = new PBMsgMCAuthList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgMCAuthList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgMCAuthList.Descriptor; }
      }
      
      public override PBMsgMCAuthList DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgMCAuthList.DefaultInstance; }
      }
      
      public override PBMsgMCAuthList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgMCAuthList) {
          return MergeFrom((PBMsgMCAuthList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgMCAuthList other) {
        if (other == global::PBWrapMsgMC.PBMsgMCAuthList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        if (other.HasService) {
          Service = other.Service;
        }
        if (other.broAuthList_.Count != 0) {
          result.broAuthList_.Add(other.broAuthList_);
        }
        if (other.msgAuthList_.Count != 0) {
          result.msgAuthList_.Add(other.msgAuthList_);
        }
        if (other.srcMsgAuthList_.Count != 0) {
          result.srcMsgAuthList_.Add(other.srcMsgAuthList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgMCAuthListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgMCAuthListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
            case 26: {
              result.hasService = input.ReadString(ref result.service_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.broAuthList_, global::PBWrapMsgMC.PBMsgMCBroAuth.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.msgAuthList_, global::PBWrapMsgMC.PBMsgMCMsgAuth.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.srcMsgAuthList_, global::PBWrapMsgMC.PBMsgMCMsgAuth.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
      
      public bool HasService {
        get { return result.hasService; }
      }
      public string Service {
        get { return result.Service; }
        set { SetService(value); }
      }
      public Builder SetService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasService = true;
        result.service_ = value;
        return this;
      }
      public Builder ClearService() {
        PrepareBuilder();
        result.hasService = false;
        result.service_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::PBWrapMsgMC.PBMsgMCBroAuth> BroAuthListList {
        get { return PrepareBuilder().broAuthList_; }
      }
      public int BroAuthListCount {
        get { return result.BroAuthListCount; }
      }
      public global::PBWrapMsgMC.PBMsgMCBroAuth GetBroAuthList(int index) {
        return result.GetBroAuthList(index);
      }
      public Builder SetBroAuthList(int index, global::PBWrapMsgMC.PBMsgMCBroAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.broAuthList_[index] = value;
        return this;
      }
      public Builder SetBroAuthList(int index, global::PBWrapMsgMC.PBMsgMCBroAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.broAuthList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBroAuthList(global::PBWrapMsgMC.PBMsgMCBroAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.broAuthList_.Add(value);
        return this;
      }
      public Builder AddBroAuthList(global::PBWrapMsgMC.PBMsgMCBroAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.broAuthList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBroAuthList(scg::IEnumerable<global::PBWrapMsgMC.PBMsgMCBroAuth> values) {
        PrepareBuilder();
        result.broAuthList_.Add(values);
        return this;
      }
      public Builder ClearBroAuthList() {
        PrepareBuilder();
        result.broAuthList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth> MsgAuthListList {
        get { return PrepareBuilder().msgAuthList_; }
      }
      public int MsgAuthListCount {
        get { return result.MsgAuthListCount; }
      }
      public global::PBWrapMsgMC.PBMsgMCMsgAuth GetMsgAuthList(int index) {
        return result.GetMsgAuthList(index);
      }
      public Builder SetMsgAuthList(int index, global::PBWrapMsgMC.PBMsgMCMsgAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.msgAuthList_[index] = value;
        return this;
      }
      public Builder SetMsgAuthList(int index, global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.msgAuthList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMsgAuthList(global::PBWrapMsgMC.PBMsgMCMsgAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.msgAuthList_.Add(value);
        return this;
      }
      public Builder AddMsgAuthList(global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.msgAuthList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMsgAuthList(scg::IEnumerable<global::PBWrapMsgMC.PBMsgMCMsgAuth> values) {
        PrepareBuilder();
        result.msgAuthList_.Add(values);
        return this;
      }
      public Builder ClearMsgAuthList() {
        PrepareBuilder();
        result.msgAuthList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::PBWrapMsgMC.PBMsgMCMsgAuth> SrcMsgAuthListList {
        get { return PrepareBuilder().srcMsgAuthList_; }
      }
      public int SrcMsgAuthListCount {
        get { return result.SrcMsgAuthListCount; }
      }
      public global::PBWrapMsgMC.PBMsgMCMsgAuth GetSrcMsgAuthList(int index) {
        return result.GetSrcMsgAuthList(index);
      }
      public Builder SetSrcMsgAuthList(int index, global::PBWrapMsgMC.PBMsgMCMsgAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.srcMsgAuthList_[index] = value;
        return this;
      }
      public Builder SetSrcMsgAuthList(int index, global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.srcMsgAuthList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSrcMsgAuthList(global::PBWrapMsgMC.PBMsgMCMsgAuth value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.srcMsgAuthList_.Add(value);
        return this;
      }
      public Builder AddSrcMsgAuthList(global::PBWrapMsgMC.PBMsgMCMsgAuth.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.srcMsgAuthList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSrcMsgAuthList(scg::IEnumerable<global::PBWrapMsgMC.PBMsgMCMsgAuth> values) {
        PrepareBuilder();
        result.srcMsgAuthList_.Add(values);
        return this;
      }
      public Builder ClearSrcMsgAuthList() {
        PrepareBuilder();
        result.srcMsgAuthList_.Clear();
        return this;
      }
    }
    static PBMsgMCAuthList() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCExch : pb::GeneratedMessage<PBMsgMCExch, PBMsgMCExch.Builder> {
    private PBMsgMCExch() { }
    private static readonly PBMsgMCExch defaultInstance = new PBMsgMCExch().MakeReadOnly();
    private static readonly string[] _pBMsgMCExchFieldNames = new string[] { "messageId", "messageService", "messageType", "service", "source", "status" };
    private static readonly uint[] _pBMsgMCExchFieldTags = new uint[] { 8, 18, 32, 26, 42, 50 };
    public static PBMsgMCExch DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgMCExch DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgMCExch ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCExch__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgMCExch, PBMsgMCExch.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCExch__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public const int ServiceFieldNumber = 3;
    private bool hasService;
    private string service_ = "";
    public bool HasService {
      get { return hasService; }
    }
    public string Service {
      get { return service_; }
    }
    
    public const int MessageTypeFieldNumber = 4;
    private bool hasMessageType;
    private global::PBWrapMsgMC.MessageType messageType_ = global::PBWrapMsgMC.MessageType.REGISTER;
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public global::PBWrapMsgMC.MessageType MessageType {
      get { return messageType_; }
    }
    
    public const int SourceFieldNumber = 5;
    private pbc::PopsicleList<string> source_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SourceList {
      get { return pbc::Lists.AsReadOnly(source_); }
    }
    public int SourceCount {
      get { return source_.Count; }
    }
    public string GetSource(int index) {
      return source_[index];
    }
    
    public const int StatusFieldNumber = 6;
    private bool hasStatus;
    private string status_ = "";
    public bool HasStatus {
      get { return hasStatus; }
    }
    public string Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        if (!hasService) return false;
        if (!hasMessageType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgMCExchFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[0], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[1], MessageService);
      }
      if (hasService) {
        output.WriteString(3, field_names[3], Service);
      }
      if (hasMessageType) {
        output.WriteEnum(4, field_names[2], (int) MessageType, MessageType);
      }
      if (source_.Count > 0) {
        output.WriteStringArray(5, field_names[4], source_);
      }
      if (hasStatus) {
        output.WriteString(6, field_names[5], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        if (hasService) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Service);
        }
        if (hasMessageType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) MessageType);
        }
        {
          int dataSize = 0;
          foreach (string element in SourceList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * source_.Count;
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgMCExch ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCExch ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgMCExch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCExch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgMCExch MakeReadOnly() {
      source_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgMCExch prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgMCExch, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgMCExch cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgMCExch result;
      
      private PBMsgMCExch PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgMCExch original = result;
          result = new PBMsgMCExch();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgMCExch MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgMCExch.Descriptor; }
      }
      
      public override PBMsgMCExch DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgMCExch.DefaultInstance; }
      }
      
      public override PBMsgMCExch BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgMCExch) {
          return MergeFrom((PBMsgMCExch) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgMCExch other) {
        if (other == global::PBWrapMsgMC.PBMsgMCExch.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        if (other.HasService) {
          Service = other.Service;
        }
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.source_.Count != 0) {
          result.source_.Add(other.source_);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgMCExchFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgMCExchFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
            case 26: {
              result.hasService = input.ReadString(ref result.service_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.messageType_, out unknown)) {
                result.hasMessageType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.source_);
              break;
            }
            case 50: {
              result.hasStatus = input.ReadString(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
      
      public bool HasService {
        get { return result.hasService; }
      }
      public string Service {
        get { return result.Service; }
        set { SetService(value); }
      }
      public Builder SetService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasService = true;
        result.service_ = value;
        return this;
      }
      public Builder ClearService() {
        PrepareBuilder();
        result.hasService = false;
        result.service_ = "";
        return this;
      }
      
      public bool HasMessageType {
       get { return result.hasMessageType; }
      }
      public global::PBWrapMsgMC.MessageType MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(global::PBWrapMsgMC.MessageType value) {
        PrepareBuilder();
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.hasMessageType = false;
        result.messageType_ = global::PBWrapMsgMC.MessageType.REGISTER;
        return this;
      }
      
      public pbc::IPopsicleList<string> SourceList {
        get { return PrepareBuilder().source_; }
      }
      public int SourceCount {
        get { return result.SourceCount; }
      }
      public string GetSource(int index) {
        return result.GetSource(index);
      }
      public Builder SetSource(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.source_[index] = value;
        return this;
      }
      public Builder AddSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.source_.Add(value);
        return this;
      }
      public Builder AddRangeSource(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.source_.Add(values);
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.source_.Clear();
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public string Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = "";
        return this;
      }
    }
    static PBMsgMCExch() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgMCSuperCmd : pb::GeneratedMessage<PBMsgMCSuperCmd, PBMsgMCSuperCmd.Builder> {
    private PBMsgMCSuperCmd() { }
    private static readonly PBMsgMCSuperCmd defaultInstance = new PBMsgMCSuperCmd().MakeReadOnly();
    private static readonly string[] _pBMsgMCSuperCmdFieldNames = new string[] { "commandType", "messageId", "messageService" };
    private static readonly uint[] _pBMsgMCSuperCmdFieldTags = new uint[] { 24, 8, 18 };
    public static PBMsgMCSuperCmd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgMCSuperCmd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgMCSuperCmd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgMCSuperCmd, PBMsgMCSuperCmd.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgMCSuperCmd__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public const int CommandTypeFieldNumber = 3;
    private bool hasCommandType;
    private global::PBWrapMsgMC.CommandType commandType_ = global::PBWrapMsgMC.CommandType.RELOAD_AUTHENTICATION;
    public bool HasCommandType {
      get { return hasCommandType; }
    }
    public global::PBWrapMsgMC.CommandType CommandType {
      get { return commandType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        if (!hasCommandType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgMCSuperCmdFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[1], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[2], MessageService);
      }
      if (hasCommandType) {
        output.WriteEnum(3, field_names[0], (int) CommandType, CommandType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        if (hasCommandType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) CommandType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgMCSuperCmd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgMCSuperCmd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgMCSuperCmd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgMCSuperCmd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgMCSuperCmd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgMCSuperCmd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgMCSuperCmd result;
      
      private PBMsgMCSuperCmd PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgMCSuperCmd original = result;
          result = new PBMsgMCSuperCmd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgMCSuperCmd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgMCSuperCmd.Descriptor; }
      }
      
      public override PBMsgMCSuperCmd DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgMCSuperCmd.DefaultInstance; }
      }
      
      public override PBMsgMCSuperCmd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgMCSuperCmd) {
          return MergeFrom((PBMsgMCSuperCmd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgMCSuperCmd other) {
        if (other == global::PBWrapMsgMC.PBMsgMCSuperCmd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        if (other.HasCommandType) {
          CommandType = other.CommandType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgMCSuperCmdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgMCSuperCmdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.commandType_, out unknown)) {
                result.hasCommandType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
      
      public bool HasCommandType {
       get { return result.hasCommandType; }
      }
      public global::PBWrapMsgMC.CommandType CommandType {
        get { return result.CommandType; }
        set { SetCommandType(value); }
      }
      public Builder SetCommandType(global::PBWrapMsgMC.CommandType value) {
        PrepareBuilder();
        result.hasCommandType = true;
        result.commandType_ = value;
        return this;
      }
      public Builder ClearCommandType() {
        PrepareBuilder();
        result.hasCommandType = false;
        result.commandType_ = global::PBWrapMsgMC.CommandType.RELOAD_AUTHENTICATION;
        return this;
      }
    }
    static PBMsgMCSuperCmd() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgPair : pb::GeneratedMessage<PBMsgPair, PBMsgPair.Builder> {
    private PBMsgPair() { }
    private static readonly PBMsgPair defaultInstance = new PBMsgPair().MakeReadOnly();
    private static readonly string[] _pBMsgPairFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _pBMsgPairFieldTags = new uint[] { 10, 18 };
    public static PBMsgPair DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgPair DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgPair ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgPair__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgPair, PBMsgPair.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgPair__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgPairFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgPair ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgPair ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgPair ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgPair ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgPair ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgPair MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgPair prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgPair, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgPair cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgPair result;
      
      private PBMsgPair PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgPair original = result;
          result = new PBMsgPair();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgPair MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgPair.Descriptor; }
      }
      
      public override PBMsgPair DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgPair.DefaultInstance; }
      }
      
      public override PBMsgPair BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgPair) {
          return MergeFrom((PBMsgPair) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgPair other) {
        if (other == global::PBWrapMsgMC.PBMsgPair.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgPairFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgPairFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static PBMsgPair() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMsgSimMap : pb::GeneratedMessage<PBMsgSimMap, PBMsgSimMap.Builder> {
    private PBMsgSimMap() { }
    private static readonly PBMsgSimMap defaultInstance = new PBMsgSimMap().MakeReadOnly();
    private static readonly string[] _pBMsgSimMapFieldNames = new string[] { "info", "messageId", "messageService", "name", "node" };
    private static readonly uint[] _pBMsgSimMapFieldTags = new uint[] { 42, 8, 18, 26, 34 };
    public static PBMsgSimMap DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMsgSimMap DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMsgSimMap ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgSimMap__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMsgSimMap, PBMsgSimMap.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_PBMsgSimMap__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int NodeFieldNumber = 4;
    private pbc::PopsicleList<global::PBWrapMsgMC.PBMsgPair> node_ = new pbc::PopsicleList<global::PBWrapMsgMC.PBMsgPair>();
    public scg::IList<global::PBWrapMsgMC.PBMsgPair> NodeList {
      get { return node_; }
    }
    public int NodeCount {
      get { return node_.Count; }
    }
    public global::PBWrapMsgMC.PBMsgPair GetNode(int index) {
      return node_[index];
    }
    
    public const int InfoFieldNumber = 5;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        if (!hasName) return false;
        foreach (global::PBWrapMsgMC.PBMsgPair element in NodeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMsgSimMapFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[1], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[2], MessageService);
      }
      if (hasName) {
        output.WriteString(3, field_names[3], Name);
      }
      if (node_.Count > 0) {
        output.WriteMessageArray(4, field_names[4], node_);
      }
      if (hasInfo) {
        output.WriteString(5, field_names[0], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        foreach (global::PBWrapMsgMC.PBMsgPair element in NodeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMsgSimMap ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMsgSimMap ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMsgSimMap ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMsgSimMap ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMsgSimMap MakeReadOnly() {
      node_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMsgSimMap prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMsgSimMap, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMsgSimMap cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMsgSimMap result;
      
      private PBMsgSimMap PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMsgSimMap original = result;
          result = new PBMsgSimMap();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMsgSimMap MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.PBMsgSimMap.Descriptor; }
      }
      
      public override PBMsgSimMap DefaultInstanceForType {
        get { return global::PBWrapMsgMC.PBMsgSimMap.DefaultInstance; }
      }
      
      public override PBMsgSimMap BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMsgSimMap) {
          return MergeFrom((PBMsgSimMap) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMsgSimMap other) {
        if (other == global::PBWrapMsgMC.PBMsgSimMap.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.node_.Count != 0) {
          result.node_.Add(other.node_);
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMsgSimMapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMsgSimMapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.node_, global::PBWrapMsgMC.PBMsgPair.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::PBWrapMsgMC.PBMsgPair> NodeList {
        get { return PrepareBuilder().node_; }
      }
      public int NodeCount {
        get { return result.NodeCount; }
      }
      public global::PBWrapMsgMC.PBMsgPair GetNode(int index) {
        return result.GetNode(index);
      }
      public Builder SetNode(int index, global::PBWrapMsgMC.PBMsgPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.node_[index] = value;
        return this;
      }
      public Builder SetNode(int index, global::PBWrapMsgMC.PBMsgPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.node_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNode(global::PBWrapMsgMC.PBMsgPair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.node_.Add(value);
        return this;
      }
      public Builder AddNode(global::PBWrapMsgMC.PBMsgPair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.node_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNode(scg::IEnumerable<global::PBWrapMsgMC.PBMsgPair> values) {
        PrepareBuilder();
        result.node_.Add(values);
        return this;
      }
      public Builder ClearNode() {
        PrepareBuilder();
        result.node_.Clear();
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
    }
    static PBMsgSimMap() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DBQuery : pb::GeneratedMessage<DBQuery, DBQuery.Builder> {
    private DBQuery() { }
    private static readonly DBQuery defaultInstance = new DBQuery().MakeReadOnly();
    private static readonly string[] _dBQueryFieldNames = new string[] { "SQL", "columnNum", "connection", "dataType", "messageId", "messageService", "name", "parameter_name", "parameter_size", "parameter_type", "parameter_value", "queryType", "rows" };
    private static readonly uint[] _dBQueryFieldTags = new uint[] { 50, 56, 42, 72, 8, 18, 34, 82, 106, 98, 90, 24, 66 };
    public static DBQuery DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DBQuery DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DBQuery ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_DBQuery__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DBQuery, DBQuery.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_DBQuery__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private int messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public int MessageId {
      get { return messageId_; }
    }
    
    public const int MessageServiceFieldNumber = 2;
    private bool hasMessageService;
    private string messageService_ = "";
    public bool HasMessageService {
      get { return hasMessageService; }
    }
    public string MessageService {
      get { return messageService_; }
    }
    
    public const int QueryTypeFieldNumber = 3;
    private bool hasQueryType;
    private global::PBWrapMsgMC.QueryType queryType_ = global::PBWrapMsgMC.QueryType.REQUEST;
    public bool HasQueryType {
      get { return hasQueryType; }
    }
    public global::PBWrapMsgMC.QueryType QueryType {
      get { return queryType_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ConnectionFieldNumber = 5;
    private bool hasConnection;
    private string connection_ = "";
    public bool HasConnection {
      get { return hasConnection; }
    }
    public string Connection {
      get { return connection_; }
    }
    
    public const int SQLFieldNumber = 6;
    private bool hasSQL;
    private string sQL_ = "";
    public bool HasSQL {
      get { return hasSQL; }
    }
    public string SQL {
      get { return sQL_; }
    }
    
    public const int ColumnNumFieldNumber = 7;
    private bool hasColumnNum;
    private int columnNum_;
    public bool HasColumnNum {
      get { return hasColumnNum; }
    }
    public int ColumnNum {
      get { return columnNum_; }
    }
    
    public const int RowsFieldNumber = 8;
    private pbc::PopsicleList<global::PBWrapMsgMC.DBRow> rows_ = new pbc::PopsicleList<global::PBWrapMsgMC.DBRow>();
    public scg::IList<global::PBWrapMsgMC.DBRow> RowsList {
      get { return rows_; }
    }
    public int RowsCount {
      get { return rows_.Count; }
    }
    public global::PBWrapMsgMC.DBRow GetRows(int index) {
      return rows_[index];
    }
    
    public const int DataTypeFieldNumber = 9;
    private bool hasDataType;
    private global::PBWrapMsgMC.DataType dataType_ = global::PBWrapMsgMC.DataType.IMAGE;
    public bool HasDataType {
      get { return hasDataType; }
    }
    public global::PBWrapMsgMC.DataType DataType {
      get { return dataType_; }
    }
    
    public const int ParameterNameFieldNumber = 10;
    private pbc::PopsicleList<string> parameterName_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParameterNameList {
      get { return pbc::Lists.AsReadOnly(parameterName_); }
    }
    public int ParameterNameCount {
      get { return parameterName_.Count; }
    }
    public string GetParameterName(int index) {
      return parameterName_[index];
    }
    
    public const int ParameterValueFieldNumber = 11;
    private pbc::PopsicleList<string> parameterValue_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParameterValueList {
      get { return pbc::Lists.AsReadOnly(parameterValue_); }
    }
    public int ParameterValueCount {
      get { return parameterValue_.Count; }
    }
    public string GetParameterValue(int index) {
      return parameterValue_[index];
    }
    
    public const int ParameterTypeFieldNumber = 12;
    private pbc::PopsicleList<string> parameterType_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParameterTypeList {
      get { return pbc::Lists.AsReadOnly(parameterType_); }
    }
    public int ParameterTypeCount {
      get { return parameterType_.Count; }
    }
    public string GetParameterType(int index) {
      return parameterType_[index];
    }
    
    public const int ParameterSizeFieldNumber = 13;
    private pbc::PopsicleList<string> parameterSize_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParameterSizeList {
      get { return pbc::Lists.AsReadOnly(parameterSize_); }
    }
    public int ParameterSizeCount {
      get { return parameterSize_.Count; }
    }
    public string GetParameterSize(int index) {
      return parameterSize_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasMessageService) return false;
        if (!hasQueryType) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dBQueryFieldNames;
      if (hasMessageId) {
        output.WriteInt32(1, field_names[4], MessageId);
      }
      if (hasMessageService) {
        output.WriteString(2, field_names[5], MessageService);
      }
      if (hasQueryType) {
        output.WriteEnum(3, field_names[11], (int) QueryType, QueryType);
      }
      if (hasName) {
        output.WriteString(4, field_names[6], Name);
      }
      if (hasConnection) {
        output.WriteString(5, field_names[2], Connection);
      }
      if (hasSQL) {
        output.WriteString(6, field_names[0], SQL);
      }
      if (hasColumnNum) {
        output.WriteInt32(7, field_names[1], ColumnNum);
      }
      if (rows_.Count > 0) {
        output.WriteMessageArray(8, field_names[12], rows_);
      }
      if (hasDataType) {
        output.WriteEnum(9, field_names[3], (int) DataType, DataType);
      }
      if (parameterName_.Count > 0) {
        output.WriteStringArray(10, field_names[7], parameterName_);
      }
      if (parameterValue_.Count > 0) {
        output.WriteStringArray(11, field_names[10], parameterValue_);
      }
      if (parameterType_.Count > 0) {
        output.WriteStringArray(12, field_names[9], parameterType_);
      }
      if (parameterSize_.Count > 0) {
        output.WriteStringArray(13, field_names[8], parameterSize_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MessageId);
        }
        if (hasMessageService) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MessageService);
        }
        if (hasQueryType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) QueryType);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasConnection) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Connection);
        }
        if (hasSQL) {
          size += pb::CodedOutputStream.ComputeStringSize(6, SQL);
        }
        if (hasColumnNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ColumnNum);
        }
        foreach (global::PBWrapMsgMC.DBRow element in RowsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (hasDataType) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) DataType);
        }
        {
          int dataSize = 0;
          foreach (string element in ParameterNameList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parameterName_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ParameterValueList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parameterValue_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ParameterTypeList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parameterType_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ParameterSizeList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * parameterSize_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DBQuery ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBQuery ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBQuery ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBQuery ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBQuery ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBQuery ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DBQuery ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DBQuery ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DBQuery ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBQuery ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DBQuery MakeReadOnly() {
      rows_.MakeReadOnly();
      parameterName_.MakeReadOnly();
      parameterValue_.MakeReadOnly();
      parameterType_.MakeReadOnly();
      parameterSize_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DBQuery prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DBQuery, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DBQuery cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DBQuery result;
      
      private DBQuery PrepareBuilder() {
        if (resultIsReadOnly) {
          DBQuery original = result;
          result = new DBQuery();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DBQuery MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.DBQuery.Descriptor; }
      }
      
      public override DBQuery DefaultInstanceForType {
        get { return global::PBWrapMsgMC.DBQuery.DefaultInstance; }
      }
      
      public override DBQuery BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DBQuery) {
          return MergeFrom((DBQuery) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DBQuery other) {
        if (other == global::PBWrapMsgMC.DBQuery.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasMessageService) {
          MessageService = other.MessageService;
        }
        if (other.HasQueryType) {
          QueryType = other.QueryType;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasConnection) {
          Connection = other.Connection;
        }
        if (other.HasSQL) {
          SQL = other.SQL;
        }
        if (other.HasColumnNum) {
          ColumnNum = other.ColumnNum;
        }
        if (other.rows_.Count != 0) {
          result.rows_.Add(other.rows_);
        }
        if (other.HasDataType) {
          DataType = other.DataType;
        }
        if (other.parameterName_.Count != 0) {
          result.parameterName_.Add(other.parameterName_);
        }
        if (other.parameterValue_.Count != 0) {
          result.parameterValue_.Add(other.parameterValue_);
        }
        if (other.parameterType_.Count != 0) {
          result.parameterType_.Add(other.parameterType_);
        }
        if (other.parameterSize_.Count != 0) {
          result.parameterSize_.Add(other.parameterSize_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dBQueryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dBQueryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMessageId = input.ReadInt32(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasMessageService = input.ReadString(ref result.messageService_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.queryType_, out unknown)) {
                result.hasQueryType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 42: {
              result.hasConnection = input.ReadString(ref result.connection_);
              break;
            }
            case 50: {
              result.hasSQL = input.ReadString(ref result.sQL_);
              break;
            }
            case 56: {
              result.hasColumnNum = input.ReadInt32(ref result.columnNum_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.rows_, global::PBWrapMsgMC.DBRow.DefaultInstance, extensionRegistry);
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.dataType_, out unknown)) {
                result.hasDataType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 82: {
              input.ReadStringArray(tag, field_name, result.parameterName_);
              break;
            }
            case 90: {
              input.ReadStringArray(tag, field_name, result.parameterValue_);
              break;
            }
            case 98: {
              input.ReadStringArray(tag, field_name, result.parameterType_);
              break;
            }
            case 106: {
              input.ReadStringArray(tag, field_name, result.parameterSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public int MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(int value) {
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = 0;
        return this;
      }
      
      public bool HasMessageService {
        get { return result.hasMessageService; }
      }
      public string MessageService {
        get { return result.MessageService; }
        set { SetMessageService(value); }
      }
      public Builder SetMessageService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageService = true;
        result.messageService_ = value;
        return this;
      }
      public Builder ClearMessageService() {
        PrepareBuilder();
        result.hasMessageService = false;
        result.messageService_ = "";
        return this;
      }
      
      public bool HasQueryType {
       get { return result.hasQueryType; }
      }
      public global::PBWrapMsgMC.QueryType QueryType {
        get { return result.QueryType; }
        set { SetQueryType(value); }
      }
      public Builder SetQueryType(global::PBWrapMsgMC.QueryType value) {
        PrepareBuilder();
        result.hasQueryType = true;
        result.queryType_ = value;
        return this;
      }
      public Builder ClearQueryType() {
        PrepareBuilder();
        result.hasQueryType = false;
        result.queryType_ = global::PBWrapMsgMC.QueryType.REQUEST;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasConnection {
        get { return result.hasConnection; }
      }
      public string Connection {
        get { return result.Connection; }
        set { SetConnection(value); }
      }
      public Builder SetConnection(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConnection = true;
        result.connection_ = value;
        return this;
      }
      public Builder ClearConnection() {
        PrepareBuilder();
        result.hasConnection = false;
        result.connection_ = "";
        return this;
      }
      
      public bool HasSQL {
        get { return result.hasSQL; }
      }
      public string SQL {
        get { return result.SQL; }
        set { SetSQL(value); }
      }
      public Builder SetSQL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSQL = true;
        result.sQL_ = value;
        return this;
      }
      public Builder ClearSQL() {
        PrepareBuilder();
        result.hasSQL = false;
        result.sQL_ = "";
        return this;
      }
      
      public bool HasColumnNum {
        get { return result.hasColumnNum; }
      }
      public int ColumnNum {
        get { return result.ColumnNum; }
        set { SetColumnNum(value); }
      }
      public Builder SetColumnNum(int value) {
        PrepareBuilder();
        result.hasColumnNum = true;
        result.columnNum_ = value;
        return this;
      }
      public Builder ClearColumnNum() {
        PrepareBuilder();
        result.hasColumnNum = false;
        result.columnNum_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::PBWrapMsgMC.DBRow> RowsList {
        get { return PrepareBuilder().rows_; }
      }
      public int RowsCount {
        get { return result.RowsCount; }
      }
      public global::PBWrapMsgMC.DBRow GetRows(int index) {
        return result.GetRows(index);
      }
      public Builder SetRows(int index, global::PBWrapMsgMC.DBRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rows_[index] = value;
        return this;
      }
      public Builder SetRows(int index, global::PBWrapMsgMC.DBRow.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rows_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRows(global::PBWrapMsgMC.DBRow value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rows_.Add(value);
        return this;
      }
      public Builder AddRows(global::PBWrapMsgMC.DBRow.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rows_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRows(scg::IEnumerable<global::PBWrapMsgMC.DBRow> values) {
        PrepareBuilder();
        result.rows_.Add(values);
        return this;
      }
      public Builder ClearRows() {
        PrepareBuilder();
        result.rows_.Clear();
        return this;
      }
      
      public bool HasDataType {
       get { return result.hasDataType; }
      }
      public global::PBWrapMsgMC.DataType DataType {
        get { return result.DataType; }
        set { SetDataType(value); }
      }
      public Builder SetDataType(global::PBWrapMsgMC.DataType value) {
        PrepareBuilder();
        result.hasDataType = true;
        result.dataType_ = value;
        return this;
      }
      public Builder ClearDataType() {
        PrepareBuilder();
        result.hasDataType = false;
        result.dataType_ = global::PBWrapMsgMC.DataType.IMAGE;
        return this;
      }
      
      public pbc::IPopsicleList<string> ParameterNameList {
        get { return PrepareBuilder().parameterName_; }
      }
      public int ParameterNameCount {
        get { return result.ParameterNameCount; }
      }
      public string GetParameterName(int index) {
        return result.GetParameterName(index);
      }
      public Builder SetParameterName(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterName_[index] = value;
        return this;
      }
      public Builder AddParameterName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterName_.Add(value);
        return this;
      }
      public Builder AddRangeParameterName(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parameterName_.Add(values);
        return this;
      }
      public Builder ClearParameterName() {
        PrepareBuilder();
        result.parameterName_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ParameterValueList {
        get { return PrepareBuilder().parameterValue_; }
      }
      public int ParameterValueCount {
        get { return result.ParameterValueCount; }
      }
      public string GetParameterValue(int index) {
        return result.GetParameterValue(index);
      }
      public Builder SetParameterValue(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterValue_[index] = value;
        return this;
      }
      public Builder AddParameterValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterValue_.Add(value);
        return this;
      }
      public Builder AddRangeParameterValue(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parameterValue_.Add(values);
        return this;
      }
      public Builder ClearParameterValue() {
        PrepareBuilder();
        result.parameterValue_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ParameterTypeList {
        get { return PrepareBuilder().parameterType_; }
      }
      public int ParameterTypeCount {
        get { return result.ParameterTypeCount; }
      }
      public string GetParameterType(int index) {
        return result.GetParameterType(index);
      }
      public Builder SetParameterType(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterType_[index] = value;
        return this;
      }
      public Builder AddParameterType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterType_.Add(value);
        return this;
      }
      public Builder AddRangeParameterType(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parameterType_.Add(values);
        return this;
      }
      public Builder ClearParameterType() {
        PrepareBuilder();
        result.parameterType_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ParameterSizeList {
        get { return PrepareBuilder().parameterSize_; }
      }
      public int ParameterSizeCount {
        get { return result.ParameterSizeCount; }
      }
      public string GetParameterSize(int index) {
        return result.GetParameterSize(index);
      }
      public Builder SetParameterSize(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterSize_[index] = value;
        return this;
      }
      public Builder AddParameterSize(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameterSize_.Add(value);
        return this;
      }
      public Builder AddRangeParameterSize(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parameterSize_.Add(values);
        return this;
      }
      public Builder ClearParameterSize() {
        PrepareBuilder();
        result.parameterSize_.Clear();
        return this;
      }
    }
    static DBQuery() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DBRow : pb::GeneratedMessage<DBRow, DBRow.Builder> {
    private DBRow() { }
    private static readonly DBRow defaultInstance = new DBRow().MakeReadOnly();
    private static readonly string[] _dBRowFieldNames = new string[] { "columns" };
    private static readonly uint[] _dBRowFieldTags = new uint[] { 10 };
    public static DBRow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DBRow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DBRow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_DBRow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DBRow, DBRow.Builder> InternalFieldAccessors {
      get { return global::PBWrapMsgMC.Generated.PBMsgMC.internal__static_PBWrapMsgMC_DBRow__FieldAccessorTable; }
    }
    
    public const int ColumnsFieldNumber = 1;
    private pbc::PopsicleList<string> columns_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ColumnsList {
      get { return pbc::Lists.AsReadOnly(columns_); }
    }
    public int ColumnsCount {
      get { return columns_.Count; }
    }
    public string GetColumns(int index) {
      return columns_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dBRowFieldNames;
      if (columns_.Count > 0) {
        output.WriteStringArray(1, field_names[0], columns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in ColumnsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * columns_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DBRow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBRow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBRow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBRow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBRow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBRow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DBRow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DBRow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DBRow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBRow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DBRow MakeReadOnly() {
      columns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DBRow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DBRow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DBRow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DBRow result;
      
      private DBRow PrepareBuilder() {
        if (resultIsReadOnly) {
          DBRow original = result;
          result = new DBRow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DBRow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PBWrapMsgMC.DBRow.Descriptor; }
      }
      
      public override DBRow DefaultInstanceForType {
        get { return global::PBWrapMsgMC.DBRow.DefaultInstance; }
      }
      
      public override DBRow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DBRow) {
          return MergeFrom((DBRow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DBRow other) {
        if (other == global::PBWrapMsgMC.DBRow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.columns_.Count != 0) {
          result.columns_.Add(other.columns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dBRowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dBRowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.columns_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> ColumnsList {
        get { return PrepareBuilder().columns_; }
      }
      public int ColumnsCount {
        get { return result.ColumnsCount; }
      }
      public string GetColumns(int index) {
        return result.GetColumns(index);
      }
      public Builder SetColumns(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_[index] = value;
        return this;
      }
      public Builder AddColumns(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.columns_.Add(value);
        return this;
      }
      public Builder AddRangeColumns(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.columns_.Add(values);
        return this;
      }
      public Builder ClearColumns() {
        PrepareBuilder();
        result.columns_.Clear();
        return this;
      }
    }
    static DBRow() {
      object.ReferenceEquals(global::PBWrapMsgMC.Generated.PBMsgMC.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
